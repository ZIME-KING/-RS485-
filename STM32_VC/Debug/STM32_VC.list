
STM32_VC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a02c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003500  0800a140  0800a140  0001a140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d640  0800d640  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800d640  0800d640  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d640  0800d640  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d640  0800d640  0001d640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d648  0800d648  0001d648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d64c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  200001dc  0800d828  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  0800d828  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000a72f2  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f8e  00000000  00000000  000c74f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002f98  00000000  00000000  000cc488  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002d28  00000000  00000000  000cf420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cbed  00000000  00000000  000d2148  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001de84  00000000  00000000  000eed35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5347  00000000  00000000  0010cbb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b1f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d878  00000000  00000000  001b1f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a124 	.word	0x0800a124

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800a124 	.word	0x0800a124

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f000 fc8a 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f848 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 f9ea 	bl	8001448 <MX_GPIO_Init>
  MX_DMA_Init();
 8001074:	f000 f9ca 	bl	800140c <MX_DMA_Init>
  MX_ADC1_Init();
 8001078:	f000 f89e 	bl	80011b8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800107c:	f000 f972 	bl	8001364 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001080:	f000 f924 	bl	80012cc <MX_TIM2_Init>
  MX_I2C1_Init();
 8001084:	f000 f8f4 	bl	8001270 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001088:	f000 f996 	bl	80013b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  Start_Peripheral();
 800108c:	f005 f882 	bl	8006194 <Start_Peripheral>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
#ifdef SLAVE
	  if(CompareTime(&Task_5)){
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <main+0x88>)
 8001092:	f004 fd08 	bl	8005aa6 <CompareTime>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <main+0x42>
		  GetTime(&Task_5);
 800109c:	4813      	ldr	r0, [pc, #76]	; (80010ec <main+0x88>)
 800109e:	f004 fcf5 	bl	8005a8c <GetTime>
		  GET_CH_Vlaue();
 80010a2:	f004 ffc5 	bl	8006030 <GET_CH_Vlaue>
	  }

	  if(CompareTime(&Task_50)){
 80010a6:	4812      	ldr	r0, [pc, #72]	; (80010f0 <main+0x8c>)
 80010a8:	f004 fcfd 	bl	8005aa6 <CompareTime>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <main+0x54>
		  GetTime(&Task_50);
 80010b2:	480f      	ldr	r0, [pc, #60]	; (80010f0 <main+0x8c>)
 80010b4:	f004 fcea 	bl	8005a8c <GetTime>
	  }

	  if(CompareTime(&Task_100)){
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <main+0x90>)
 80010ba:	f004 fcf4 	bl	8005aa6 <CompareTime>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <main+0x70>
		  GetTime(&Task_100);
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <main+0x90>)
 80010c6:	f004 fce1 	bl	8005a8c <GetTime>
		  HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 80010ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <main+0x94>)
 80010d0:	f001 fe2d 	bl	8002d2e <HAL_GPIO_TogglePin>
		  //HAL_UART_Transmit_Str(&huart1,(uint8_t*)"usart_ok");
	  }

	  if(CompareTime(&Task_1000)){
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <main+0x98>)
 80010d6:	f004 fce6 	bl	8005aa6 <CompareTime>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0d7      	beq.n	8001090 <main+0x2c>
		  GetTime(&Task_1000);
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <main+0x98>)
 80010e2:	f004 fcd3 	bl	8005a8c <GetTime>
		  User_Display_Function_SLAVE();
 80010e6:	f004 fe23 	bl	8005d30 <User_Display_Function_SLAVE>
	  if(CompareTime(&Task_5)){
 80010ea:	e7d1      	b.n	8001090 <main+0x2c>
 80010ec:	20000844 	.word	0x20000844
 80010f0:	2000085c 	.word	0x2000085c
 80010f4:	20000864 	.word	0x20000864
 80010f8:	40011000 	.word	0x40011000
 80010fc:	2000086c 	.word	0x2000086c

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	2228      	movs	r2, #40	; 0x28
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f006 ffc4 	bl	800809c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113e:	2301      	movs	r3, #1
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001142:	2302      	movs	r3, #2
 8001144:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001146:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800114a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800114c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001150:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fa40 	bl	80035dc <HAL_RCC_OscConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001162:	f000 f9d5 	bl	8001510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001166:	230f      	movs	r3, #15
 8001168:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001176:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2102      	movs	r1, #2
 8001182:	4618      	mov	r0, r3
 8001184:	f002 fcaa 	bl	8003adc <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800118e:	f000 f9bf 	bl	8001510 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001192:	2302      	movs	r3, #2
 8001194:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800119a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4618      	mov	r0, r3
 80011a0:	f002 fe38 	bl	8003e14 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011aa:	f000 f9b1 	bl	8001510 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <MX_ADC1_Init+0xb0>)
 80011ca:	4a28      	ldr	r2, [pc, #160]	; (800126c <MX_ADC1_Init+0xb4>)
 80011cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <MX_ADC1_Init+0xb0>)
 80011d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <MX_ADC1_Init+0xb0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <MX_ADC1_Init+0xb0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <MX_ADC1_Init+0xb0>)
 80011e4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <MX_ADC1_Init+0xb0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	; (8001268 <MX_ADC1_Init+0xb0>)
 80011f2:	2203      	movs	r2, #3
 80011f4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f6:	481c      	ldr	r0, [pc, #112]	; (8001268 <MX_ADC1_Init+0xb0>)
 80011f8:	f000 fc46 	bl	8001a88 <HAL_ADC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001202:	f000 f985 	bl	8001510 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800120a:	2301      	movs	r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800120e:	2303      	movs	r3, #3
 8001210:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	4619      	mov	r1, r3
 8001216:	4814      	ldr	r0, [pc, #80]	; (8001268 <MX_ADC1_Init+0xb0>)
 8001218:	f000 fe08 	bl	8001e2c <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f975 	bl	8001510 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001226:	2301      	movs	r3, #1
 8001228:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800122a:	2302      	movs	r3, #2
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <MX_ADC1_Init+0xb0>)
 8001234:	f000 fdfa 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800123e:	f000 f967 	bl	8001510 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001242:	2302      	movs	r3, #2
 8001244:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001246:	2303      	movs	r3, #3
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_ADC1_Init+0xb0>)
 8001250:	f000 fdec 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800125a:	f000 f959 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000708 	.word	0x20000708
 800126c:	40012400 	.word	0x40012400

08001270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <MX_I2C1_Init+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C1_Init+0x50>)
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x58>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_I2C1_Init+0x50>)
 800128e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012ae:	f001 fd57 	bl	8002d60 <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 f92a 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000630 	.word	0x20000630
 80012c4:	40005400 	.word	0x40005400
 80012c8:	00061a80 	.word	0x00061a80

080012cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_TIM2_Init+0x94>)
 80012ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_TIM2_Init+0x94>)
 80012f2:	2247      	movs	r2, #71	; 0x47
 80012f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_TIM2_Init+0x94>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80012fc:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_TIM2_Init+0x94>)
 80012fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_TIM2_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_TIM2_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <MX_TIM2_Init+0x94>)
 8001312:	f002 fef1 	bl	80040f8 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800131c:	f000 f8f8 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4619      	mov	r1, r3
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <MX_TIM2_Init+0x94>)
 800132e:	f003 f88d 	bl	800444c <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001338:	f000 f8ea 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_TIM2_Init+0x94>)
 800134a:	f003 fa53 	bl	80047f4 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001354:	f000 f8dc 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000778 	.word	0x20000778

08001364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_USART1_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800139c:	f003 fa9a 	bl	80048d4 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 f8b3 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200006c8 	.word	0x200006c8
 80013b4:	40013800 	.word	0x40013800

080013b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <MX_USART3_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_USART3_UART_Init+0x4c>)
 80013f0:	f003 fa70 	bl	80048d4 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 f889 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000738 	.word	0x20000738
 8001408:	40004800 	.word	0x40004800

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_DMA_Init+0x38>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <MX_DMA_Init+0x38>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6153      	str	r3, [r2, #20]
 800141e:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_DMA_Init+0x38>)
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800142a:	2200      	movs	r2, #0
 800142c:	2100      	movs	r1, #0
 800142e:	200b      	movs	r0, #11
 8001430:	f001 f859 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001434:	200b      	movs	r0, #11
 8001436:	f001 f872 	bl	800251e <HAL_NVIC_EnableIRQ>

}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000

08001448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145c:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <MX_GPIO_Init+0xc0>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	4a29      	ldr	r2, [pc, #164]	; (8001508 <MX_GPIO_Init+0xc0>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	6193      	str	r3, [r2, #24]
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <MX_GPIO_Init+0xc0>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	f003 0310 	and.w	r3, r3, #16
 8001470:	60fb      	str	r3, [r7, #12]
 8001472:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001474:	4b24      	ldr	r3, [pc, #144]	; (8001508 <MX_GPIO_Init+0xc0>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a23      	ldr	r2, [pc, #140]	; (8001508 <MX_GPIO_Init+0xc0>)
 800147a:	f043 0320 	orr.w	r3, r3, #32
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_GPIO_Init+0xc0>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <MX_GPIO_Init+0xc0>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <MX_GPIO_Init+0xc0>)
 8001492:	f043 0304 	orr.w	r3, r3, #4
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <MX_GPIO_Init+0xc0>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b18      	ldr	r3, [pc, #96]	; (8001508 <MX_GPIO_Init+0xc0>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a17      	ldr	r2, [pc, #92]	; (8001508 <MX_GPIO_Init+0xc0>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <MX_GPIO_Init+0xc0>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TEST_GPIO_Port, LED_TEST_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	4812      	ldr	r0, [pc, #72]	; (800150c <MX_GPIO_Init+0xc4>)
 80014c4:	f001 fc1b 	bl	8002cfe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_TEST_Pin */
  GPIO_InitStruct.Pin = LED_TEST_Pin;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_TEST_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <MX_GPIO_Init+0xc4>)
 80014e2:	f001 fa9b 	bl	8002a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_0_Pin KEY_1_Pin */
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin;
 80014e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 0310 	add.w	r3, r7, #16
 80014f8:	4619      	mov	r1, r3
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <MX_GPIO_Init+0xc4>)
 80014fc:	f001 fa8e 	bl	8002a1c <HAL_GPIO_Init>

}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40021000 	.word	0x40021000
 800150c:	40011000 	.word	0x40011000

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001516:	e7fe      	b.n	8001516 <Error_Handler+0x6>

08001518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_MspInit+0x5c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <HAL_MspInit+0x5c>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_MspInit+0x5c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_MspInit+0x5c>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <HAL_MspInit+0x5c>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	61d3      	str	r3, [r2, #28]
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <HAL_MspInit+0x5c>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_MspInit+0x60>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_MspInit+0x60>)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40021000 	.word	0x40021000
 8001578:	40010000 	.word	0x40010000

0800157c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a28      	ldr	r2, [pc, #160]	; (8001638 <HAL_ADC_MspInit+0xbc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d149      	bne.n	8001630 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800159c:	4b27      	ldr	r3, [pc, #156]	; (800163c <HAL_ADC_MspInit+0xc0>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	4a26      	ldr	r2, [pc, #152]	; (800163c <HAL_ADC_MspInit+0xc0>)
 80015a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_ADC_MspInit+0xc0>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_ADC_MspInit+0xc0>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a20      	ldr	r2, [pc, #128]	; (800163c <HAL_ADC_MspInit+0xc0>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_ADC_MspInit+0xc0>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80015cc:	2307      	movs	r3, #7
 80015ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	2303      	movs	r3, #3
 80015d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4619      	mov	r1, r3
 80015da:	4819      	ldr	r0, [pc, #100]	; (8001640 <HAL_ADC_MspInit+0xc4>)
 80015dc:	f001 fa1e 	bl	8002a1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015e0:	4b18      	ldr	r3, [pc, #96]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 80015e2:	4a19      	ldr	r2, [pc, #100]	; (8001648 <HAL_ADC_MspInit+0xcc>)
 80015e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ec:	4b15      	ldr	r3, [pc, #84]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 80015fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 8001602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001606:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 800160a:	2220      	movs	r2, #32
 800160c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001614:	480b      	ldr	r0, [pc, #44]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 8001616:	f000 ff9d 	bl	8002554 <HAL_DMA_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001620:	f7ff ff76 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 8001628:	621a      	str	r2, [r3, #32]
 800162a:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_ADC_MspInit+0xc8>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3720      	adds	r7, #32
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40012400 	.word	0x40012400
 800163c:	40021000 	.word	0x40021000
 8001640:	40010800 	.word	0x40010800
 8001644:	20000684 	.word	0x20000684
 8001648:	40020008 	.word	0x40020008

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <HAL_I2C_MspInit+0x70>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d123      	bne.n	80016b4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <HAL_I2C_MspInit+0x74>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <HAL_I2C_MspInit+0x74>)
 8001672:	f043 0308 	orr.w	r3, r3, #8
 8001676:	6193      	str	r3, [r2, #24]
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_I2C_MspInit+0x74>)
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001684:	23c0      	movs	r3, #192	; 0xc0
 8001686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001688:	2312      	movs	r3, #18
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <HAL_I2C_MspInit+0x78>)
 8001698:	f001 f9c0 	bl	8002a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_I2C_MspInit+0x74>)
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_I2C_MspInit+0x74>)
 80016a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a6:	61d3      	str	r3, [r2, #28]
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_I2C_MspInit+0x74>)
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40005400 	.word	0x40005400
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010c00 	.word	0x40010c00

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d113      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <HAL_TIM_Base_MspInit+0x44>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_TIM_Base_MspInit+0x44>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_TIM_Base_MspInit+0x44>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	201c      	movs	r0, #28
 80016f8:	f000 fef5 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016fc:	201c      	movs	r0, #28
 80016fe:	f000 ff0e 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a3c      	ldr	r2, [pc, #240]	; (800181c <HAL_UART_MspInit+0x10c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d13a      	bne.n	80017a6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001730:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_UART_MspInit+0x110>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a3a      	ldr	r2, [pc, #232]	; (8001820 <HAL_UART_MspInit+0x110>)
 8001736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_UART_MspInit+0x110>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_UART_MspInit+0x110>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a34      	ldr	r2, [pc, #208]	; (8001820 <HAL_UART_MspInit+0x110>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_UART_MspInit+0x110>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	4619      	mov	r1, r3
 8001774:	482b      	ldr	r0, [pc, #172]	; (8001824 <HAL_UART_MspInit+0x114>)
 8001776:	f001 f951 	bl	8002a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800177a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0318 	add.w	r3, r7, #24
 800178c:	4619      	mov	r1, r3
 800178e:	4825      	ldr	r0, [pc, #148]	; (8001824 <HAL_UART_MspInit+0x114>)
 8001790:	f001 f944 	bl	8002a1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2025      	movs	r0, #37	; 0x25
 800179a:	f000 fea4 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800179e:	2025      	movs	r0, #37	; 0x25
 80017a0:	f000 febd 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a4:	e036      	b.n	8001814 <HAL_UART_MspInit+0x104>
  else if(huart->Instance==USART3)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <HAL_UART_MspInit+0x118>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d131      	bne.n	8001814 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_UART_MspInit+0x110>)
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	4a1a      	ldr	r2, [pc, #104]	; (8001820 <HAL_UART_MspInit+0x110>)
 80017b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ba:	61d3      	str	r3, [r2, #28]
 80017bc:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_UART_MspInit+0x110>)
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_UART_MspInit+0x110>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_UART_MspInit+0x110>)
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	6193      	str	r3, [r2, #24]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_UART_MspInit+0x110>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 0318 	add.w	r3, r7, #24
 80017f2:	4619      	mov	r1, r3
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <HAL_UART_MspInit+0x11c>)
 80017f6:	f001 f911 	bl	8002a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	; (800182c <HAL_UART_MspInit+0x11c>)
 8001810:	f001 f904 	bl	8002a1c <HAL_GPIO_Init>
}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40013800 	.word	0x40013800
 8001820:	40021000 	.word	0x40021000
 8001824:	40010800 	.word	0x40010800
 8001828:	40004800 	.word	0x40004800
 800182c:	40010c00 	.word	0x40010c00

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr

0800185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001876:	f000 f8c9 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <DMA1_Channel1_IRQHandler+0x10>)
 8001886:	f000 ff95 	bl	80027b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000684 	.word	0x20000684

08001894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <TIM2_IRQHandler+0x10>)
 800189a:	f002 fccf 	bl	800423c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000778 	.word	0x20000778

080018a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <USART1_IRQHandler+0x10>)
 80018ae:	f003 f945 	bl	8004b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200006c8 	.word	0x200006c8

080018bc <_sbrk>:
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
 80018ec:	f006 fbac 	bl	8008048 <__errno>
 80018f0:	4602      	mov	r2, r0
 80018f2:	230c      	movs	r3, #12
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20005000 	.word	0x20005000
 800191c:	00000400 	.word	0x00000400
 8001920:	200001f8 	.word	0x200001f8
 8001924:	20000a68 	.word	0x20000a68

08001928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <Reset_Handler>:
 8001934:	2100      	movs	r1, #0
 8001936:	e003      	b.n	8001940 <LoopCopyDataInit>

08001938 <CopyDataInit>:
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <LoopFillZerobss+0x14>)
 800193a:	585b      	ldr	r3, [r3, r1]
 800193c:	5043      	str	r3, [r0, r1]
 800193e:	3104      	adds	r1, #4

08001940 <LoopCopyDataInit>:
 8001940:	480a      	ldr	r0, [pc, #40]	; (800196c <LoopFillZerobss+0x18>)
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <LoopFillZerobss+0x1c>)
 8001944:	1842      	adds	r2, r0, r1
 8001946:	429a      	cmp	r2, r3
 8001948:	d3f6      	bcc.n	8001938 <CopyDataInit>
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <LoopFillZerobss+0x20>)
 800194c:	e002      	b.n	8001954 <LoopFillZerobss>

0800194e <FillZerobss>:
 800194e:	2300      	movs	r3, #0
 8001950:	f842 3b04 	str.w	r3, [r2], #4

08001954 <LoopFillZerobss>:
 8001954:	4b08      	ldr	r3, [pc, #32]	; (8001978 <LoopFillZerobss+0x24>)
 8001956:	429a      	cmp	r2, r3
 8001958:	d3f9      	bcc.n	800194e <FillZerobss>
 800195a:	f7ff ffe5 	bl	8001928 <SystemInit>
 800195e:	f006 fb79 	bl	8008054 <__libc_init_array>
 8001962:	f7ff fb7f 	bl	8001064 <main>
 8001966:	4770      	bx	lr
 8001968:	0800d64c 	.word	0x0800d64c
 800196c:	20000000 	.word	0x20000000
 8001970:	200001dc 	.word	0x200001dc
 8001974:	200001dc 	.word	0x200001dc
 8001978:	20000a68 	.word	0x20000a68

0800197c <ADC1_2_IRQHandler>:
 800197c:	e7fe      	b.n	800197c <ADC1_2_IRQHandler>
	...

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x28>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x28>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 fd9d 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	2000      	movs	r0, #0
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fdbc 	bl	8001518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fdb5 	bl	800253a <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 fd7d 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000000 	.word	0x20000000
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000004 	.word	0x20000004

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x1c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_IncTick+0x20>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_IncTick+0x20>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000008 	.word	0x20000008
 8001a2c:	200007c0 	.word	0x200007c0

08001a30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <HAL_GetTick+0x10>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	200007c0 	.word	0x200007c0

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff fff0 	bl	8001a30 <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_Delay+0x40>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffe0 	bl	8001a30 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000008 	.word	0x20000008

08001a88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0be      	b.n	8001c28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff fd58 	bl	800157c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 faf7 	bl	80020c0 <ADC_ConversionStop_Disable>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8099 	bne.w	8001c16 <HAL_ADC_Init+0x18e>
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 8095 	bne.w	8001c16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af4:	f023 0302 	bic.w	r3, r3, #2
 8001af8:	f043 0202 	orr.w	r2, r3, #2
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7b1b      	ldrb	r3, [r3, #12]
 8001b0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b20:	d003      	beq.n	8001b2a <HAL_ADC_Init+0xa2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d102      	bne.n	8001b30 <HAL_ADC_Init+0xa8>
 8001b2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b2e:	e000      	b.n	8001b32 <HAL_ADC_Init+0xaa>
 8001b30:	2300      	movs	r3, #0
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7d1b      	ldrb	r3, [r3, #20]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d119      	bne.n	8001b74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7b1b      	ldrb	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	035a      	lsls	r2, r3, #13
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	e00b      	b.n	8001b74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	f043 0220 	orr.w	r2, r3, #32
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f043 0201 	orr.w	r2, r3, #1
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_ADC_Init+0x1a8>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba4:	d003      	beq.n	8001bae <HAL_ADC_Init+0x126>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d104      	bne.n	8001bb8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	051b      	lsls	r3, r3, #20
 8001bb6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_ADC_Init+0x1ac>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d10b      	bne.n	8001bf4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bf2:	e018      	b.n	8001c26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	f023 0312 	bic.w	r3, r3, #18
 8001bfc:	f043 0210 	orr.w	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c14:	e007      	b.n	8001c26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	f043 0210 	orr.w	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	ffe1f7fd 	.word	0xffe1f7fd
 8001c34:	ff1f0efe 	.word	0xff1f0efe

08001c38 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a64      	ldr	r2, [pc, #400]	; (8001de0 <HAL_ADC_Start_DMA+0x1a8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_ADC_Start_DMA+0x24>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a63      	ldr	r2, [pc, #396]	; (8001de4 <HAL_ADC_Start_DMA+0x1ac>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d106      	bne.n	8001c6a <HAL_ADC_Start_DMA+0x32>
 8001c5c:	4b60      	ldr	r3, [pc, #384]	; (8001de0 <HAL_ADC_Start_DMA+0x1a8>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 80b3 	bne.w	8001dd0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_Start_DMA+0x40>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e0ae      	b.n	8001dd6 <HAL_ADC_Start_DMA+0x19e>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f9cb 	bl	800201c <ADC_Enable>
 8001c86:	4603      	mov	r3, r0
 8001c88:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 809a 	bne.w	8001dc6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a4e      	ldr	r2, [pc, #312]	; (8001de4 <HAL_ADC_Start_DMA+0x1ac>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_Start_DMA+0x84>
 8001cb0:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <HAL_ADC_Start_DMA+0x1a8>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d115      	bne.n	8001ce8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d026      	beq.n	8001d24 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cde:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce6:	e01d      	b.n	8001d24 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a39      	ldr	r2, [pc, #228]	; (8001de0 <HAL_ADC_Start_DMA+0x1a8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_ADC_Start_DMA+0xd0>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a38      	ldr	r2, [pc, #224]	; (8001de4 <HAL_ADC_Start_DMA+0x1ac>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d10d      	bne.n	8001d24 <HAL_ADC_Start_DMA+0xec>
 8001d08:	4b35      	ldr	r3, [pc, #212]	; (8001de0 <HAL_ADC_Start_DMA+0x1a8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d007      	beq.n	8001d24 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d006      	beq.n	8001d3e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d34:	f023 0206 	bic.w	r2, r3, #6
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <HAL_ADC_Start_DMA+0x1b0>)
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a24      	ldr	r2, [pc, #144]	; (8001dec <HAL_ADC_Start_DMA+0x1b4>)
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_ADC_Start_DMA+0x1b8>)
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0202 	mvn.w	r2, #2
 8001d6c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d7c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6a18      	ldr	r0, [r3, #32]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	334c      	adds	r3, #76	; 0x4c
 8001d88:	4619      	mov	r1, r3
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f000 fc3b 	bl	8002608 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d9c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001da0:	d108      	bne.n	8001db4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001db0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001db2:	e00f      	b.n	8001dd4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dc2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001dc4:	e006      	b.n	8001dd4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001dce:	e001      	b.n	8001dd4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40012400 	.word	0x40012400
 8001de4:	40012800 	.word	0x40012800
 8001de8:	08002135 	.word	0x08002135
 8001dec:	080021b1 	.word	0x080021b1
 8001df0:	080021cd 	.word	0x080021cd

08001df4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x20>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e0dc      	b.n	8002006 <HAL_ADC_ConfigChannel+0x1da>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b06      	cmp	r3, #6
 8001e5a:	d81c      	bhi.n	8001e96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b05      	subs	r3, #5
 8001e6e:	221f      	movs	r2, #31
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4019      	ands	r1, r3
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6818      	ldr	r0, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	3b05      	subs	r3, #5
 8001e88:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34
 8001e94:	e03c      	b.n	8001f10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d81c      	bhi.n	8001ed8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	3b23      	subs	r3, #35	; 0x23
 8001eb0:	221f      	movs	r2, #31
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	4019      	ands	r1, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b23      	subs	r3, #35	; 0x23
 8001eca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed6:	e01b      	b.n	8001f10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b41      	subs	r3, #65	; 0x41
 8001eea:	221f      	movs	r2, #31
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4019      	ands	r1, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b41      	subs	r3, #65	; 0x41
 8001f04:	fa00 f203 	lsl.w	r2, r0, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d91c      	bls.n	8001f52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68d9      	ldr	r1, [r3, #12]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	3b1e      	subs	r3, #30
 8001f2a:	2207      	movs	r2, #7
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4019      	ands	r1, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6898      	ldr	r0, [r3, #8]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	3b1e      	subs	r3, #30
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	e019      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6919      	ldr	r1, [r3, #16]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	2207      	movs	r2, #7
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4019      	ands	r1, r3
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	6898      	ldr	r0, [r3, #8]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b10      	cmp	r3, #16
 8001f8c:	d003      	beq.n	8001f96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f92:	2b11      	cmp	r3, #17
 8001f94:	d132      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d125      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d126      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fbc:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b10      	cmp	r3, #16
 8001fc4:	d11a      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	0c9a      	lsrs	r2, r3, #18
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fdc:	e002      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f9      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x1b2>
 8001fea:	e007      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40012400 	.word	0x40012400
 8002014:	20000000 	.word	0x20000000
 8002018:	431bde83 	.word	0x431bde83

0800201c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d039      	beq.n	80020ae <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <ADC_Enable+0x9c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <ADC_Enable+0xa0>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002058:	e002      	b.n	8002060 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002066:	f7ff fce3 	bl	8001a30 <HAL_GetTick>
 800206a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800206c:	e018      	b.n	80020a0 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800206e:	f7ff fcdf 	bl	8001a30 <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d911      	bls.n	80020a0 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f043 0210 	orr.w	r2, r3, #16
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e007      	b.n	80020b0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d1df      	bne.n	800206e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000000 	.word	0x20000000
 80020bc:	431bde83 	.word	0x431bde83

080020c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d127      	bne.n	800212a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020ea:	f7ff fca1 	bl	8001a30 <HAL_GetTick>
 80020ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f0:	e014      	b.n	800211c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020f2:	f7ff fc9d 	bl	8001a30 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d90d      	bls.n	800211c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	f043 0210 	orr.w	r2, r3, #16
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e007      	b.n	800212c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d0e3      	beq.n	80020f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800214a:	2b00      	cmp	r3, #0
 800214c:	d127      	bne.n	800219e <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002164:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002168:	d115      	bne.n	8002196 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800216e:	2b00      	cmp	r3, #0
 8002170:	d111      	bne.n	8002196 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff fe2c 	bl	8001df4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800219c:	e004      	b.n	80021a8 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	4798      	blx	r3
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff fe21 	bl	8001e06 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f043 0204 	orr.w	r2, r3, #4
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff fe10 	bl	8001e18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_ADCEx_Calibration_Start+0x1e>
 800221a:	2302      	movs	r3, #2
 800221c:	e086      	b.n	800232c <HAL_ADCEx_Calibration_Start+0x12c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ff4a 	bl	80020c0 <ADC_ConversionStop_Disable>
 800222c:	4603      	mov	r3, r0
 800222e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d175      	bne.n	8002322 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800223e:	f023 0302 	bic.w	r3, r3, #2
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800224a:	4b3a      	ldr	r3, [pc, #232]	; (8002334 <HAL_ADCEx_Calibration_Start+0x134>)
 800224c:	681c      	ldr	r4, [r3, #0]
 800224e:	2002      	movs	r0, #2
 8002250:	f001 fe96 	bl	8003f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8002254:	4603      	mov	r3, r0
 8002256:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800225a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800225c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800225e:	e002      	b.n	8002266 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	3b01      	subs	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f9      	bne.n	8002260 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fed5 	bl	800201c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0208 	orr.w	r2, r2, #8
 8002280:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002282:	f7ff fbd5 	bl	8001a30 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002288:	e014      	b.n	80022b4 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800228a:	f7ff fbd1 	bl	8001a30 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b0a      	cmp	r3, #10
 8002296:	d90d      	bls.n	80022b4 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	f023 0312 	bic.w	r3, r3, #18
 80022a0:	f043 0210 	orr.w	r2, r3, #16
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e03b      	b.n	800232c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1e3      	bne.n	800228a <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0204 	orr.w	r2, r2, #4
 80022d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80022d2:	f7ff fbad 	bl	8001a30 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80022d8:	e014      	b.n	8002304 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80022da:	f7ff fba9 	bl	8001a30 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b0a      	cmp	r3, #10
 80022e6:	d90d      	bls.n	8002304 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	f023 0312 	bic.w	r3, r3, #18
 80022f0:	f043 0210 	orr.w	r2, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e013      	b.n	800232c <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1e3      	bne.n	80022da <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	f023 0303 	bic.w	r3, r3, #3
 800231a:	f043 0201 	orr.w	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800232a:	7dfb      	ldrb	r3, [r7, #23]
}
 800232c:	4618      	mov	r0, r3
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd90      	pop	{r4, r7, pc}
 8002334:	20000000 	.word	0x20000000

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4906      	ldr	r1, [pc, #24]	; (80023d0 <__NVIC_EnableIRQ+0x34>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	; (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	; (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	; 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff90 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff2d 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff42 	bl	8002380 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff90 	bl	8002428 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5f 	bl	80023d4 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff35 	bl	800239c <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e043      	b.n	80025f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_DMA_Init+0xa8>)
 8002572:	4413      	add	r3, r2
 8002574:	4a22      	ldr	r2, [pc, #136]	; (8002600 <HAL_DMA_Init+0xac>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	009a      	lsls	r2, r3, #2
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a1f      	ldr	r2, [pc, #124]	; (8002604 <HAL_DMA_Init+0xb0>)
 8002586:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800259e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80025ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	bffdfff8 	.word	0xbffdfff8
 8002600:	cccccccd 	.word	0xcccccccd
 8002604:	40020000 	.word	0x40020000

08002608 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_DMA_Start_IT+0x20>
 8002624:	2302      	movs	r3, #2
 8002626:	e04a      	b.n	80026be <HAL_DMA_Start_IT+0xb6>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002636:	2b01      	cmp	r3, #1
 8002638:	d13a      	bne.n	80026b0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f9ae 	bl	80029c0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 020e 	orr.w	r2, r2, #14
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e00f      	b.n	800269e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0204 	bic.w	r2, r2, #4
 800268c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 020a 	orr.w	r2, r2, #10
 800269c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e005      	b.n	80026bc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
 80026ba:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d005      	beq.n	80026ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2204      	movs	r2, #4
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	e051      	b.n	800278e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 020e 	bic.w	r2, r2, #14
 80026f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0201 	bic.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a22      	ldr	r2, [pc, #136]	; (8002798 <HAL_DMA_Abort_IT+0xd0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d029      	beq.n	8002768 <HAL_DMA_Abort_IT+0xa0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a20      	ldr	r2, [pc, #128]	; (800279c <HAL_DMA_Abort_IT+0xd4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d022      	beq.n	8002764 <HAL_DMA_Abort_IT+0x9c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <HAL_DMA_Abort_IT+0xd8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d01a      	beq.n	800275e <HAL_DMA_Abort_IT+0x96>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_DMA_Abort_IT+0xdc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d012      	beq.n	8002758 <HAL_DMA_Abort_IT+0x90>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_DMA_Abort_IT+0xe0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d00a      	beq.n	8002752 <HAL_DMA_Abort_IT+0x8a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <HAL_DMA_Abort_IT+0xe4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d102      	bne.n	800274c <HAL_DMA_Abort_IT+0x84>
 8002746:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800274a:	e00e      	b.n	800276a <HAL_DMA_Abort_IT+0xa2>
 800274c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002750:	e00b      	b.n	800276a <HAL_DMA_Abort_IT+0xa2>
 8002752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002756:	e008      	b.n	800276a <HAL_DMA_Abort_IT+0xa2>
 8002758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275c:	e005      	b.n	800276a <HAL_DMA_Abort_IT+0xa2>
 800275e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002762:	e002      	b.n	800276a <HAL_DMA_Abort_IT+0xa2>
 8002764:	2310      	movs	r3, #16
 8002766:	e000      	b.n	800276a <HAL_DMA_Abort_IT+0xa2>
 8002768:	2301      	movs	r3, #1
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_DMA_Abort_IT+0xe8>)
 800276c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
    } 
  }
  return status;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40020008 	.word	0x40020008
 800279c:	4002001c 	.word	0x4002001c
 80027a0:	40020030 	.word	0x40020030
 80027a4:	40020044 	.word	0x40020044
 80027a8:	40020058 	.word	0x40020058
 80027ac:	4002006c 	.word	0x4002006c
 80027b0:	40020000 	.word	0x40020000

080027b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2204      	movs	r2, #4
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d04f      	beq.n	800287c <HAL_DMA_IRQHandler+0xc8>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d04a      	beq.n	800287c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0320 	and.w	r3, r3, #32
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d107      	bne.n	8002804 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0204 	bic.w	r2, r2, #4
 8002802:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a66      	ldr	r2, [pc, #408]	; (80029a4 <HAL_DMA_IRQHandler+0x1f0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d029      	beq.n	8002862 <HAL_DMA_IRQHandler+0xae>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a65      	ldr	r2, [pc, #404]	; (80029a8 <HAL_DMA_IRQHandler+0x1f4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d022      	beq.n	800285e <HAL_DMA_IRQHandler+0xaa>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a63      	ldr	r2, [pc, #396]	; (80029ac <HAL_DMA_IRQHandler+0x1f8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d01a      	beq.n	8002858 <HAL_DMA_IRQHandler+0xa4>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a62      	ldr	r2, [pc, #392]	; (80029b0 <HAL_DMA_IRQHandler+0x1fc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d012      	beq.n	8002852 <HAL_DMA_IRQHandler+0x9e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a60      	ldr	r2, [pc, #384]	; (80029b4 <HAL_DMA_IRQHandler+0x200>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00a      	beq.n	800284c <HAL_DMA_IRQHandler+0x98>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a5f      	ldr	r2, [pc, #380]	; (80029b8 <HAL_DMA_IRQHandler+0x204>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d102      	bne.n	8002846 <HAL_DMA_IRQHandler+0x92>
 8002840:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002844:	e00e      	b.n	8002864 <HAL_DMA_IRQHandler+0xb0>
 8002846:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800284a:	e00b      	b.n	8002864 <HAL_DMA_IRQHandler+0xb0>
 800284c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002850:	e008      	b.n	8002864 <HAL_DMA_IRQHandler+0xb0>
 8002852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002856:	e005      	b.n	8002864 <HAL_DMA_IRQHandler+0xb0>
 8002858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285c:	e002      	b.n	8002864 <HAL_DMA_IRQHandler+0xb0>
 800285e:	2340      	movs	r3, #64	; 0x40
 8002860:	e000      	b.n	8002864 <HAL_DMA_IRQHandler+0xb0>
 8002862:	2304      	movs	r3, #4
 8002864:	4a55      	ldr	r2, [pc, #340]	; (80029bc <HAL_DMA_IRQHandler+0x208>)
 8002866:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8094 	beq.w	800299a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800287a:	e08e      	b.n	800299a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2202      	movs	r2, #2
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d056      	beq.n	800293a <HAL_DMA_IRQHandler+0x186>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d051      	beq.n	800293a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10b      	bne.n	80028bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 020a 	bic.w	r2, r2, #10
 80028b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <HAL_DMA_IRQHandler+0x1f0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d029      	beq.n	800291a <HAL_DMA_IRQHandler+0x166>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a37      	ldr	r2, [pc, #220]	; (80029a8 <HAL_DMA_IRQHandler+0x1f4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_IRQHandler+0x162>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a35      	ldr	r2, [pc, #212]	; (80029ac <HAL_DMA_IRQHandler+0x1f8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01a      	beq.n	8002910 <HAL_DMA_IRQHandler+0x15c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a34      	ldr	r2, [pc, #208]	; (80029b0 <HAL_DMA_IRQHandler+0x1fc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d012      	beq.n	800290a <HAL_DMA_IRQHandler+0x156>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a32      	ldr	r2, [pc, #200]	; (80029b4 <HAL_DMA_IRQHandler+0x200>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00a      	beq.n	8002904 <HAL_DMA_IRQHandler+0x150>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <HAL_DMA_IRQHandler+0x204>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d102      	bne.n	80028fe <HAL_DMA_IRQHandler+0x14a>
 80028f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028fc:	e00e      	b.n	800291c <HAL_DMA_IRQHandler+0x168>
 80028fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002902:	e00b      	b.n	800291c <HAL_DMA_IRQHandler+0x168>
 8002904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002908:	e008      	b.n	800291c <HAL_DMA_IRQHandler+0x168>
 800290a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800290e:	e005      	b.n	800291c <HAL_DMA_IRQHandler+0x168>
 8002910:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002914:	e002      	b.n	800291c <HAL_DMA_IRQHandler+0x168>
 8002916:	2320      	movs	r3, #32
 8002918:	e000      	b.n	800291c <HAL_DMA_IRQHandler+0x168>
 800291a:	2302      	movs	r3, #2
 800291c:	4a27      	ldr	r2, [pc, #156]	; (80029bc <HAL_DMA_IRQHandler+0x208>)
 800291e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	d034      	beq.n	800299a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002938:	e02f      	b.n	800299a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2208      	movs	r2, #8
 8002940:	409a      	lsls	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d028      	beq.n	800299c <HAL_DMA_IRQHandler+0x1e8>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d023      	beq.n	800299c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 020e 	bic.w	r2, r2, #14
 8002962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4798      	blx	r3
    }
  }
  return;
 800299a:	bf00      	nop
 800299c:	bf00      	nop
}
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40020008 	.word	0x40020008
 80029a8:	4002001c 	.word	0x4002001c
 80029ac:	40020030 	.word	0x40020030
 80029b0:	40020044 	.word	0x40020044
 80029b4:	40020058 	.word	0x40020058
 80029b8:	4002006c 	.word	0x4002006c
 80029bc:	40020000 	.word	0x40020000

080029c0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f202 	lsl.w	r2, r1, r2
 80029dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b10      	cmp	r3, #16
 80029ec:	d108      	bne.n	8002a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029fe:	e007      	b.n	8002a10 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b08b      	sub	sp, #44	; 0x2c
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	e127      	b.n	8002c80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a30:	2201      	movs	r2, #1
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	f040 8116 	bne.w	8002c7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b12      	cmp	r3, #18
 8002a54:	d034      	beq.n	8002ac0 <HAL_GPIO_Init+0xa4>
 8002a56:	2b12      	cmp	r3, #18
 8002a58:	d80d      	bhi.n	8002a76 <HAL_GPIO_Init+0x5a>
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d02b      	beq.n	8002ab6 <HAL_GPIO_Init+0x9a>
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d804      	bhi.n	8002a6c <HAL_GPIO_Init+0x50>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d031      	beq.n	8002aca <HAL_GPIO_Init+0xae>
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d01c      	beq.n	8002aa4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a6a:	e048      	b.n	8002afe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d043      	beq.n	8002af8 <HAL_GPIO_Init+0xdc>
 8002a70:	2b11      	cmp	r3, #17
 8002a72:	d01b      	beq.n	8002aac <HAL_GPIO_Init+0x90>
          break;
 8002a74:	e043      	b.n	8002afe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a76:	4a89      	ldr	r2, [pc, #548]	; (8002c9c <HAL_GPIO_Init+0x280>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d026      	beq.n	8002aca <HAL_GPIO_Init+0xae>
 8002a7c:	4a87      	ldr	r2, [pc, #540]	; (8002c9c <HAL_GPIO_Init+0x280>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d806      	bhi.n	8002a90 <HAL_GPIO_Init+0x74>
 8002a82:	4a87      	ldr	r2, [pc, #540]	; (8002ca0 <HAL_GPIO_Init+0x284>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d020      	beq.n	8002aca <HAL_GPIO_Init+0xae>
 8002a88:	4a86      	ldr	r2, [pc, #536]	; (8002ca4 <HAL_GPIO_Init+0x288>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <HAL_GPIO_Init+0xae>
          break;
 8002a8e:	e036      	b.n	8002afe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a90:	4a85      	ldr	r2, [pc, #532]	; (8002ca8 <HAL_GPIO_Init+0x28c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d019      	beq.n	8002aca <HAL_GPIO_Init+0xae>
 8002a96:	4a85      	ldr	r2, [pc, #532]	; (8002cac <HAL_GPIO_Init+0x290>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d016      	beq.n	8002aca <HAL_GPIO_Init+0xae>
 8002a9c:	4a84      	ldr	r2, [pc, #528]	; (8002cb0 <HAL_GPIO_Init+0x294>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_GPIO_Init+0xae>
          break;
 8002aa2:	e02c      	b.n	8002afe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	623b      	str	r3, [r7, #32]
          break;
 8002aaa:	e028      	b.n	8002afe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	623b      	str	r3, [r7, #32]
          break;
 8002ab4:	e023      	b.n	8002afe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	3308      	adds	r3, #8
 8002abc:	623b      	str	r3, [r7, #32]
          break;
 8002abe:	e01e      	b.n	8002afe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	330c      	adds	r3, #12
 8002ac6:	623b      	str	r3, [r7, #32]
          break;
 8002ac8:	e019      	b.n	8002afe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d102      	bne.n	8002ad8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	623b      	str	r3, [r7, #32]
          break;
 8002ad6:	e012      	b.n	8002afe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d105      	bne.n	8002aec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	611a      	str	r2, [r3, #16]
          break;
 8002aea:	e008      	b.n	8002afe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aec:	2308      	movs	r3, #8
 8002aee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	615a      	str	r2, [r3, #20]
          break;
 8002af6:	e002      	b.n	8002afe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002af8:	2300      	movs	r3, #0
 8002afa:	623b      	str	r3, [r7, #32]
          break;
 8002afc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	2bff      	cmp	r3, #255	; 0xff
 8002b02:	d801      	bhi.n	8002b08 <HAL_GPIO_Init+0xec>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	e001      	b.n	8002b0c <HAL_GPIO_Init+0xf0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2bff      	cmp	r3, #255	; 0xff
 8002b12:	d802      	bhi.n	8002b1a <HAL_GPIO_Init+0xfe>
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	e002      	b.n	8002b20 <HAL_GPIO_Init+0x104>
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	3b08      	subs	r3, #8
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	210f      	movs	r1, #15
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	401a      	ands	r2, r3
 8002b32:	6a39      	ldr	r1, [r7, #32]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8096 	beq.w	8002c7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b4e:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <HAL_GPIO_Init+0x298>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	4a58      	ldr	r2, [pc, #352]	; (8002cb4 <HAL_GPIO_Init+0x298>)
 8002b54:	f043 0301 	orr.w	r3, r3, #1
 8002b58:	6193      	str	r3, [r2, #24]
 8002b5a:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <HAL_GPIO_Init+0x298>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b66:	4a54      	ldr	r2, [pc, #336]	; (8002cb8 <HAL_GPIO_Init+0x29c>)
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	220f      	movs	r2, #15
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4b      	ldr	r2, [pc, #300]	; (8002cbc <HAL_GPIO_Init+0x2a0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_GPIO_Init+0x19e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4a      	ldr	r2, [pc, #296]	; (8002cc0 <HAL_GPIO_Init+0x2a4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00d      	beq.n	8002bb6 <HAL_GPIO_Init+0x19a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a49      	ldr	r2, [pc, #292]	; (8002cc4 <HAL_GPIO_Init+0x2a8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <HAL_GPIO_Init+0x196>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a48      	ldr	r2, [pc, #288]	; (8002cc8 <HAL_GPIO_Init+0x2ac>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d101      	bne.n	8002bae <HAL_GPIO_Init+0x192>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x1a0>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x1a0>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x1a0>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x1a0>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bcc:	493a      	ldr	r1, [pc, #232]	; (8002cb8 <HAL_GPIO_Init+0x29c>)
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002be6:	4b39      	ldr	r3, [pc, #228]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4938      	ldr	r1, [pc, #224]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
 8002bf2:	e006      	b.n	8002c02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bf4:	4b35      	ldr	r3, [pc, #212]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	4933      	ldr	r1, [pc, #204]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c0e:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	492e      	ldr	r1, [pc, #184]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4929      	ldr	r1, [pc, #164]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c36:	4b25      	ldr	r3, [pc, #148]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	4924      	ldr	r1, [pc, #144]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
 8002c42:	e006      	b.n	8002c52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c44:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	491f      	ldr	r1, [pc, #124]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	491a      	ldr	r1, [pc, #104]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60cb      	str	r3, [r1, #12]
 8002c6a:	e006      	b.n	8002c7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	4915      	ldr	r1, [pc, #84]	; (8002ccc <HAL_GPIO_Init+0x2b0>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f47f aed0 	bne.w	8002a30 <HAL_GPIO_Init+0x14>
  }
}
 8002c90:	bf00      	nop
 8002c92:	372c      	adds	r7, #44	; 0x2c
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	10210000 	.word	0x10210000
 8002ca0:	10110000 	.word	0x10110000
 8002ca4:	10120000 	.word	0x10120000
 8002ca8:	10310000 	.word	0x10310000
 8002cac:	10320000 	.word	0x10320000
 8002cb0:	10220000 	.word	0x10220000
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	40010800 	.word	0x40010800
 8002cc0:	40010c00 	.word	0x40010c00
 8002cc4:	40011000 	.word	0x40011000
 8002cc8:	40011400 	.word	0x40011400
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	e001      	b.n	8002cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	807b      	strh	r3, [r7, #2]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d0e:	787b      	ldrb	r3, [r7, #1]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d14:	887a      	ldrh	r2, [r7, #2]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d1a:	e003      	b.n	8002d24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	041a      	lsls	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	611a      	str	r2, [r3, #16]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d40:	887a      	ldrh	r2, [r7, #2]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4013      	ands	r3, r2
 8002d46:	041a      	lsls	r2, r3, #16
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	43d9      	mvns	r1, r3
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	400b      	ands	r3, r1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	611a      	str	r2, [r3, #16]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e11f      	b.n	8002fb2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe fc60 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f000 ffe0 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4a7b      	ldr	r2, [pc, #492]	; (8002fbc <HAL_I2C_Init+0x25c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d807      	bhi.n	8002de4 <HAL_I2C_Init+0x84>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a7a      	ldr	r2, [pc, #488]	; (8002fc0 <HAL_I2C_Init+0x260>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	bf94      	ite	ls
 8002ddc:	2301      	movls	r3, #1
 8002dde:	2300      	movhi	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e006      	b.n	8002df2 <HAL_I2C_Init+0x92>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a77      	ldr	r2, [pc, #476]	; (8002fc4 <HAL_I2C_Init+0x264>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf94      	ite	ls
 8002dec:	2301      	movls	r3, #1
 8002dee:	2300      	movhi	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0db      	b.n	8002fb2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a72      	ldr	r2, [pc, #456]	; (8002fc8 <HAL_I2C_Init+0x268>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9b      	lsrs	r3, r3, #18
 8002e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a64      	ldr	r2, [pc, #400]	; (8002fbc <HAL_I2C_Init+0x25c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d802      	bhi.n	8002e34 <HAL_I2C_Init+0xd4>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3301      	adds	r3, #1
 8002e32:	e009      	b.n	8002e48 <HAL_I2C_Init+0xe8>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	4a63      	ldr	r2, [pc, #396]	; (8002fcc <HAL_I2C_Init+0x26c>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	3301      	adds	r3, #1
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4956      	ldr	r1, [pc, #344]	; (8002fbc <HAL_I2C_Init+0x25c>)
 8002e64:	428b      	cmp	r3, r1
 8002e66:	d80d      	bhi.n	8002e84 <HAL_I2C_Init+0x124>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e59      	subs	r1, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e76:	3301      	adds	r3, #1
 8002e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	bf38      	it	cc
 8002e80:	2304      	movcc	r3, #4
 8002e82:	e04f      	b.n	8002f24 <HAL_I2C_Init+0x1c4>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d111      	bne.n	8002eb0 <HAL_I2C_Init+0x150>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e58      	subs	r0, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e012      	b.n	8002ed6 <HAL_I2C_Init+0x176>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1e58      	subs	r0, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	0099      	lsls	r1, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Init+0x17e>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e022      	b.n	8002f24 <HAL_I2C_Init+0x1c4>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10e      	bne.n	8002f04 <HAL_I2C_Init+0x1a4>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1e58      	subs	r0, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	440b      	add	r3, r1
 8002ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f02:	e00f      	b.n	8002f24 <HAL_I2C_Init+0x1c4>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e58      	subs	r0, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	0099      	lsls	r1, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	6809      	ldr	r1, [r1, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6911      	ldr	r1, [r2, #16]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68d2      	ldr	r2, [r2, #12]
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	000186a0 	.word	0x000186a0
 8002fc0:	001e847f 	.word	0x001e847f
 8002fc4:	003d08ff 	.word	0x003d08ff
 8002fc8:	431bde83 	.word	0x431bde83
 8002fcc:	10624dd3 	.word	0x10624dd3

08002fd0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	460b      	mov	r3, r1
 8002fde:	817b      	strh	r3, [r7, #10]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7fe fd24 	bl	8001a30 <HAL_GetTick>
 8002fe8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	f040 80e0 	bne.w	80031b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2319      	movs	r3, #25
 8002ffe:	2201      	movs	r2, #1
 8003000:	4970      	ldr	r1, [pc, #448]	; (80031c4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f964 	bl	80032d0 <I2C_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800300e:	2302      	movs	r3, #2
 8003010:	e0d3      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_I2C_Master_Transmit+0x50>
 800301c:	2302      	movs	r3, #2
 800301e:	e0cc      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ea>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b01      	cmp	r3, #1
 8003034:	d007      	beq.n	8003046 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0201 	orr.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003054:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2221      	movs	r2, #33	; 0x21
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2210      	movs	r2, #16
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	893a      	ldrh	r2, [r7, #8]
 8003076:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a50      	ldr	r2, [pc, #320]	; (80031c8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003088:	8979      	ldrh	r1, [r7, #10]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	6a3a      	ldr	r2, [r7, #32]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f89c 	bl	80031cc <I2C_MasterRequestWrite>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e08d      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030b4:	e066      	b.n	8003184 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	6a39      	ldr	r1, [r7, #32]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f9de 	bl	800347c <I2C_WaitOnTXEFlagUntilTimeout>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d107      	bne.n	80030de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e06b      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b04      	cmp	r3, #4
 800311e:	d11b      	bne.n	8003158 <HAL_I2C_Master_Transmit+0x188>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003124:	2b00      	cmp	r3, #0
 8003126:	d017      	beq.n	8003158 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003150:	3b01      	subs	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	6a39      	ldr	r1, [r7, #32]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f9ce 	bl	80034fe <I2C_WaitOnBTFFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00d      	beq.n	8003184 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	2b04      	cmp	r3, #4
 800316e:	d107      	bne.n	8003180 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e01a      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d194      	bne.n	80030b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e000      	b.n	80031ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
  }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	00100002 	.word	0x00100002
 80031c8:	ffff0000 	.word	0xffff0000

080031cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	607a      	str	r2, [r7, #4]
 80031d6:	603b      	str	r3, [r7, #0]
 80031d8:	460b      	mov	r3, r1
 80031da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d006      	beq.n	80031f6 <I2C_MasterRequestWrite+0x2a>
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d003      	beq.n	80031f6 <I2C_MasterRequestWrite+0x2a>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f4:	d108      	bne.n	8003208 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e00b      	b.n	8003220 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	2b12      	cmp	r3, #18
 800320e:	d107      	bne.n	8003220 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800321e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f84f 	bl	80032d0 <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00d      	beq.n	8003254 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003246:	d103      	bne.n	8003250 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e035      	b.n	80032c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325c:	d108      	bne.n	8003270 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800326c:	611a      	str	r2, [r3, #16]
 800326e:	e01b      	b.n	80032a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003270:	897b      	ldrh	r3, [r7, #10]
 8003272:	11db      	asrs	r3, r3, #7
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 0306 	and.w	r3, r3, #6
 800327a:	b2db      	uxtb	r3, r3
 800327c:	f063 030f 	orn	r3, r3, #15
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	490e      	ldr	r1, [pc, #56]	; (80032c8 <I2C_MasterRequestWrite+0xfc>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f875 	bl	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e010      	b.n	80032c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800329e:	897b      	ldrh	r3, [r7, #10]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4907      	ldr	r1, [pc, #28]	; (80032cc <I2C_MasterRequestWrite+0x100>)
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f865 	bl	800337e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	00010008 	.word	0x00010008
 80032cc:	00010002 	.word	0x00010002

080032d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e0:	e025      	b.n	800332e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d021      	beq.n	800332e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe fba1 	bl	8001a30 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d116      	bne.n	800332e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e023      	b.n	8003376 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	0c1b      	lsrs	r3, r3, #16
 8003332:	b2db      	uxtb	r3, r3
 8003334:	2b01      	cmp	r3, #1
 8003336:	d10d      	bne.n	8003354 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	43da      	mvns	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	4013      	ands	r3, r2
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	461a      	mov	r2, r3
 8003352:	e00c      	b.n	800336e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	43da      	mvns	r2, r3
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d0b6      	beq.n	80032e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800338c:	e051      	b.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d123      	bne.n	80033e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e046      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d021      	beq.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7fe fb1f 	bl	8001a30 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d116      	bne.n	8003432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0220 	orr.w	r2, r3, #32
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e020      	b.n	8003474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10c      	bne.n	8003456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	e00b      	b.n	800346e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	43da      	mvns	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d18d      	bne.n	800338e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003488:	e02d      	b.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f878 	bl	8003580 <I2C_IsAcknowledgeFailed>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e02d      	b.n	80034f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d021      	beq.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a2:	f7fe fac5 	bl	8001a30 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d302      	bcc.n	80034b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d116      	bne.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e007      	b.n	80034f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b80      	cmp	r3, #128	; 0x80
 80034f2:	d1ca      	bne.n	800348a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800350a:	e02d      	b.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f837 	bl	8003580 <I2C_IsAcknowledgeFailed>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e02d      	b.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d021      	beq.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7fe fa84 	bl	8001a30 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f043 0220 	orr.w	r2, r3, #32
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e007      	b.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b04      	cmp	r3, #4
 8003574:	d1ca      	bne.n	800350c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003596:	d11b      	bne.n	80035d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e26c      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 8087 	beq.w	800370a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035fc:	4b92      	ldr	r3, [pc, #584]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b04      	cmp	r3, #4
 8003606:	d00c      	beq.n	8003622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003608:	4b8f      	ldr	r3, [pc, #572]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d112      	bne.n	800363a <HAL_RCC_OscConfig+0x5e>
 8003614:	4b8c      	ldr	r3, [pc, #560]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d10b      	bne.n	800363a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003622:	4b89      	ldr	r3, [pc, #548]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d06c      	beq.n	8003708 <HAL_RCC_OscConfig+0x12c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d168      	bne.n	8003708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e246      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x76>
 8003644:	4b80      	ldr	r3, [pc, #512]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a7f      	ldr	r2, [pc, #508]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800364a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	e02e      	b.n	80036b0 <HAL_RCC_OscConfig+0xd4>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x98>
 800365a:	4b7b      	ldr	r3, [pc, #492]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7a      	ldr	r2, [pc, #488]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	4b78      	ldr	r3, [pc, #480]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a77      	ldr	r2, [pc, #476]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800366c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e01d      	b.n	80036b0 <HAL_RCC_OscConfig+0xd4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0xbc>
 800367e:	4b72      	ldr	r3, [pc, #456]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a71      	ldr	r2, [pc, #452]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b6f      	ldr	r3, [pc, #444]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a6e      	ldr	r2, [pc, #440]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0xd4>
 8003698:	4b6b      	ldr	r3, [pc, #428]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6a      	ldr	r2, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800369e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b68      	ldr	r3, [pc, #416]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a67      	ldr	r2, [pc, #412]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 80036aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d013      	beq.n	80036e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fe f9ba 	bl	8001a30 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fe f9b6 	bl	8001a30 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1fa      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	4b5d      	ldr	r3, [pc, #372]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0xe4>
 80036de:	e014      	b.n	800370a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e0:	f7fe f9a6 	bl	8001a30 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e8:	f7fe f9a2 	bl	8001a30 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b64      	cmp	r3, #100	; 0x64
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1e6      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x10c>
 8003706:	e000      	b.n	800370a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d063      	beq.n	80037de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003716:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003722:	4b49      	ldr	r3, [pc, #292]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b08      	cmp	r3, #8
 800372c:	d11c      	bne.n	8003768 <HAL_RCC_OscConfig+0x18c>
 800372e:	4b46      	ldr	r3, [pc, #280]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d116      	bne.n	8003768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	4b43      	ldr	r3, [pc, #268]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_RCC_OscConfig+0x176>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d001      	beq.n	8003752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e1ba      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4939      	ldr	r1, [pc, #228]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003766:	e03a      	b.n	80037de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d020      	beq.n	80037b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003770:	4b36      	ldr	r3, [pc, #216]	; (800384c <HAL_RCC_OscConfig+0x270>)
 8003772:	2201      	movs	r2, #1
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe f95b 	bl	8001a30 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377e:	f7fe f957 	bl	8001a30 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e19b      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003790:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4927      	ldr	r1, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]
 80037b0:	e015      	b.n	80037de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <HAL_RCC_OscConfig+0x270>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe f93a 	bl	8001a30 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037c0:	f7fe f936 	bl	8001a30 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e17a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d03a      	beq.n	8003860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d019      	beq.n	8003826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f2:	4b17      	ldr	r3, [pc, #92]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f8:	f7fe f91a 	bl	8001a30 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003800:	f7fe f916 	bl	8001a30 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e15a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <HAL_RCC_OscConfig+0x26c>)
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800381e:	2001      	movs	r0, #1
 8003820:	f000 fada 	bl	8003dd8 <RCC_Delay>
 8003824:	e01c      	b.n	8003860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003826:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_RCC_OscConfig+0x274>)
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382c:	f7fe f900 	bl	8001a30 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003832:	e00f      	b.n	8003854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003834:	f7fe f8fc 	bl	8001a30 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d908      	bls.n	8003854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e140      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000
 800384c:	42420000 	.word	0x42420000
 8003850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	4b9e      	ldr	r3, [pc, #632]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e9      	bne.n	8003834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80a6 	beq.w	80039ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003872:	4b97      	ldr	r3, [pc, #604]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	4b94      	ldr	r3, [pc, #592]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	4a93      	ldr	r2, [pc, #588]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003888:	61d3      	str	r3, [r2, #28]
 800388a:	4b91      	ldr	r3, [pc, #580]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	4b8e      	ldr	r3, [pc, #568]	; (8003ad4 <HAL_RCC_OscConfig+0x4f8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d118      	bne.n	80038d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a6:	4b8b      	ldr	r3, [pc, #556]	; (8003ad4 <HAL_RCC_OscConfig+0x4f8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a8a      	ldr	r2, [pc, #552]	; (8003ad4 <HAL_RCC_OscConfig+0x4f8>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b2:	f7fe f8bd 	bl	8001a30 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ba:	f7fe f8b9 	bl	8001a30 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b64      	cmp	r3, #100	; 0x64
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e0fd      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038cc:	4b81      	ldr	r3, [pc, #516]	; (8003ad4 <HAL_RCC_OscConfig+0x4f8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d106      	bne.n	80038ee <HAL_RCC_OscConfig+0x312>
 80038e0:	4b7b      	ldr	r3, [pc, #492]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	4a7a      	ldr	r2, [pc, #488]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	6213      	str	r3, [r2, #32]
 80038ec:	e02d      	b.n	800394a <HAL_RCC_OscConfig+0x36e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_RCC_OscConfig+0x334>
 80038f6:	4b76      	ldr	r3, [pc, #472]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4a75      	ldr	r2, [pc, #468]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	6213      	str	r3, [r2, #32]
 8003902:	4b73      	ldr	r3, [pc, #460]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	4a72      	ldr	r2, [pc, #456]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	6213      	str	r3, [r2, #32]
 800390e:	e01c      	b.n	800394a <HAL_RCC_OscConfig+0x36e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b05      	cmp	r3, #5
 8003916:	d10c      	bne.n	8003932 <HAL_RCC_OscConfig+0x356>
 8003918:	4b6d      	ldr	r3, [pc, #436]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	4a6c      	ldr	r2, [pc, #432]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	6213      	str	r3, [r2, #32]
 8003924:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a69      	ldr	r2, [pc, #420]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	e00b      	b.n	800394a <HAL_RCC_OscConfig+0x36e>
 8003932:	4b67      	ldr	r3, [pc, #412]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4a66      	ldr	r2, [pc, #408]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6213      	str	r3, [r2, #32]
 800393e:	4b64      	ldr	r3, [pc, #400]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a63      	ldr	r2, [pc, #396]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d015      	beq.n	800397e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003952:	f7fe f86d 	bl	8001a30 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fe f869 	bl	8001a30 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e0ab      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003970:	4b57      	ldr	r3, [pc, #348]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ee      	beq.n	800395a <HAL_RCC_OscConfig+0x37e>
 800397c:	e014      	b.n	80039a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800397e:	f7fe f857 	bl	8001a30 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fe f853 	bl	8001a30 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e095      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399c:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1ee      	bne.n	8003986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d105      	bne.n	80039ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ae:	4b48      	ldr	r3, [pc, #288]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4a47      	ldr	r2, [pc, #284]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8081 	beq.w	8003ac6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c4:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d061      	beq.n	8003a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d146      	bne.n	8003a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b3f      	ldr	r3, [pc, #252]	; (8003ad8 <HAL_RCC_OscConfig+0x4fc>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe f827 	bl	8001a30 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fe f823 	bl	8001a30 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e067      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039f8:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f0      	bne.n	80039e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a0c:	d108      	bne.n	8003a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a0e:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	492d      	ldr	r1, [pc, #180]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a19      	ldr	r1, [r3, #32]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	430b      	orrs	r3, r1
 8003a32:	4927      	ldr	r1, [pc, #156]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a38:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <HAL_RCC_OscConfig+0x4fc>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fff7 	bl	8001a30 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a46:	f7fd fff3 	bl	8001a30 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e037      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a58:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x46a>
 8003a64:	e02f      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a66:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <HAL_RCC_OscConfig+0x4fc>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fd ffe0 	bl	8001a30 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd ffdc 	bl	8001a30 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e020      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x498>
 8003a92:	e018      	b.n	8003ac6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e013      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	42420060 	.word	0x42420060

08003adc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0d0      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003af0:	4b6a      	ldr	r3, [pc, #424]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d910      	bls.n	8003b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 0207 	bic.w	r2, r3, #7
 8003b06:	4965      	ldr	r1, [pc, #404]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b63      	ldr	r3, [pc, #396]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0b8      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d020      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b38:	4b59      	ldr	r3, [pc, #356]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b50:	4b53      	ldr	r3, [pc, #332]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a52      	ldr	r2, [pc, #328]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b5c:	4b50      	ldr	r3, [pc, #320]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	494d      	ldr	r1, [pc, #308]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d040      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d115      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e07f      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d107      	bne.n	8003baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9a:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d109      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e073      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003baa:	4b3d      	ldr	r3, [pc, #244]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e06b      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f023 0203 	bic.w	r2, r3, #3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	4936      	ldr	r1, [pc, #216]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bcc:	f7fd ff30 	bl	8001a30 <HAL_GetTick>
 8003bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	e00a      	b.n	8003bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd4:	f7fd ff2c 	bl	8001a30 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e053      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 020c 	and.w	r2, r3, #12
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d1eb      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d210      	bcs.n	8003c2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 0207 	bic.w	r2, r3, #7
 8003c12:	4922      	ldr	r1, [pc, #136]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <HAL_RCC_ClockConfig+0x1c0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e032      	b.n	8003c92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4916      	ldr	r1, [pc, #88]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c56:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	490e      	ldr	r1, [pc, #56]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c6a:	f000 f821 	bl	8003cb0 <HAL_RCC_GetSysClockFreq>
 8003c6e:	4601      	mov	r1, r0
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7c:	5cd3      	ldrb	r3, [r2, r3]
 8003c7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <HAL_RCC_ClockConfig+0x1cc>)
 8003c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x1d0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fd fe8e 	bl	80019ac <HAL_InitTick>

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	0800a1a8 	.word	0x0800a1a8
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	20000004 	.word	0x20000004

08003cb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb0:	b490      	push	{r4, r7}
 8003cb2:	b08a      	sub	sp, #40	; 0x28
 8003cb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003cb8:	1d3c      	adds	r4, r7, #4
 8003cba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003cc0:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cda:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d003      	beq.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x46>
 8003cee:	e02d      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cf0:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cf2:	623b      	str	r3, [r7, #32]
      break;
 8003cf4:	e02d      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	0c9b      	lsrs	r3, r3, #18
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d02:	4413      	add	r3, r2
 8003d04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d14:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0c5b      	lsrs	r3, r3, #17
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d22:	4413      	add	r3, r2
 8003d24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4a0f      	ldr	r2, [pc, #60]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d2e:	fb02 f203 	mul.w	r2, r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	e004      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d40:	fb02 f303 	mul.w	r3, r2, r3
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	623b      	str	r3, [r7, #32]
      break;
 8003d4a:	e002      	b.n	8003d52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d4c:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d4e:	623b      	str	r3, [r7, #32]
      break;
 8003d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d52:	6a3b      	ldr	r3, [r7, #32]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3728      	adds	r7, #40	; 0x28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc90      	pop	{r4, r7}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	0800a140 	.word	0x0800a140
 8003d64:	0800a150 	.word	0x0800a150
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	007a1200 	.word	0x007a1200
 8003d70:	003d0900 	.word	0x003d0900

08003d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b02      	ldr	r3, [pc, #8]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bc80      	pop	{r7}
 8003d82:	4770      	bx	lr
 8003d84:	20000000 	.word	0x20000000

08003d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d8c:	f7ff fff2 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d90:	4601      	mov	r1, r0
 8003d92:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4a03      	ldr	r2, [pc, #12]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d9e:	5cd3      	ldrb	r3, [r2, r3]
 8003da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40021000 	.word	0x40021000
 8003dac:	0800a1b8 	.word	0x0800a1b8

08003db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db4:	f7ff ffde 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003db8:	4601      	mov	r1, r0
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	0adb      	lsrs	r3, r3, #11
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4a03      	ldr	r2, [pc, #12]	; (8003dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc6:	5cd3      	ldrb	r3, [r2, r3]
 8003dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	0800a1b8 	.word	0x0800a1b8

08003dd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003de0:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <RCC_Delay+0x34>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <RCC_Delay+0x38>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	0a5b      	lsrs	r3, r3, #9
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	fb02 f303 	mul.w	r3, r2, r3
 8003df2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003df4:	bf00      	nop
  }
  while (Delay --);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1e5a      	subs	r2, r3, #1
 8003dfa:	60fa      	str	r2, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f9      	bne.n	8003df4 <RCC_Delay+0x1c>
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	10624dd3 	.word	0x10624dd3

08003e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0301 	and.w	r3, r3, #1
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d07d      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003e30:	2300      	movs	r3, #0
 8003e32:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e34:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10d      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e40:	4b4c      	ldr	r3, [pc, #304]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	4a4b      	ldr	r2, [pc, #300]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	61d3      	str	r3, [r2, #28]
 8003e4c:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d118      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e68:	4b43      	ldr	r3, [pc, #268]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a42      	ldr	r2, [pc, #264]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e74:	f7fd fddc 	bl	8001a30 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fd fdd8 	bl	8001a30 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b64      	cmp	r3, #100	; 0x64
 8003e88:	d901      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e06d      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b3a      	ldr	r3, [pc, #232]	; (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e9a:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ea2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02e      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d027      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb8:	4b2e      	ldr	r3, [pc, #184]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec8:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ece:	4a29      	ldr	r2, [pc, #164]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d014      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fd fda7 	bl	8001a30 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee4:	e00a      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee6:	f7fd fda3 	bl	8001a30 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e036      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0ee      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4917      	ldr	r1, [pc, #92]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f38:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	490b      	ldr	r1, [pc, #44]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4904      	ldr	r1, [pc, #16]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40021000 	.word	0x40021000
 8003f78:	40007000 	.word	0x40007000
 8003f7c:	42420440 	.word	0x42420440

08003f80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b08d      	sub	sp, #52	; 0x34
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f88:	4b55      	ldr	r3, [pc, #340]	; (80040e0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003f8a:	f107 040c 	add.w	r4, r7, #12
 8003f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f94:	4b53      	ldr	r3, [pc, #332]	; (80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d07f      	beq.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d002      	beq.n	8003fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d048      	beq.n	800404e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003fbc:	e08b      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003fc4:	4b48      	ldr	r3, [pc, #288]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d07f      	beq.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	0c9b      	lsrs	r3, r3, #18
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003fdc:	4413      	add	r3, r2
 8003fde:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fe2:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d018      	beq.n	8004020 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fee:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	0c5b      	lsrs	r3, r3, #17
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800400e:	4a37      	ldr	r2, [pc, #220]	; (80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	fbb2 f2f3 	udiv	r2, r2, r3
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	fb02 f303 	mul.w	r3, r2, r3
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401e:	e004      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	4a33      	ldr	r2, [pc, #204]	; (80040f0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800402a:	4b2f      	ldr	r3, [pc, #188]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004036:	d102      	bne.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8004038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800403c:	e048      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800404c:	e040      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800404e:	4b26      	ldr	r3, [pc, #152]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405e:	d108      	bne.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800406a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004070:	e01f      	b.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407c:	d109      	bne.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800407e:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800408a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004090:	e00f      	b.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800409c:	d11a      	bne.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800409e:	4b12      	ldr	r3, [pc, #72]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d014      	beq.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80040aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040b0:	e010      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80040b2:	e00f      	b.n	80040d4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80040b4:	f7ff fe7c 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	0b9b      	lsrs	r3, r3, #14
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	3301      	adds	r3, #1
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80040ce:	e002      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80040d0:	bf00      	nop
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80040d4:	bf00      	nop
    }
  }
  return (frequency);
 80040d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3734      	adds	r7, #52	; 0x34
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd90      	pop	{r4, r7, pc}
 80040e0:	0800a154 	.word	0x0800a154
 80040e4:	0800a164 	.word	0x0800a164
 80040e8:	40021000 	.word	0x40021000
 80040ec:	007a1200 	.word	0x007a1200
 80040f0:	003d0900 	.word	0x003d0900
 80040f4:	aaaaaaab 	.word	0xaaaaaaab

080040f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e041      	b.n	800418e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd fad2 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 fa64 	bl	8004604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d001      	beq.n	80041b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e03a      	b.n	8004226 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_TIM_Base_Start_IT+0x98>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x58>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d009      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x58>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a14      	ldr	r2, [pc, #80]	; (8004234 <HAL_TIM_Base_Start_IT+0x9c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d004      	beq.n	80041f0 <HAL_TIM_Base_Start_IT+0x58>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a13      	ldr	r2, [pc, #76]	; (8004238 <HAL_TIM_Base_Start_IT+0xa0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d111      	bne.n	8004214 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2b06      	cmp	r3, #6
 8004200:	d010      	beq.n	8004224 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f042 0201 	orr.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004212:	e007      	b.n	8004224 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800

0800423c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b02      	cmp	r3, #2
 8004250:	d122      	bne.n	8004298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b02      	cmp	r3, #2
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0202 	mvn.w	r2, #2
 8004268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9a4 	bl	80045cc <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f997 	bl	80045ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f9a6 	bl	80045de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0204 	mvn.w	r2, #4
 80042bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f97a 	bl	80045cc <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f96d 	bl	80045ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f97c 	bl	80045de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b08      	cmp	r3, #8
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0208 	mvn.w	r2, #8
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2204      	movs	r2, #4
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f950 	bl	80045cc <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f943 	bl	80045ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f952 	bl	80045de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	2b10      	cmp	r3, #16
 800434c:	d122      	bne.n	8004394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b10      	cmp	r3, #16
 800435a:	d11b      	bne.n	8004394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0210 	mvn.w	r2, #16
 8004364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2208      	movs	r2, #8
 800436a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f926 	bl	80045cc <HAL_TIM_IC_CaptureCallback>
 8004380:	e005      	b.n	800438e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f919 	bl	80045ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f928 	bl	80045de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10e      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d107      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f06f 0201 	mvn.w	r2, #1
 80043b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f001 ff0e 	bl	80061dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ca:	2b80      	cmp	r3, #128	; 0x80
 80043cc:	d10e      	bne.n	80043ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d107      	bne.n	80043ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fa6b 	bl	80048c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f8ec 	bl	80045f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b20      	cmp	r3, #32
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b20      	cmp	r3, #32
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0220 	mvn.w	r2, #32
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa36 	bl	80048b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_TIM_ConfigClockSource+0x18>
 8004460:	2302      	movs	r3, #2
 8004462:	e0a6      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x166>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004482:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800448a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d067      	beq.n	800456c <HAL_TIM_ConfigClockSource+0x120>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d80b      	bhi.n	80044b8 <HAL_TIM_ConfigClockSource+0x6c>
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d073      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x140>
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d802      	bhi.n	80044ae <HAL_TIM_ConfigClockSource+0x62>
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d06f      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044ac:	e078      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d06c      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x140>
 80044b2:	2b30      	cmp	r3, #48	; 0x30
 80044b4:	d06a      	beq.n	800458c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044b6:	e073      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044b8:	2b70      	cmp	r3, #112	; 0x70
 80044ba:	d00d      	beq.n	80044d8 <HAL_TIM_ConfigClockSource+0x8c>
 80044bc:	2b70      	cmp	r3, #112	; 0x70
 80044be:	d804      	bhi.n	80044ca <HAL_TIM_ConfigClockSource+0x7e>
 80044c0:	2b50      	cmp	r3, #80	; 0x50
 80044c2:	d033      	beq.n	800452c <HAL_TIM_ConfigClockSource+0xe0>
 80044c4:	2b60      	cmp	r3, #96	; 0x60
 80044c6:	d041      	beq.n	800454c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044c8:	e06a      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ce:	d066      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x152>
 80044d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d4:	d017      	beq.n	8004506 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044d6:	e063      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f000 f965 	bl	80047b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044fa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	609a      	str	r2, [r3, #8]
      break;
 8004504:	e04c      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	6899      	ldr	r1, [r3, #8]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f000 f94e 	bl	80047b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004528:	609a      	str	r2, [r3, #8]
      break;
 800452a:	e039      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	461a      	mov	r2, r3
 800453a:	f000 f8c5 	bl	80046c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2150      	movs	r1, #80	; 0x50
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f91c 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 800454a:	e029      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	6859      	ldr	r1, [r3, #4]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	461a      	mov	r2, r3
 800455a:	f000 f8e3 	bl	8004724 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2160      	movs	r1, #96	; 0x60
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f90c 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 800456a:	e019      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	461a      	mov	r2, r3
 800457a:	f000 f8a5 	bl	80046c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2140      	movs	r1, #64	; 0x40
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f8fc 	bl	8004782 <TIM_ITRx_SetConfig>
      break;
 800458a:	e009      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4619      	mov	r1, r3
 8004596:	4610      	mov	r0, r2
 8004598:	f000 f8f3 	bl	8004782 <TIM_ITRx_SetConfig>
        break;
 800459c:	e000      	b.n	80045a0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800459e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bc80      	pop	{r7}
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr
	...

08004604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a29      	ldr	r2, [pc, #164]	; (80046bc <TIM_Base_SetConfig+0xb8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0x30>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0x30>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <TIM_Base_SetConfig+0xbc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x30>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <TIM_Base_SetConfig+0xc0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <TIM_Base_SetConfig+0xb8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00b      	beq.n	8004666 <TIM_Base_SetConfig+0x62>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d007      	beq.n	8004666 <TIM_Base_SetConfig+0x62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <TIM_Base_SetConfig+0xbc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d003      	beq.n	8004666 <TIM_Base_SetConfig+0x62>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <TIM_Base_SetConfig+0xc0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d108      	bne.n	8004678 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a07      	ldr	r2, [pc, #28]	; (80046bc <TIM_Base_SetConfig+0xb8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d103      	bne.n	80046ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	615a      	str	r2, [r3, #20]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800

080046c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0201 	bic.w	r2, r3, #1
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f023 030a 	bic.w	r3, r3, #10
 8004704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
 800470c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr

08004724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	f023 0210 	bic.w	r2, r3, #16
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800474e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	031b      	lsls	r3, r3, #12
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004760:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	621a      	str	r2, [r3, #32]
}
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	bc80      	pop	{r7}
 8004780:	4770      	bx	lr

08004782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004782:	b480      	push	{r7}
 8004784:	b085      	sub	sp, #20
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4313      	orrs	r3, r2
 80047a0:	f043 0307 	orr.w	r3, r3, #7
 80047a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	609a      	str	r2, [r3, #8]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b087      	sub	sp, #28
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	431a      	orrs	r2, r3
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4313      	orrs	r3, r2
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	609a      	str	r2, [r3, #8]
}
 80047ea:	bf00      	nop
 80047ec:	371c      	adds	r7, #28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004804:	2b01      	cmp	r3, #1
 8004806:	d101      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004808:	2302      	movs	r3, #2
 800480a:	e046      	b.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00e      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004858:	d009      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a12      	ldr	r2, [pc, #72]	; (80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d004      	beq.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a10      	ldr	r2, [pc, #64]	; (80048ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d10c      	bne.n	8004888 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4313      	orrs	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40000400 	.word	0x40000400
 80048ac:	40000800 	.word	0x40000800

080048b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bc80      	pop	{r7}
 80048d2:	4770      	bx	lr

080048d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e03f      	b.n	8004966 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fc ff08 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	; 0x24
 8004904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004916:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fb83 	bl	8005024 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800492c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695a      	ldr	r2, [r3, #20]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800493c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800494c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b08a      	sub	sp, #40	; 0x28
 8004972:	af02      	add	r7, sp, #8
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b20      	cmp	r3, #32
 800498c:	d17c      	bne.n	8004a88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_UART_Transmit+0x2c>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e075      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Transmit+0x3e>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e06e      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2221      	movs	r2, #33	; 0x21
 80049be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80049c2:	f7fd f835 	bl	8001a30 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	88fa      	ldrh	r2, [r7, #6]
 80049cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	88fa      	ldrh	r2, [r7, #6]
 80049d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049dc:	d108      	bne.n	80049f0 <HAL_UART_Transmit+0x82>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d104      	bne.n	80049f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	e003      	b.n	80049f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004a00:	e02a      	b.n	8004a58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2180      	movs	r1, #128	; 0x80
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f9a7 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e036      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	3302      	adds	r3, #2
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	e007      	b.n	8004a4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	781a      	ldrb	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1cf      	bne.n	8004a02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f977 	bl	8004d60 <UART_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e006      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	e000      	b.n	8004a8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a88:	2302      	movs	r3, #2
  }
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b085      	sub	sp, #20
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d140      	bne.n	8004b2e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_UART_Receive_IT+0x26>
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e039      	b.n	8004b30 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_UART_Receive_IT+0x38>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e032      	b.n	8004b30 <HAL_UART_Receive_IT+0x9e>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	88fa      	ldrh	r2, [r7, #6]
 8004adc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	88fa      	ldrh	r2, [r7, #6]
 8004ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2222      	movs	r2, #34	; 0x22
 8004aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b08:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0220 	orr.w	r2, r2, #32
 8004b28:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10d      	bne.n	8004b8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_UART_IRQHandler+0x52>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f003 0320 	and.w	r3, r3, #32
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f9cc 	bl	8004f24 <UART_Receive_IT>
      return;
 8004b8c:	e0d1      	b.n	8004d32 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80b0 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x1ba>
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <HAL_UART_IRQHandler+0x70>
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80a5 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_UART_IRQHandler+0x90>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_UART_IRQHandler+0xb0>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	f043 0202 	orr.w	r2, r3, #2
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_UART_IRQHandler+0xd0>
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	f043 0204 	orr.w	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00f      	beq.n	8004c36 <HAL_UART_IRQHandler+0xfa>
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <HAL_UART_IRQHandler+0xee>
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d005      	beq.n	8004c36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	f043 0208 	orr.w	r2, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d078      	beq.n	8004d30 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <HAL_UART_IRQHandler+0x11c>
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f966 	bl	8004f24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bf14      	ite	ne
 8004c66:	2301      	movne	r3, #1
 8004c68:	2300      	moveq	r3, #0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <HAL_UART_IRQHandler+0x144>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d031      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f8b7 	bl	8004df4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d023      	beq.n	8004cdc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d013      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <HAL_UART_IRQHandler+0x1fc>)
 8004cb2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fd fd05 	bl	80026c8 <HAL_DMA_Abort_IT>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d016      	beq.n	8004cf2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cce:	4610      	mov	r0, r2
 8004cd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd2:	e00e      	b.n	8004cf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f83a 	bl	8004d4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cda:	e00a      	b.n	8004cf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f836 	bl	8004d4e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ce2:	e006      	b.n	8004cf2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f832 	bl	8004d4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004cf0:	e01e      	b.n	8004d30 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf2:	bf00      	nop
    return;
 8004cf4:	e01c      	b.n	8004d30 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_UART_IRQHandler+0x1d6>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8a3 	bl	8004e56 <UART_Transmit_IT>
    return;
 8004d10:	e00f      	b.n	8004d32 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_UART_IRQHandler+0x1f6>
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8e4 	bl	8004ef4 <UART_EndTransmit_IT>
    return;
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004d30:	bf00      	nop
  }
}
 8004d32:	3720      	adds	r7, #32
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	08004e2f 	.word	0x08004e2f

08004d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b083      	sub	sp, #12
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr

08004d60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	e02c      	b.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d028      	beq.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d80:	f7fc fe56 	bl	8001a30 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d21d      	bcs.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004d9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695a      	ldr	r2, [r3, #20]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0201 	bic.w	r2, r2, #1
 8004dae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e00f      	b.n	8004dec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d0c3      	beq.n	8004d72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695a      	ldr	r2, [r3, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr

08004e2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff ff80 	bl	8004d4e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b21      	cmp	r3, #33	; 0x21
 8004e68:	d13e      	bne.n	8004ee8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e72:	d114      	bne.n	8004e9e <UART_Transmit_IT+0x48>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d110      	bne.n	8004e9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	1c9a      	adds	r2, r3, #2
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	621a      	str	r2, [r3, #32]
 8004e9c:	e008      	b.n	8004eb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	1c59      	adds	r1, r3, #1
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6211      	str	r1, [r2, #32]
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10f      	bne.n	8004ee4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ed2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ee2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e000      	b.n	8004eea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ee8:	2302      	movs	r3, #2
  }
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff ff11 	bl	8004d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b22      	cmp	r3, #34	; 0x22
 8004f36:	d170      	bne.n	800501a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f40:	d117      	bne.n	8004f72 <UART_Receive_IT+0x4e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d113      	bne.n	8004f72 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	1c9a      	adds	r2, r3, #2
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f70:	e026      	b.n	8004fc0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f84:	d007      	beq.n	8004f96 <UART_Receive_IT+0x72>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <UART_Receive_IT+0x80>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d106      	bne.n	8004fa4 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e008      	b.n	8004fb6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d120      	bne.n	8005016 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0220 	bic.w	r2, r2, #32
 8004fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ff2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0201 	bic.w	r2, r2, #1
 8005002:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fcd7 	bl	80059c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	e002      	b.n	800501c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800501a:	2302      	movs	r3, #2
  }
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800505e:	f023 030c 	bic.w	r3, r3, #12
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	430b      	orrs	r3, r1
 800506a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a2c      	ldr	r2, [pc, #176]	; (8005138 <UART_SetConfig+0x114>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d103      	bne.n	8005094 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800508c:	f7fe fe90 	bl	8003db0 <HAL_RCC_GetPCLK2Freq>
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	e002      	b.n	800509a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005094:	f7fe fe78 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8005098:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009a      	lsls	r2, r3, #2
 80050a4:	441a      	add	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	4a22      	ldr	r2, [pc, #136]	; (800513c <UART_SetConfig+0x118>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	0119      	lsls	r1, r3, #4
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	009a      	lsls	r2, r3, #2
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d0:	4b1a      	ldr	r3, [pc, #104]	; (800513c <UART_SetConfig+0x118>)
 80050d2:	fba3 0302 	umull	r0, r3, r3, r2
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	2064      	movs	r0, #100	; 0x64
 80050da:	fb00 f303 	mul.w	r3, r0, r3
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	3332      	adds	r3, #50	; 0x32
 80050e4:	4a15      	ldr	r2, [pc, #84]	; (800513c <UART_SetConfig+0x118>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	095b      	lsrs	r3, r3, #5
 80050ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f0:	4419      	add	r1, r3
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009a      	lsls	r2, r3, #2
 80050fc:	441a      	add	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	fbb2 f2f3 	udiv	r2, r2, r3
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <UART_SetConfig+0x118>)
 800510a:	fba3 0302 	umull	r0, r3, r3, r2
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2064      	movs	r0, #100	; 0x64
 8005112:	fb00 f303 	mul.w	r3, r0, r3
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	011b      	lsls	r3, r3, #4
 800511a:	3332      	adds	r3, #50	; 0x32
 800511c:	4a07      	ldr	r2, [pc, #28]	; (800513c <UART_SetConfig+0x118>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	095b      	lsrs	r3, r3, #5
 8005124:	f003 020f 	and.w	r2, r3, #15
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	440a      	add	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40013800 	.word	0x40013800
 800513c:	51eb851f 	.word	0x51eb851f

08005140 <Get_Key_Value>:
/********************
 **功能获取按键状态
 **输入按键的编号
 **返回值:1/0
 ********************/
static uint8_t Get_Key_Value(unsigned char temp) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
	switch (temp) {
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <Get_Key_Value+0x16>
 8005150:	2b01      	cmp	r3, #1
 8005152:	d007      	beq.n	8005164 <Get_Key_Value+0x24>
 8005154:	e00d      	b.n	8005172 <Get_Key_Value+0x32>
	case 0:
		return KEY0_READ;
 8005156:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800515a:	4808      	ldr	r0, [pc, #32]	; (800517c <Get_Key_Value+0x3c>)
 800515c:	f7fd fdb8 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8005160:	4603      	mov	r3, r0
 8005162:	e007      	b.n	8005174 <Get_Key_Value+0x34>
		break;

	case 1:
		return KEY1_READ;
 8005164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005168:	4804      	ldr	r0, [pc, #16]	; (800517c <Get_Key_Value+0x3c>)
 800516a:	f7fd fdb1 	bl	8002cd0 <HAL_GPIO_ReadPin>
 800516e:	4603      	mov	r3, r0
 8005170:	e000      	b.n	8005174 <Get_Key_Value+0x34>
//	case 3:
//		return KEY3_READ;
//		break;

	default:
		return 0;
 8005172:	2300      	movs	r3, #0
		break;
	}
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	40011000 	.word	0x40011000

08005180 <Get_Key_Time_Value>:

/********************************
 函数功能：获取键按下 和抬起时间的值
 *******************************/
static void Get_Key_Time_Value() {
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
	static uint8_t i;						//加了static进入函数不会给清零，要么整个全局边量
	for (i = 0; i < KEY_NUMBER; i++) {
 8005184:	4b3a      	ldr	r3, [pc, #232]	; (8005270 <Get_Key_Time_Value+0xf0>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e068      	b.n	800525e <Get_Key_Time_Value+0xde>
		if (key[i].edge_flag == KEY_PRESS) //如果按键按下（下降沿）开始计时到松开结束
 800518c:	4b38      	ldr	r3, [pc, #224]	; (8005270 <Get_Key_Time_Value+0xf0>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	4619      	mov	r1, r3
 8005192:	4a38      	ldr	r2, [pc, #224]	; (8005274 <Get_Key_Time_Value+0xf4>)
 8005194:	460b      	mov	r3, r1
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	1a5b      	subs	r3, r3, r1
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	4413      	add	r3, r2
 800519e:	3301      	adds	r3, #1
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d116      	bne.n	80051d4 <Get_Key_Time_Value+0x54>
			key[i].time_down++;
 80051a6:	4b32      	ldr	r3, [pc, #200]	; (8005270 <Get_Key_Time_Value+0xf0>)
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	4931      	ldr	r1, [pc, #196]	; (8005274 <Get_Key_Time_Value+0xf4>)
 80051ae:	4613      	mov	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	440b      	add	r3, r1
 80051b8:	330a      	adds	r3, #10
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	b298      	uxth	r0, r3
 80051c0:	492c      	ldr	r1, [pc, #176]	; (8005274 <Get_Key_Time_Value+0xf4>)
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	1a9b      	subs	r3, r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	440b      	add	r3, r1
 80051cc:	330a      	adds	r3, #10
 80051ce:	4602      	mov	r2, r0
 80051d0:	801a      	strh	r2, [r3, #0]
 80051d2:	e03e      	b.n	8005252 <Get_Key_Time_Value+0xd2>
		else if (key[i].edge_flag == KEY_FREE) {
 80051d4:	4b26      	ldr	r3, [pc, #152]	; (8005270 <Get_Key_Time_Value+0xf0>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	4619      	mov	r1, r3
 80051da:	4a26      	ldr	r2, [pc, #152]	; (8005274 <Get_Key_Time_Value+0xf4>)
 80051dc:	460b      	mov	r3, r1
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	1a5b      	subs	r3, r3, r1
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	3301      	adds	r3, #1
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d131      	bne.n	8005252 <Get_Key_Time_Value+0xd2>
			key[i].time_up++;				//定时器间隔（1ms）加1，用来判断按键松开时长到下个下降沿结束
 80051ee:	4b20      	ldr	r3, [pc, #128]	; (8005270 <Get_Key_Time_Value+0xf0>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	491f      	ldr	r1, [pc, #124]	; (8005274 <Get_Key_Time_Value+0xf4>)
 80051f6:	4613      	mov	r3, r2
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	440b      	add	r3, r1
 8005200:	330c      	adds	r3, #12
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	b298      	uxth	r0, r3
 8005208:	491a      	ldr	r1, [pc, #104]	; (8005274 <Get_Key_Time_Value+0xf4>)
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	440b      	add	r3, r1
 8005214:	330c      	adds	r3, #12
 8005216:	4602      	mov	r2, r0
 8005218:	801a      	strh	r2, [r3, #0]
			if (key[i].time_up > 65000)
 800521a:	4b15      	ldr	r3, [pc, #84]	; (8005270 <Get_Key_Time_Value+0xf0>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	4619      	mov	r1, r3
 8005220:	4a14      	ldr	r2, [pc, #80]	; (8005274 <Get_Key_Time_Value+0xf4>)
 8005222:	460b      	mov	r3, r1
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	1a5b      	subs	r3, r3, r1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	4413      	add	r3, r2
 800522c:	330c      	adds	r3, #12
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005234:	4293      	cmp	r3, r2
 8005236:	d90c      	bls.n	8005252 <Get_Key_Time_Value+0xd2>
				key[i].time_up = 65000;
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <Get_Key_Time_Value+0xf0>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	4619      	mov	r1, r3
 800523e:	4a0d      	ldr	r2, [pc, #52]	; (8005274 <Get_Key_Time_Value+0xf4>)
 8005240:	460b      	mov	r3, r1
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	1a5b      	subs	r3, r3, r1
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	330c      	adds	r3, #12
 800524c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005250:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 8005252:	4b07      	ldr	r3, [pc, #28]	; (8005270 <Get_Key_Time_Value+0xf0>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	3301      	adds	r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <Get_Key_Time_Value+0xf0>)
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <Get_Key_Time_Value+0xf0>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d992      	bls.n	800518c <Get_Key_Time_Value+0xc>
		}

	}
}
 8005266:	bf00      	nop
 8005268:	46bd      	mov	sp, r7
 800526a:	bc80      	pop	{r7}
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	200001fc 	.word	0x200001fc
 8005274:	200007c4 	.word	0x200007c4

08005278 <Get_Key_Event>:

/************************
** 函数功能:获取键按下的事件
***********************/
static void Get_Key_Event() {
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
	static uint8_t i;
	for (i = 0; i < KEY_NUMBER; i++) {
 800527c:	4b62      	ldr	r3, [pc, #392]	; (8005408 <Get_Key_Event+0x190>)
 800527e:	2200      	movs	r2, #0
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e0b7      	b.n	80053f4 <Get_Key_Event+0x17c>
		if (key[i].event == 0) {
 8005284:	4b60      	ldr	r3, [pc, #384]	; (8005408 <Get_Key_Event+0x190>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	4619      	mov	r1, r3
 800528a:	4a60      	ldr	r2, [pc, #384]	; (800540c <Get_Key_Event+0x194>)
 800528c:	460b      	mov	r3, r1
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	1a5b      	subs	r3, r3, r1
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f040 80a5 	bne.w	80053e8 <Get_Key_Event+0x170>
			//短按
			if (key[i].time_down_pre > 0 && key[i].time_down_pre < SHORT_TIME) {
 800529e:	4b5a      	ldr	r3, [pc, #360]	; (8005408 <Get_Key_Event+0x190>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	4619      	mov	r1, r3
 80052a4:	4a59      	ldr	r2, [pc, #356]	; (800540c <Get_Key_Event+0x194>)
 80052a6:	460b      	mov	r3, r1
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	1a5b      	subs	r3, r3, r1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	3308      	adds	r3, #8
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d018      	beq.n	80052ea <Get_Key_Event+0x72>
 80052b8:	4b53      	ldr	r3, [pc, #332]	; (8005408 <Get_Key_Event+0x190>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	4619      	mov	r1, r3
 80052be:	4a53      	ldr	r2, [pc, #332]	; (800540c <Get_Key_Event+0x194>)
 80052c0:	460b      	mov	r3, r1
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	1a5b      	subs	r3, r3, r1
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4413      	add	r3, r2
 80052ca:	3308      	adds	r3, #8
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80052d2:	d20a      	bcs.n	80052ea <Get_Key_Event+0x72>
				key[i].event = 1;
 80052d4:	4b4c      	ldr	r3, [pc, #304]	; (8005408 <Get_Key_Event+0x190>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	4619      	mov	r1, r3
 80052da:	4a4c      	ldr	r2, [pc, #304]	; (800540c <Get_Key_Event+0x194>)
 80052dc:	460b      	mov	r3, r1
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	1a5b      	subs	r3, r3, r1
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]
			}

			//双击
			if (key[i].time_up_pre[1]>0 && key[i].time_up_pre[1]<SHORT_SHORT_TIME) {
 80052ea:	4b47      	ldr	r3, [pc, #284]	; (8005408 <Get_Key_Event+0x190>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	4619      	mov	r1, r3
 80052f0:	4a46      	ldr	r2, [pc, #280]	; (800540c <Get_Key_Event+0x194>)
 80052f2:	460b      	mov	r3, r1
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	1a5b      	subs	r3, r3, r1
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	4413      	add	r3, r2
 80052fc:	3306      	adds	r3, #6
 80052fe:	881b      	ldrh	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d017      	beq.n	8005334 <Get_Key_Event+0xbc>
 8005304:	4b40      	ldr	r3, [pc, #256]	; (8005408 <Get_Key_Event+0x190>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	4619      	mov	r1, r3
 800530a:	4a40      	ldr	r2, [pc, #256]	; (800540c <Get_Key_Event+0x194>)
 800530c:	460b      	mov	r3, r1
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	1a5b      	subs	r3, r3, r1
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	4413      	add	r3, r2
 8005316:	3306      	adds	r3, #6
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	2b77      	cmp	r3, #119	; 0x77
 800531c:	d80a      	bhi.n	8005334 <Get_Key_Event+0xbc>
				key[i].event = 4;
 800531e:	4b3a      	ldr	r3, [pc, #232]	; (8005408 <Get_Key_Event+0x190>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	4619      	mov	r1, r3
 8005324:	4a39      	ldr	r2, [pc, #228]	; (800540c <Get_Key_Event+0x194>)
 8005326:	460b      	mov	r3, r1
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	1a5b      	subs	r3, r3, r1
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	2204      	movs	r2, #4
 8005332:	701a      	strb	r2, [r3, #0]
			}

			//三击
			if (key[i].time_up_pre[1]>0 && key[i].time_up_pre[0]<SHORT_SHORT_TIME && key[i].time_up_pre[1]<SHORT_SHORT_TIME) {
 8005334:	4b34      	ldr	r3, [pc, #208]	; (8005408 <Get_Key_Event+0x190>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	4619      	mov	r1, r3
 800533a:	4a34      	ldr	r2, [pc, #208]	; (800540c <Get_Key_Event+0x194>)
 800533c:	460b      	mov	r3, r1
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	1a5b      	subs	r3, r3, r1
 8005342:	005b      	lsls	r3, r3, #1
 8005344:	4413      	add	r3, r2
 8005346:	3306      	adds	r3, #6
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d024      	beq.n	8005398 <Get_Key_Event+0x120>
 800534e:	4b2e      	ldr	r3, [pc, #184]	; (8005408 <Get_Key_Event+0x190>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	4a2d      	ldr	r2, [pc, #180]	; (800540c <Get_Key_Event+0x194>)
 8005356:	460b      	mov	r3, r1
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	1a5b      	subs	r3, r3, r1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	4413      	add	r3, r2
 8005360:	3304      	adds	r3, #4
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	2b77      	cmp	r3, #119	; 0x77
 8005366:	d817      	bhi.n	8005398 <Get_Key_Event+0x120>
 8005368:	4b27      	ldr	r3, [pc, #156]	; (8005408 <Get_Key_Event+0x190>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	4619      	mov	r1, r3
 800536e:	4a27      	ldr	r2, [pc, #156]	; (800540c <Get_Key_Event+0x194>)
 8005370:	460b      	mov	r3, r1
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	1a5b      	subs	r3, r3, r1
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	3306      	adds	r3, #6
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	2b77      	cmp	r3, #119	; 0x77
 8005380:	d80a      	bhi.n	8005398 <Get_Key_Event+0x120>
				key[i].event = 5;
 8005382:	4b21      	ldr	r3, [pc, #132]	; (8005408 <Get_Key_Event+0x190>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	4619      	mov	r1, r3
 8005388:	4a20      	ldr	r2, [pc, #128]	; (800540c <Get_Key_Event+0x194>)
 800538a:	460b      	mov	r3, r1
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	1a5b      	subs	r3, r3, r1
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	4413      	add	r3, r2
 8005394:	2205      	movs	r2, #5
 8005396:	701a      	strb	r2, [r3, #0]
			}

			//长按
			if (key[i].time_down_pre > LONG_TIME && key[i].time_down_pre < LONG_LONG_TIME) {
 8005398:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <Get_Key_Event+0x190>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <Get_Key_Event+0x194>)
 80053a0:	460b      	mov	r3, r1
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	1a5b      	subs	r3, r3, r1
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	4413      	add	r3, r2
 80053aa:	3308      	adds	r3, #8
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80053b2:	d919      	bls.n	80053e8 <Get_Key_Event+0x170>
 80053b4:	4b14      	ldr	r3, [pc, #80]	; (8005408 <Get_Key_Event+0x190>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4619      	mov	r1, r3
 80053ba:	4a14      	ldr	r2, [pc, #80]	; (800540c <Get_Key_Event+0x194>)
 80053bc:	460b      	mov	r3, r1
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	1a5b      	subs	r3, r3, r1
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	4413      	add	r3, r2
 80053c6:	3308      	adds	r3, #8
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	f240 52db 	movw	r2, #1499	; 0x5db
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d80a      	bhi.n	80053e8 <Get_Key_Event+0x170>
				key[i].event = 2;
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <Get_Key_Event+0x190>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4a0c      	ldr	r2, [pc, #48]	; (800540c <Get_Key_Event+0x194>)
 80053da:	460b      	mov	r3, r1
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	1a5b      	subs	r3, r3, r1
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	2202      	movs	r2, #2
 80053e6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <Get_Key_Event+0x190>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <Get_Key_Event+0x190>)
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <Get_Key_Event+0x190>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f67f af43 	bls.w	8005284 <Get_Key_Event+0xc>
			}
		}
	}
}
 80053fe:	bf00      	nop
 8005400:	46bd      	mov	sp, r7
 8005402:	bc80      	pop	{r7}
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	200001fd 	.word	0x200001fd
 800540c:	200007c4 	.word	0x200007c4

08005410 <Key_EdgeJudge>:

static void Key_EdgeJudge() {
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
	static uint8_t i;

	for (i = 0; i < KEY_NUMBER; i++) {
 8005414:	4b91      	ldr	r3, [pc, #580]	; (800565c <Key_EdgeJudge+0x24c>)
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	e118      	b.n	800564e <Key_EdgeJudge+0x23e>


		//持续按判断
		if (key[i].time_down > LONG_LONG_TIME) {
 800541c:	4b8f      	ldr	r3, [pc, #572]	; (800565c <Key_EdgeJudge+0x24c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	4a8f      	ldr	r2, [pc, #572]	; (8005660 <Key_EdgeJudge+0x250>)
 8005424:	460b      	mov	r3, r1
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	1a5b      	subs	r3, r3, r1
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	4413      	add	r3, r2
 800542e:	330a      	adds	r3, #10
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005436:	4293      	cmp	r3, r2
 8005438:	d90a      	bls.n	8005450 <Key_EdgeJudge+0x40>
			key[i].event = 3;
 800543a:	4b88      	ldr	r3, [pc, #544]	; (800565c <Key_EdgeJudge+0x24c>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	4619      	mov	r1, r3
 8005440:	4a87      	ldr	r2, [pc, #540]	; (8005660 <Key_EdgeJudge+0x250>)
 8005442:	460b      	mov	r3, r1
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	1a5b      	subs	r3, r3, r1
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	2203      	movs	r2, #3
 800544e:	701a      	strb	r2, [r3, #0]
		}

		//抬起后120ms再判断事件避免把双击顶掉
		if (key[i].time_up == SHORT_SHORT_TIME) {
 8005450:	4b82      	ldr	r3, [pc, #520]	; (800565c <Key_EdgeJudge+0x24c>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	4619      	mov	r1, r3
 8005456:	4a82      	ldr	r2, [pc, #520]	; (8005660 <Key_EdgeJudge+0x250>)
 8005458:	460b      	mov	r3, r1
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	1a5b      	subs	r3, r3, r1
 800545e:	005b      	lsls	r3, r3, #1
 8005460:	4413      	add	r3, r2
 8005462:	330c      	adds	r3, #12
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	2b78      	cmp	r3, #120	; 0x78
 8005468:	d125      	bne.n	80054b6 <Key_EdgeJudge+0xa6>
			Get_Key_Event();
 800546a:	f7ff ff05 	bl	8005278 <Get_Key_Event>
			key[i].time_down_pre = 0;
 800546e:	4b7b      	ldr	r3, [pc, #492]	; (800565c <Key_EdgeJudge+0x24c>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	4619      	mov	r1, r3
 8005474:	4a7a      	ldr	r2, [pc, #488]	; (8005660 <Key_EdgeJudge+0x250>)
 8005476:	460b      	mov	r3, r1
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	1a5b      	subs	r3, r3, r1
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	4413      	add	r3, r2
 8005480:	3308      	adds	r3, #8
 8005482:	2200      	movs	r2, #0
 8005484:	801a      	strh	r2, [r3, #0]
			key[i].time_up_pre[0]=0;
 8005486:	4b75      	ldr	r3, [pc, #468]	; (800565c <Key_EdgeJudge+0x24c>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	4619      	mov	r1, r3
 800548c:	4a74      	ldr	r2, [pc, #464]	; (8005660 <Key_EdgeJudge+0x250>)
 800548e:	460b      	mov	r3, r1
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	1a5b      	subs	r3, r3, r1
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	4413      	add	r3, r2
 8005498:	3304      	adds	r3, #4
 800549a:	2200      	movs	r2, #0
 800549c:	801a      	strh	r2, [r3, #0]
			key[i].time_up_pre[1]=0;
 800549e:	4b6f      	ldr	r3, [pc, #444]	; (800565c <Key_EdgeJudge+0x24c>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	4619      	mov	r1, r3
 80054a4:	4a6e      	ldr	r2, [pc, #440]	; (8005660 <Key_EdgeJudge+0x250>)
 80054a6:	460b      	mov	r3, r1
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	1a5b      	subs	r3, r3, r1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4413      	add	r3, r2
 80054b0:	3306      	adds	r3, #6
 80054b2:	2200      	movs	r2, #0
 80054b4:	801a      	strh	r2, [r3, #0]
		}

		//边沿检测
		key[i].count <<= 1;					//放弃最老的值
 80054b6:	4b69      	ldr	r3, [pc, #420]	; (800565c <Key_EdgeJudge+0x24c>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4a68      	ldr	r2, [pc, #416]	; (8005660 <Key_EdgeJudge+0x250>)
 80054be:	460b      	mov	r3, r1
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	1a5b      	subs	r3, r3, r1
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	3302      	adds	r3, #2
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	4a63      	ldr	r2, [pc, #396]	; (800565c <Key_EdgeJudge+0x24c>)
 80054ce:	7812      	ldrb	r2, [r2, #0]
 80054d0:	4611      	mov	r1, r2
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	b2d8      	uxtb	r0, r3
 80054d6:	4a62      	ldr	r2, [pc, #392]	; (8005660 <Key_EdgeJudge+0x250>)
 80054d8:	460b      	mov	r3, r1
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	1a5b      	subs	r3, r3, r1
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	3302      	adds	r3, #2
 80054e4:	4602      	mov	r2, r0
 80054e6:	701a      	strb	r2, [r3, #0]
		if (Get_Key_Value(i) == SET)		//写入新的值
 80054e8:	4b5c      	ldr	r3, [pc, #368]	; (800565c <Key_EdgeJudge+0x24c>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fe27 	bl	8005140 <Get_Key_Value>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d115      	bne.n	8005524 <Key_EdgeJudge+0x114>
			key[i].count++;   				//最低位加1   0000 0000->0000,0001->0000 0011
 80054f8:	4b58      	ldr	r3, [pc, #352]	; (800565c <Key_EdgeJudge+0x24c>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	4958      	ldr	r1, [pc, #352]	; (8005660 <Key_EdgeJudge+0x250>)
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	440b      	add	r3, r1
 800550a:	3302      	adds	r3, #2
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	3301      	adds	r3, #1
 8005510:	b2d8      	uxtb	r0, r3
 8005512:	4953      	ldr	r1, [pc, #332]	; (8005660 <Key_EdgeJudge+0x250>)
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	440b      	add	r3, r1
 800551e:	3302      	adds	r3, #2
 8005520:	4602      	mov	r2, r0
 8005522:	701a      	strb	r2, [r3, #0]

		//下降沿判断
		if (key[i].count == FALL_EDGE) {
 8005524:	4b4d      	ldr	r3, [pc, #308]	; (800565c <Key_EdgeJudge+0x24c>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	4619      	mov	r1, r3
 800552a:	4a4d      	ldr	r2, [pc, #308]	; (8005660 <Key_EdgeJudge+0x250>)
 800552c:	460b      	mov	r3, r1
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	1a5b      	subs	r3, r3, r1
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	4413      	add	r3, r2
 8005536:	3302      	adds	r3, #2
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2bf0      	cmp	r3, #240	; 0xf0
 800553c:	d145      	bne.n	80055ca <Key_EdgeJudge+0x1ba>
			key[i].edge_flag = KEY_PRESS;
 800553e:	4b47      	ldr	r3, [pc, #284]	; (800565c <Key_EdgeJudge+0x24c>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	4619      	mov	r1, r3
 8005544:	4a46      	ldr	r2, [pc, #280]	; (8005660 <Key_EdgeJudge+0x250>)
 8005546:	460b      	mov	r3, r1
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	1a5b      	subs	r3, r3, r1
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4413      	add	r3, r2
 8005550:	3301      	adds	r3, #1
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]

			key[i].time_up_pre[0] = key[i].time_up_pre[1];
 8005556:	4b41      	ldr	r3, [pc, #260]	; (800565c <Key_EdgeJudge+0x24c>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	4b3f      	ldr	r3, [pc, #252]	; (800565c <Key_EdgeJudge+0x24c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	4619      	mov	r1, r3
 8005562:	4a3f      	ldr	r2, [pc, #252]	; (8005660 <Key_EdgeJudge+0x250>)
 8005564:	4603      	mov	r3, r0
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	1a1b      	subs	r3, r3, r0
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	4413      	add	r3, r2
 800556e:	3306      	adds	r3, #6
 8005570:	8818      	ldrh	r0, [r3, #0]
 8005572:	4a3b      	ldr	r2, [pc, #236]	; (8005660 <Key_EdgeJudge+0x250>)
 8005574:	460b      	mov	r3, r1
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	1a5b      	subs	r3, r3, r1
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4413      	add	r3, r2
 800557e:	3304      	adds	r3, #4
 8005580:	4602      	mov	r2, r0
 8005582:	801a      	strh	r2, [r3, #0]
			key[i].time_up_pre[1] = key[i].time_up;
 8005584:	4b35      	ldr	r3, [pc, #212]	; (800565c <Key_EdgeJudge+0x24c>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	4b34      	ldr	r3, [pc, #208]	; (800565c <Key_EdgeJudge+0x24c>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	4a33      	ldr	r2, [pc, #204]	; (8005660 <Key_EdgeJudge+0x250>)
 8005592:	4603      	mov	r3, r0
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	1a1b      	subs	r3, r3, r0
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	4413      	add	r3, r2
 800559c:	330c      	adds	r3, #12
 800559e:	8818      	ldrh	r0, [r3, #0]
 80055a0:	4a2f      	ldr	r2, [pc, #188]	; (8005660 <Key_EdgeJudge+0x250>)
 80055a2:	460b      	mov	r3, r1
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	1a5b      	subs	r3, r3, r1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	4413      	add	r3, r2
 80055ac:	3306      	adds	r3, #6
 80055ae:	4602      	mov	r2, r0
 80055b0:	801a      	strh	r2, [r3, #0]
			key[i].time_up = 0;			//清空time_up
 80055b2:	4b2a      	ldr	r3, [pc, #168]	; (800565c <Key_EdgeJudge+0x24c>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	4619      	mov	r1, r3
 80055b8:	4a29      	ldr	r2, [pc, #164]	; (8005660 <Key_EdgeJudge+0x250>)
 80055ba:	460b      	mov	r3, r1
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	1a5b      	subs	r3, r3, r1
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	4413      	add	r3, r2
 80055c4:	330c      	adds	r3, #12
 80055c6:	2200      	movs	r2, #0
 80055c8:	801a      	strh	r2, [r3, #0]
		}

		//上升沿判断
		if (key[i].count == RISE_EDGE) {
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <Key_EdgeJudge+0x24c>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	4619      	mov	r1, r3
 80055d0:	4a23      	ldr	r2, [pc, #140]	; (8005660 <Key_EdgeJudge+0x250>)
 80055d2:	460b      	mov	r3, r1
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	1a5b      	subs	r3, r3, r1
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	3302      	adds	r3, #2
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b0f      	cmp	r3, #15
 80055e2:	d12e      	bne.n	8005642 <Key_EdgeJudge+0x232>
			key[i].edge_flag = KEY_FREE;
 80055e4:	4b1d      	ldr	r3, [pc, #116]	; (800565c <Key_EdgeJudge+0x24c>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	4a1d      	ldr	r2, [pc, #116]	; (8005660 <Key_EdgeJudge+0x250>)
 80055ec:	460b      	mov	r3, r1
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	1a5b      	subs	r3, r3, r1
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	3301      	adds	r3, #1
 80055f8:	2202      	movs	r2, #2
 80055fa:	701a      	strb	r2, [r3, #0]
			key[i].time_down_pre = key[i].time_down;
 80055fc:	4b17      	ldr	r3, [pc, #92]	; (800565c <Key_EdgeJudge+0x24c>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	4b16      	ldr	r3, [pc, #88]	; (800565c <Key_EdgeJudge+0x24c>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	4619      	mov	r1, r3
 8005608:	4a15      	ldr	r2, [pc, #84]	; (8005660 <Key_EdgeJudge+0x250>)
 800560a:	4603      	mov	r3, r0
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	1a1b      	subs	r3, r3, r0
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	330a      	adds	r3, #10
 8005616:	8818      	ldrh	r0, [r3, #0]
 8005618:	4a11      	ldr	r2, [pc, #68]	; (8005660 <Key_EdgeJudge+0x250>)
 800561a:	460b      	mov	r3, r1
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	1a5b      	subs	r3, r3, r1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	4413      	add	r3, r2
 8005624:	3308      	adds	r3, #8
 8005626:	4602      	mov	r2, r0
 8005628:	801a      	strh	r2, [r3, #0]
			key[i].time_down = 0;		//清空time_down
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <Key_EdgeJudge+0x24c>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	4619      	mov	r1, r3
 8005630:	4a0b      	ldr	r2, [pc, #44]	; (8005660 <Key_EdgeJudge+0x250>)
 8005632:	460b      	mov	r3, r1
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	1a5b      	subs	r3, r3, r1
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	4413      	add	r3, r2
 800563c:	330a      	adds	r3, #10
 800563e:	2200      	movs	r2, #0
 8005640:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < KEY_NUMBER; i++) {
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <Key_EdgeJudge+0x24c>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	3301      	adds	r3, #1
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4b04      	ldr	r3, [pc, #16]	; (800565c <Key_EdgeJudge+0x24c>)
 800564c:	701a      	strb	r2, [r3, #0]
 800564e:	4b03      	ldr	r3, [pc, #12]	; (800565c <Key_EdgeJudge+0x24c>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b01      	cmp	r3, #1
 8005654:	f67f aee2 	bls.w	800541c <Key_EdgeJudge+0xc>
		}
	}
}
 8005658:	bf00      	nop
 800565a:	bd80      	pop	{r7, pc}
 800565c:	200001fe 	.word	0x200001fe
 8005660:	200007c4 	.word	0x200007c4

08005664 <Key_Timer_Interrupt>:

/*
   ===在定时器中断中调用此函数
*/
void Key_Timer_Interrupt()
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
	Key_EdgeJudge();
 8005668:	f7ff fed2 	bl	8005410 <Key_EdgeJudge>
	Get_Key_Time_Value();
 800566c:	f7ff fd88 	bl	8005180 <Get_Key_Time_Value>
}
 8005670:	bf00      	nop
 8005672:	bd80      	pop	{r7, pc}

08005674 <Delay_1us>:
//#define Set_LED_2()    	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin,GPIO_PIN_SET)
//#define Clear_LED_2()	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin,GPIO_PIN_RESET)

#define CONSTANT 1000 //一个周期时间设定 ms

static void Delay_1us(uint16_t i){
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	80fb      	strh	r3, [r7, #6]
	uint16_t temp;
	while(i--){
 800567e:	e008      	b.n	8005692 <Delay_1us+0x1e>
		for(temp=0;temp<60;temp++);
 8005680:	2300      	movs	r3, #0
 8005682:	81fb      	strh	r3, [r7, #14]
 8005684:	e002      	b.n	800568c <Delay_1us+0x18>
 8005686:	89fb      	ldrh	r3, [r7, #14]
 8005688:	3301      	adds	r3, #1
 800568a:	81fb      	strh	r3, [r7, #14]
 800568c:	89fb      	ldrh	r3, [r7, #14]
 800568e:	2b3b      	cmp	r3, #59	; 0x3b
 8005690:	d9f9      	bls.n	8005686 <Delay_1us+0x12>
	while(i--){
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	80fa      	strh	r2, [r7, #6]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f1      	bne.n	8005680 <Delay_1us+0xc>
	};
}
 800569c:	bf00      	nop
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr
	...

080056a8 <led_function_1>:

//prm周期1ms
//运行单个pwm周期
//x：高电平比例0到1000
//
static void led_function_1(float x){
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	Clear_LED_0();  //亮
 80056b0:	2200      	movs	r2, #0
 80056b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056b6:	4811      	ldr	r0, [pc, #68]	; (80056fc <led_function_1+0x54>)
 80056b8:	f7fd fb21 	bl	8002cfe <HAL_GPIO_WritePin>
	//Clear_LED_1();  //亮
	//Clear_LED_1();  //亮
	Delay_1us(x);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7fb fcb1 	bl	8001024 <__aeabi_f2uiz>
 80056c2:	4603      	mov	r3, r0
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff ffd4 	bl	8005674 <Delay_1us>
	Set_LED_0();//灭
 80056cc:	2201      	movs	r2, #1
 80056ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80056d2:	480a      	ldr	r0, [pc, #40]	; (80056fc <led_function_1+0x54>)
 80056d4:	f7fd fb13 	bl	8002cfe <HAL_GPIO_WritePin>
	//Set_LED_1();//灭
	//Set_LED_2();//灭
	Delay_1us(CONSTANT-x);
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4809      	ldr	r0, [pc, #36]	; (8005700 <led_function_1+0x58>)
 80056dc:	f7fb fa48 	bl	8000b70 <__aeabi_fsub>
 80056e0:	4603      	mov	r3, r0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fb fc9e 	bl	8001024 <__aeabi_f2uiz>
 80056e8:	4603      	mov	r3, r0
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff ffc1 	bl	8005674 <Delay_1us>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40011000 	.word	0x40011000
 8005700:	447a0000 	.word	0x447a0000

08005704 <led_function_2>:
//设定呼吸的时间,单位ms
//fre呼吸次数
void led_function_2(uint8_t fre,uint16_t tim_ms){
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	4603      	mov	r3, r0
 800570c:	460a      	mov	r2, r1
 800570e:	71fb      	strb	r3, [r7, #7]
 8005710:	4613      	mov	r3, r2
 8005712:	80bb      	strh	r3, [r7, #4]
	float interval;
	float pwm=0;
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
	uint16_t i;
	interval=(float)CONSTANT/(float)tim_ms;//每一个pwm周期变化量
 800571a:	88bb      	ldrh	r3, [r7, #4]
 800571c:	4618      	mov	r0, r3
 800571e:	f7fb fad9 	bl	8000cd4 <__aeabi_ui2f>
 8005722:	4603      	mov	r3, r0
 8005724:	4619      	mov	r1, r3
 8005726:	481a      	ldr	r0, [pc, #104]	; (8005790 <led_function_2+0x8c>)
 8005728:	f7fb fbe0 	bl	8000eec <__aeabi_fdiv>
 800572c:	4603      	mov	r3, r0
 800572e:	60fb      	str	r3, [r7, #12]
	while(fre--){
 8005730:	e024      	b.n	800577c <led_function_2+0x78>
		for(i=0;i<tim_ms;i++){
 8005732:	2300      	movs	r3, #0
 8005734:	827b      	strh	r3, [r7, #18]
 8005736:	e00b      	b.n	8005750 <led_function_2+0x4c>
			pwm+=interval;
 8005738:	68f9      	ldr	r1, [r7, #12]
 800573a:	6978      	ldr	r0, [r7, #20]
 800573c:	f7fb fa1a 	bl	8000b74 <__addsf3>
 8005740:	4603      	mov	r3, r0
 8005742:	617b      	str	r3, [r7, #20]
			led_function_1(pwm);
 8005744:	6978      	ldr	r0, [r7, #20]
 8005746:	f7ff ffaf 	bl	80056a8 <led_function_1>
		for(i=0;i<tim_ms;i++){
 800574a:	8a7b      	ldrh	r3, [r7, #18]
 800574c:	3301      	adds	r3, #1
 800574e:	827b      	strh	r3, [r7, #18]
 8005750:	8a7a      	ldrh	r2, [r7, #18]
 8005752:	88bb      	ldrh	r3, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d3ef      	bcc.n	8005738 <led_function_2+0x34>
		}
		for(i=tim_ms;i>0;i--){
 8005758:	88bb      	ldrh	r3, [r7, #4]
 800575a:	827b      	strh	r3, [r7, #18]
 800575c:	e00b      	b.n	8005776 <led_function_2+0x72>
			pwm-=interval;
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	6978      	ldr	r0, [r7, #20]
 8005762:	f7fb fa05 	bl	8000b70 <__aeabi_fsub>
 8005766:	4603      	mov	r3, r0
 8005768:	617b      	str	r3, [r7, #20]
			led_function_1(pwm);
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f7ff ff9c 	bl	80056a8 <led_function_1>
		for(i=tim_ms;i>0;i--){
 8005770:	8a7b      	ldrh	r3, [r7, #18]
 8005772:	3b01      	subs	r3, #1
 8005774:	827b      	strh	r3, [r7, #18]
 8005776:	8a7b      	ldrh	r3, [r7, #18]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <led_function_2+0x5a>
	while(fre--){
 800577c:	79fb      	ldrb	r3, [r7, #7]
 800577e:	1e5a      	subs	r2, r3, #1
 8005780:	71fa      	strb	r2, [r7, #7]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1d5      	bne.n	8005732 <led_function_2+0x2e>
		}
	}
}
 8005786:	bf00      	nop
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	447a0000 	.word	0x447a0000

08005794 <Uart_Time_Even>:

uint8_t buffer[50];

unsigned char uart_frame_id;

void Uart_Time_Even(void){             			//串口接收用在定时器上的事件 用来判断超时
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0

		if(uart1.status !=FREE){
 8005798:	4b18      	ldr	r3, [pc, #96]	; (80057fc <Uart_Time_Even+0x68>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d02a      	beq.n	80057f6 <Uart_Time_Even+0x62>
			uart1.time_out++;
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <Uart_Time_Even+0x68>)
 80057a2:	789b      	ldrb	r3, [r3, #2]
 80057a4:	3301      	adds	r3, #1
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	4b14      	ldr	r3, [pc, #80]	; (80057fc <Uart_Time_Even+0x68>)
 80057aa:	709a      	strb	r2, [r3, #2]

				if(uart1.time_out>=FRAME_TIMEOUT){			//完成一帧的接收
 80057ac:	4b13      	ldr	r3, [pc, #76]	; (80057fc <Uart_Time_Even+0x68>)
 80057ae:	789b      	ldrb	r3, [r3, #2]
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d920      	bls.n	80057f6 <Uart_Time_Even+0x62>
					uart1.status=FREE;						//串口标记为空闲
 80057b4:	4b11      	ldr	r3, [pc, #68]	; (80057fc <Uart_Time_Even+0x68>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]



					frame[uart1.frame_id].status=1;  		//当前缓存帧的状态 0以处理 1未处理
 80057ba:	4b10      	ldr	r3, [pc, #64]	; (80057fc <Uart_Time_Even+0x68>)
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	4619      	mov	r1, r3
 80057c0:	4a0f      	ldr	r2, [pc, #60]	; (8005800 <Uart_Time_Even+0x6c>)
 80057c2:	2316      	movs	r3, #22
 80057c4:	fb03 f301 	mul.w	r3, r3, r1
 80057c8:	4413      	add	r3, r2
 80057ca:	3314      	adds	r3, #20
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]

				    /*
					此处添加帧处理程序
					*/

					uart_frame_id=uart1.frame_id;			//传出当前缓存的编号在main中处理
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <Uart_Time_Even+0x68>)
 80057d2:	785a      	ldrb	r2, [r3, #1]
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <Uart_Time_Even+0x70>)
 80057d6:	701a      	strb	r2, [r3, #0]
					uart1.frame_id++;
 80057d8:	4b08      	ldr	r3, [pc, #32]	; (80057fc <Uart_Time_Even+0x68>)
 80057da:	785b      	ldrb	r3, [r3, #1]
 80057dc:	3301      	adds	r3, #1
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	4b06      	ldr	r3, [pc, #24]	; (80057fc <Uart_Time_Even+0x68>)
 80057e2:	705a      	strb	r2, [r3, #1]

					Uart_Data_Processing();                	//数据处理 切换缓存的数组后 再处理前一个缓存中的数据避免数据覆盖
 80057e4:	f000 f874 	bl	80058d0 <Uart_Data_Processing>

					if(uart1.frame_id >= FRAME_QUANTITY){
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <Uart_Time_Even+0x68>)
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d902      	bls.n	80057f6 <Uart_Time_Even+0x62>
					uart1.frame_id=0;
 80057f0:	4b02      	ldr	r3, [pc, #8]	; (80057fc <Uart_Time_Even+0x68>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	705a      	strb	r2, [r3, #1]
					}
				}
		}
	}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20000840 	.word	0x20000840
 8005800:	20000814 	.word	0x20000814
 8005804:	20000843 	.word	0x20000843

08005808 <Receive_Interrupt>:


void Receive_Interrupt(){     			//进一次串口中断
 8005808:	b490      	push	{r4, r7}
 800580a:	af00      	add	r7, sp, #0
	     if(uart1.status!=BUSY){
 800580c:	4b2d      	ldr	r3, [pc, #180]	; (80058c4 <Receive_Interrupt+0xbc>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d00d      	beq.n	8005830 <Receive_Interrupt+0x28>
					uart1.status=BUSY;
 8005814:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <Receive_Interrupt+0xbc>)
 8005816:	2201      	movs	r2, #1
 8005818:	701a      	strb	r2, [r3, #0]
					frame[uart1.frame_id].length=0;
 800581a:	4b2a      	ldr	r3, [pc, #168]	; (80058c4 <Receive_Interrupt+0xbc>)
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	4619      	mov	r1, r3
 8005820:	4a29      	ldr	r2, [pc, #164]	; (80058c8 <Receive_Interrupt+0xc0>)
 8005822:	2316      	movs	r3, #22
 8005824:	fb03 f301 	mul.w	r3, r3, r1
 8005828:	4413      	add	r3, r2
 800582a:	3315      	adds	r3, #21
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
			 }


	      	  	//接收一字节
	    frame[uart1.frame_id].buffer[frame[uart1.frame_id].length]= buffer[0];
 8005830:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <Receive_Interrupt+0xbc>)
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	461c      	mov	r4, r3
 8005836:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <Receive_Interrupt+0xbc>)
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	4619      	mov	r1, r3
 800583c:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <Receive_Interrupt+0xc0>)
 800583e:	2316      	movs	r3, #22
 8005840:	fb03 f301 	mul.w	r3, r3, r1
 8005844:	4413      	add	r3, r2
 8005846:	3315      	adds	r3, #21
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <Receive_Interrupt+0xc4>)
 800584e:	7819      	ldrb	r1, [r3, #0]
 8005850:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <Receive_Interrupt+0xc0>)
 8005852:	2316      	movs	r3, #22
 8005854:	fb03 f304 	mul.w	r3, r3, r4
 8005858:	4413      	add	r3, r2
 800585a:	4403      	add	r3, r0
 800585c:	460a      	mov	r2, r1
 800585e:	701a      	strb	r2, [r3, #0]



	     	 	frame[uart1.frame_id].length++;
 8005860:	4b18      	ldr	r3, [pc, #96]	; (80058c4 <Receive_Interrupt+0xbc>)
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	4918      	ldr	r1, [pc, #96]	; (80058c8 <Receive_Interrupt+0xc0>)
 8005866:	2216      	movs	r2, #22
 8005868:	fb02 f203 	mul.w	r2, r2, r3
 800586c:	440a      	add	r2, r1
 800586e:	3215      	adds	r2, #21
 8005870:	7812      	ldrb	r2, [r2, #0]
 8005872:	3201      	adds	r2, #1
 8005874:	b2d0      	uxtb	r0, r2
 8005876:	4a14      	ldr	r2, [pc, #80]	; (80058c8 <Receive_Interrupt+0xc0>)
 8005878:	2116      	movs	r1, #22
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	3315      	adds	r3, #21
 8005882:	4602      	mov	r2, r0
 8005884:	701a      	strb	r2, [r3, #0]
				if(frame[uart1.frame_id].length>=19){
 8005886:	4b0f      	ldr	r3, [pc, #60]	; (80058c4 <Receive_Interrupt+0xbc>)
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	4619      	mov	r1, r3
 800588c:	4a0e      	ldr	r2, [pc, #56]	; (80058c8 <Receive_Interrupt+0xc0>)
 800588e:	2316      	movs	r3, #22
 8005890:	fb03 f301 	mul.w	r3, r3, r1
 8005894:	4413      	add	r3, r2
 8005896:	3315      	adds	r3, #21
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b12      	cmp	r3, #18
 800589c:	d90a      	bls.n	80058b4 <Receive_Interrupt+0xac>
				frame[uart1.frame_id].length=19;
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <Receive_Interrupt+0xbc>)
 80058a0:	785b      	ldrb	r3, [r3, #1]
 80058a2:	4619      	mov	r1, r3
 80058a4:	4a08      	ldr	r2, [pc, #32]	; (80058c8 <Receive_Interrupt+0xc0>)
 80058a6:	2316      	movs	r3, #22
 80058a8:	fb03 f301 	mul.w	r3, r3, r1
 80058ac:	4413      	add	r3, r2
 80058ae:	3315      	adds	r3, #21
 80058b0:	2213      	movs	r2, #19
 80058b2:	701a      	strb	r2, [r3, #0]
				}
				uart1.time_out=0;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <Receive_Interrupt+0xbc>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	709a      	strb	r2, [r3, #2]
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc90      	pop	{r4, r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000840 	.word	0x20000840
 80058c8:	20000814 	.word	0x20000814
 80058cc:	200007e0 	.word	0x200007e0

080058d0 <Uart_Data_Processing>:
};
/********************
 **数据处理
 **放在main里面处理数据
******************/
void Uart_Data_Processing(){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
#ifdef SLAVE
uint8_t val=0x88;
 80058d6:	2388      	movs	r3, #136	; 0x88
 80058d8:	73fb      	strb	r3, [r7, #15]
uint8_t slave_id=SLAVE_ID;
 80058da:	2301      	movs	r3, #1
 80058dc:	73bb      	strb	r3, [r7, #14]
#endif
union Data data_c;
union Data data_v;
	if(frame[uart_frame_id].status!=0){    			//接收到数据后status=1;
 80058de:	4b33      	ldr	r3, [pc, #204]	; (80059ac <Uart_Data_Processing+0xdc>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	4619      	mov	r1, r3
 80058e4:	4a32      	ldr	r2, [pc, #200]	; (80059b0 <Uart_Data_Processing+0xe0>)
 80058e6:	2316      	movs	r3, #22
 80058e8:	fb03 f301 	mul.w	r3, r3, r1
 80058ec:	4413      	add	r3, r2
 80058ee:	3314      	adds	r3, #20
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d055      	beq.n	80059a2 <Uart_Data_Processing+0xd2>

	//返回接收到的数据
	//HAL_UART_Transmit(&huart1,(uint8_t*)frame[uart_frame_id].buffer,frame[uart_frame_id].length,10);
#ifdef SLAVE
	if(frame[uart_frame_id].buffer[0]==0xff &&
 80058f6:	4b2d      	ldr	r3, [pc, #180]	; (80059ac <Uart_Data_Processing+0xdc>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4a2c      	ldr	r2, [pc, #176]	; (80059b0 <Uart_Data_Processing+0xe0>)
 80058fe:	2316      	movs	r3, #22
 8005900:	fb03 f301 	mul.w	r3, r3, r1
 8005904:	4413      	add	r3, r2
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2bff      	cmp	r3, #255	; 0xff
 800590a:	d13f      	bne.n	800598c <Uart_Data_Processing+0xbc>
	   frame[uart_frame_id].buffer[1]==0xff &&
 800590c:	4b27      	ldr	r3, [pc, #156]	; (80059ac <Uart_Data_Processing+0xdc>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	4619      	mov	r1, r3
 8005912:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <Uart_Data_Processing+0xe0>)
 8005914:	2316      	movs	r3, #22
 8005916:	fb03 f301 	mul.w	r3, r3, r1
 800591a:	4413      	add	r3, r2
 800591c:	3301      	adds	r3, #1
 800591e:	781b      	ldrb	r3, [r3, #0]
	if(frame[uart_frame_id].buffer[0]==0xff &&
 8005920:	2bff      	cmp	r3, #255	; 0xff
 8005922:	d133      	bne.n	800598c <Uart_Data_Processing+0xbc>
	   frame[uart_frame_id].buffer[2]==SLAVE_ID)
 8005924:	4b21      	ldr	r3, [pc, #132]	; (80059ac <Uart_Data_Processing+0xdc>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	4619      	mov	r1, r3
 800592a:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <Uart_Data_Processing+0xe0>)
 800592c:	2316      	movs	r3, #22
 800592e:	fb03 f301 	mul.w	r3, r3, r1
 8005932:	4413      	add	r3, r2
 8005934:	3302      	adds	r3, #2
 8005936:	781b      	ldrb	r3, [r3, #0]
	   frame[uart_frame_id].buffer[1]==0xff &&
 8005938:	2b01      	cmp	r3, #1
 800593a:	d127      	bne.n	800598c <Uart_Data_Processing+0xbc>
	{
		data_v.f=adc[2];
 800593c:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <Uart_Data_Processing+0xe4>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	607b      	str	r3, [r7, #4]
		data_c.f=current;
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <Uart_Data_Processing+0xe8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60bb      	str	r3, [r7, #8]
		HAL_UART_Transmit(&huart1,&val,1,10);
 8005948:	f107 010f 	add.w	r1, r7, #15
 800594c:	230a      	movs	r3, #10
 800594e:	2201      	movs	r2, #1
 8005950:	481a      	ldr	r0, [pc, #104]	; (80059bc <Uart_Data_Processing+0xec>)
 8005952:	f7ff f80c 	bl	800496e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&slave_id,1,10);
 8005956:	f107 010e 	add.w	r1, r7, #14
 800595a:	230a      	movs	r3, #10
 800595c:	2201      	movs	r2, #1
 800595e:	4817      	ldr	r0, [pc, #92]	; (80059bc <Uart_Data_Processing+0xec>)
 8005960:	f7ff f805 	bl	800496e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&data_v.str[0],4,10);
 8005964:	1d39      	adds	r1, r7, #4
 8005966:	230a      	movs	r3, #10
 8005968:	2204      	movs	r2, #4
 800596a:	4814      	ldr	r0, [pc, #80]	; (80059bc <Uart_Data_Processing+0xec>)
 800596c:	f7fe ffff 	bl	800496e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&data_c.str[0],4,10);
 8005970:	f107 0108 	add.w	r1, r7, #8
 8005974:	230a      	movs	r3, #10
 8005976:	2204      	movs	r2, #4
 8005978:	4810      	ldr	r0, [pc, #64]	; (80059bc <Uart_Data_Processing+0xec>)
 800597a:	f7fe fff8 	bl	800496e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,&val,1,10);
 800597e:	f107 010f 	add.w	r1, r7, #15
 8005982:	230a      	movs	r3, #10
 8005984:	2201      	movs	r2, #1
 8005986:	480d      	ldr	r0, [pc, #52]	; (80059bc <Uart_Data_Processing+0xec>)
 8005988:	f7fe fff1 	bl	800496e <HAL_UART_Transmit>
		ID2_V=data_v.f;
		ID2_C=data_c.f;
	}
#endif

	frame[uart_frame_id].status=0;					//处理完数据后status 清0;
 800598c:	4b07      	ldr	r3, [pc, #28]	; (80059ac <Uart_Data_Processing+0xdc>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	4619      	mov	r1, r3
 8005992:	4a07      	ldr	r2, [pc, #28]	; (80059b0 <Uart_Data_Processing+0xe0>)
 8005994:	2316      	movs	r3, #22
 8005996:	fb03 f301 	mul.w	r3, r3, r1
 800599a:	4413      	add	r3, r2
 800599c:	3314      	adds	r3, #20
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
	}
}
 80059a2:	bf00      	nop
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20000843 	.word	0x20000843
 80059b0:	20000814 	.word	0x20000814
 80059b4:	20000908 	.word	0x20000908
 80059b8:	20000904 	.word	0x20000904
 80059bc:	200006c8 	.word	0x200006c8

080059c0 <HAL_UART_RxCpltCallback>:
 * 这个指针指向用户定义的一个数组来缓存数据
*buffer为指向的数组名1为接收的长度
*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)	// 判断是由哪个串口触发的中断
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a06      	ldr	r2, [pc, #24]	; (80059e8 <HAL_UART_RxCpltCallback+0x28>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d106      	bne.n	80059e0 <HAL_UART_RxCpltCallback+0x20>
	{
		Receive_Interrupt();
 80059d2:	f7ff ff19 	bl	8005808 <Receive_Interrupt>

		//HAL_UART_Transmit(&huart1,(uint8_t*)"0",2,10);

		HAL_UART_Receive_IT(&huart1,buffer,1);		// 重新使能串口1接收中断
 80059d6:	2201      	movs	r2, #1
 80059d8:	4904      	ldr	r1, [pc, #16]	; (80059ec <HAL_UART_RxCpltCallback+0x2c>)
 80059da:	4805      	ldr	r0, [pc, #20]	; (80059f0 <HAL_UART_RxCpltCallback+0x30>)
 80059dc:	f7ff f859 	bl	8004a92 <HAL_UART_Receive_IT>
	}
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40013800 	.word	0x40013800
 80059ec:	200007e0 	.word	0x200007e0
 80059f0:	200006c8 	.word	0x200006c8

080059f4 <HAL_UART_Transmit_Str>:

//发送字符串
void HAL_UART_Transmit_Str(UART_HandleTypeDef *huart,uint8_t *p)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
	uint8_t temp=0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]

	while(*p!='\0'){
 8005a02:	e005      	b.n	8005a10 <HAL_UART_Transmit_Str+0x1c>
		p++;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	3301      	adds	r3, #1
 8005a08:	603b      	str	r3, [r7, #0]
		temp++;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
	while(*p!='\0'){
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f5      	bne.n	8005a04 <HAL_UART_Transmit_Str+0x10>
	}
	HAL_UART_Transmit(huart,p-temp,temp,10); //传入的值的地址不用加&
 8005a18:	7bfb      	ldrb	r3, [r7, #15]
 8005a1a:	425b      	negs	r3, r3
 8005a1c:	683a      	ldr	r2, [r7, #0]
 8005a1e:	18d1      	adds	r1, r2, r3
 8005a20:	7bfb      	ldrb	r3, [r7, #15]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	230a      	movs	r3, #10
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fe ffa1 	bl	800496e <HAL_UART_Transmit>

}
 8005a2c:	bf00      	nop
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <SetTime>:

 //__attribute__机制在main之前运行一次 set_time
 static __attribute__((constructor)) void SetTime();

//设定间隔时间
void SetTime(){
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
	Task_1.TimeInter     = 1;//设定间隔时间
 8005a38:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <SetTime+0x3c>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	605a      	str	r2, [r3, #4]
	Task_5.TimeInter    = 5;
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	; (8005a74 <SetTime+0x40>)
 8005a40:	2205      	movs	r2, #5
 8005a42:	605a      	str	r2, [r3, #4]
	Task_50.TimeInter    = 50;
 8005a44:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <SetTime+0x44>)
 8005a46:	2232      	movs	r2, #50	; 0x32
 8005a48:	605a      	str	r2, [r3, #4]
	Task_100.TimeInter   = 100;
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <SetTime+0x48>)
 8005a4c:	2264      	movs	r2, #100	; 0x64
 8005a4e:	605a      	str	r2, [r3, #4]
	Task_200.TimeInter   = 200;
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <SetTime+0x4c>)
 8005a52:	22c8      	movs	r2, #200	; 0xc8
 8005a54:	605a      	str	r2, [r3, #4]
	Task_500.TimeInter   = 500;
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <SetTime+0x50>)
 8005a58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005a5c:	605a      	str	r2, [r3, #4]
	Task_1000.TimeInter  = 1000;
 8005a5e:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <SetTime+0x54>)
 8005a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a64:	605a      	str	r2, [r3, #4]
}
 8005a66:	bf00      	nop
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000874 	.word	0x20000874
 8005a74:	20000844 	.word	0x20000844
 8005a78:	2000085c 	.word	0x2000085c
 8005a7c:	20000864 	.word	0x20000864
 8005a80:	20000854 	.word	0x20000854
 8005a84:	2000084c 	.word	0x2000084c
 8005a88:	2000086c 	.word	0x2000086c

08005a8c <GetTime>:
void GetTime(TIME_TYPE_ST *TimeType)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
    TimeType->TimeStart = HAL_GetTick();//获取起始时间
 8005a94:	f7fb ffcc 	bl	8001a30 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	601a      	str	r2, [r3, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <CompareTime>:
 
uint8_t CompareTime(TIME_TYPE_ST *TimeType)//每隔1毫秒，计数器就会增加1
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b082      	sub	sp, #8
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
    return ((HAL_GetTick()-TimeType->TimeStart) >= TimeType->TimeInter);
 8005aae:	f7fb ffbf 	bl	8001a30 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	1ad2      	subs	r2, r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bf2c      	ite	cs
 8005ac2:	2301      	movcs	r3, #1
 8005ac4:	2300      	movcc	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <User_u8x8_byte_hw_i2c>:
#endif

#ifdef hardware_mode

uint8_t User_u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af02      	add	r7, sp, #8
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	72fb      	strb	r3, [r7, #11]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];		/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	  static uint8_t buf_idx;
	  uint8_t *data;

	  switch(msg)
 8005ae2:	7afb      	ldrb	r3, [r7, #11]
 8005ae4:	3b14      	subs	r3, #20
 8005ae6:	2b0c      	cmp	r3, #12
 8005ae8:	d847      	bhi.n	8005b7a <User_u8x8_byte_hw_i2c+0xaa>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <User_u8x8_byte_hw_i2c+0x20>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b7f 	.word	0x08005b7f
 8005af4:	08005b7b 	.word	0x08005b7b
 8005af8:	08005b7b 	.word	0x08005b7b
 8005afc:	08005b25 	.word	0x08005b25
 8005b00:	08005b55 	.word	0x08005b55
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b7b 	.word	0x08005b7b
 8005b0c:	08005b7b 	.word	0x08005b7b
 8005b10:	08005b7b 	.word	0x08005b7b
 8005b14:	08005b7b 	.word	0x08005b7b
 8005b18:	08005b7b 	.word	0x08005b7b
 8005b1c:	08005b7b 	.word	0x08005b7b
 8005b20:	08005b7f 	.word	0x08005b7f
	  {
	    case U8X8_MSG_BYTE_SEND:
	      data = (uint8_t *)arg_ptr;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	617b      	str	r3, [r7, #20]
	      while( arg_int > 0 )
 8005b28:	e010      	b.n	8005b4c <User_u8x8_byte_hw_i2c+0x7c>
	      {
		buffer[buf_idx++] = *data;
 8005b2a:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <User_u8x8_byte_hw_i2c+0xbc>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	b2d1      	uxtb	r1, r2
 8005b32:	4a16      	ldr	r2, [pc, #88]	; (8005b8c <User_u8x8_byte_hw_i2c+0xbc>)
 8005b34:	7011      	strb	r1, [r2, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	7819      	ldrb	r1, [r3, #0]
 8005b3c:	4b14      	ldr	r3, [pc, #80]	; (8005b90 <User_u8x8_byte_hw_i2c+0xc0>)
 8005b3e:	5499      	strb	r1, [r3, r2]
		data++;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	3301      	adds	r3, #1
 8005b44:	617b      	str	r3, [r7, #20]
		arg_int--;
 8005b46:	7abb      	ldrb	r3, [r7, #10]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	72bb      	strb	r3, [r7, #10]
	      while( arg_int > 0 )
 8005b4c:	7abb      	ldrb	r3, [r7, #10]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1eb      	bne.n	8005b2a <User_u8x8_byte_hw_i2c+0x5a>
	      }
	      break;
 8005b52:	e015      	b.n	8005b80 <User_u8x8_byte_hw_i2c+0xb0>
	      break;
	    case U8X8_MSG_BYTE_SET_DC:
	      /* ignored for i2c */
	      break;
	    case U8X8_MSG_BYTE_START_TRANSFER:
	      buf_idx = 0;
 8005b54:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <User_u8x8_byte_hw_i2c+0xbc>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	701a      	strb	r2, [r3, #0]
	      break;
 8005b5a:	e011      	b.n	8005b80 <User_u8x8_byte_hw_i2c+0xb0>
	    case U8X8_MSG_BYTE_END_TRANSFER:
	    	HAL_I2C_Master_Transmit(&hi2c1,u8x8_GetI2CAddress(u8x8),&buffer[0], buf_idx, 10);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b62:	b299      	uxth	r1, r3
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <User_u8x8_byte_hw_i2c+0xbc>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	4a07      	ldr	r2, [pc, #28]	; (8005b90 <User_u8x8_byte_hw_i2c+0xc0>)
 8005b72:	4808      	ldr	r0, [pc, #32]	; (8005b94 <User_u8x8_byte_hw_i2c+0xc4>)
 8005b74:	f7fd fa2c 	bl	8002fd0 <HAL_I2C_Master_Transmit>
	      break;
 8005b78:	e002      	b.n	8005b80 <User_u8x8_byte_hw_i2c+0xb0>
	    default:
	      return 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e001      	b.n	8005b82 <User_u8x8_byte_hw_i2c+0xb2>
	      break;
 8005b7e:	bf00      	nop
	  }
	  return 1;
 8005b80:	2301      	movs	r3, #1
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200001ff 	.word	0x200001ff
 8005b90:	20000200 	.word	0x20000200
 8005b94:	20000630 	.word	0x20000630

08005b98 <u8x8_gpio_and_delay_template>:



u8g2_t u8g2;
uint8_t u8x8_gpio_and_delay_template(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	72fb      	strb	r3, [r7, #11]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	72bb      	strb	r3, [r7, #10]
	switch(msg)
 8005baa:	7afb      	ldrb	r3, [r7, #11]
 8005bac:	3b28      	subs	r3, #40	; 0x28
 8005bae:	2b2b      	cmp	r3, #43	; 0x2b
 8005bb0:	d86e      	bhi.n	8005c90 <u8x8_gpio_and_delay_template+0xf8>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <u8x8_gpio_and_delay_template+0x20>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005c9b 	.word	0x08005c9b
 8005bbc:	08005c9b 	.word	0x08005c9b
 8005bc0:	08005c9b 	.word	0x08005c9b
 8005bc4:	08005c9b 	.word	0x08005c9b
 8005bc8:	08005c9b 	.word	0x08005c9b
 8005bcc:	08005c9b 	.word	0x08005c9b
 8005bd0:	08005c91 	.word	0x08005c91
 8005bd4:	08005c91 	.word	0x08005c91
 8005bd8:	08005c91 	.word	0x08005c91
 8005bdc:	08005c91 	.word	0x08005c91
 8005be0:	08005c91 	.word	0x08005c91
 8005be4:	08005c91 	.word	0x08005c91
 8005be8:	08005c91 	.word	0x08005c91
 8005bec:	08005c91 	.word	0x08005c91
 8005bf0:	08005c91 	.word	0x08005c91
 8005bf4:	08005c91 	.word	0x08005c91
 8005bf8:	08005c91 	.word	0x08005c91
 8005bfc:	08005c91 	.word	0x08005c91
 8005c00:	08005c91 	.word	0x08005c91
 8005c04:	08005c91 	.word	0x08005c91
 8005c08:	08005c91 	.word	0x08005c91
 8005c0c:	08005c91 	.word	0x08005c91
 8005c10:	08005c91 	.word	0x08005c91
 8005c14:	08005c91 	.word	0x08005c91
 8005c18:	08005c91 	.word	0x08005c91
 8005c1c:	08005c91 	.word	0x08005c91
 8005c20:	08005c91 	.word	0x08005c91
 8005c24:	08005c91 	.word	0x08005c91
 8005c28:	08005c91 	.word	0x08005c91
 8005c2c:	08005c91 	.word	0x08005c91
 8005c30:	08005c91 	.word	0x08005c91
 8005c34:	08005c91 	.word	0x08005c91
 8005c38:	08005c91 	.word	0x08005c91
 8005c3c:	08005c91 	.word	0x08005c91
 8005c40:	08005c91 	.word	0x08005c91
 8005c44:	08005c91 	.word	0x08005c91
 8005c48:	08005c91 	.word	0x08005c91
 8005c4c:	08005c91 	.word	0x08005c91
 8005c50:	08005c91 	.word	0x08005c91
 8005c54:	08005c91 	.word	0x08005c91
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c73 	.word	0x08005c73
 8005c60:	08005c7d 	.word	0x08005c7d
 8005c64:	08005c87 	.word	0x08005c87
		}
		break;							// arg_int=1: Input dir with pullup high for I2C data pin
#endif
	case U8X8_MSG_GPIO_MENU_SELECT:
		if(READ_MENU_SELECT!=1)
			u8x8_SetGPIOResult(u8x8, /* get menu select pin state */ 0);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 8005c70:	e014      	b.n	8005c9c <u8x8_gpio_and_delay_template+0x104>
	case U8X8_MSG_GPIO_MENU_NEXT:
		if(READ_MENU_NEXT!=1)
			u8x8_SetGPIOResult(u8x8, /* get menu next pin state */ 0);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 8005c7a:	e00f      	b.n	8005c9c <u8x8_gpio_and_delay_template+0x104>
	case U8X8_MSG_GPIO_MENU_PREV:
		if(READ_MENU_PREV!=1)
			u8x8_SetGPIOResult(u8x8, /* get menu prev pin state */ 0);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 8005c84:	e00a      	b.n	8005c9c <u8x8_gpio_and_delay_template+0x104>
	case U8X8_MSG_GPIO_MENU_HOME:
		if(READ_MENU_HOME!=1)
			u8x8_SetGPIOResult(u8x8, /* get menu home pin state */ 0);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 8005c8e:	e005      	b.n	8005c9c <u8x8_gpio_and_delay_template+0x104>
	default:
		u8x8_SetGPIOResult(u8x8, 1);			// default return value
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 8005c98:	e000      	b.n	8005c9c <u8x8_gpio_and_delay_template+0x104>
		break;							// can be used to setup pins
 8005c9a:	bf00      	nop
	}
	return 1;
 8005c9c:	2301      	movs	r3, #1
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <User_U8g2_Init>:

void User_U8g2_Init(){
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af02      	add	r7, sp, #8
#ifdef software_mode
	u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8x8_gpio_and_delay_template);
#endif
#ifdef hardware_mode
	u8g2_Setup_ssd1306_i2c_128x64_vcomh0_f(&u8g2, U8G2_R0, User_u8x8_byte_hw_i2c, u8x8_gpio_and_delay_template);
 8005cae:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <User_U8g2_Init+0x70>)
 8005cb0:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <User_U8g2_Init+0x74>)
 8005cb2:	491b      	ldr	r1, [pc, #108]	; (8005d20 <User_U8g2_Init+0x78>)
 8005cb4:	481b      	ldr	r0, [pc, #108]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005cb6:	f000 fc51 	bl	800655c <u8g2_Setup_ssd1306_i2c_128x64_vcomh0_f>
#endif
	u8g2_InitDisplay(&u8g2); 		// send init sequence to the display, display is in sleep mode after this,
 8005cba:	481a      	ldr	r0, [pc, #104]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005cbc:	f002 f923 	bl	8007f06 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0); 	// wake up display
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4818      	ldr	r0, [pc, #96]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005cc4:	f002 f92e 	bl	8007f24 <u8x8_SetPowerSave>
	u8g2_ClearBuffer(&u8g2);
 8005cc8:	4816      	ldr	r0, [pc, #88]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005cca:	f000 fa98 	bl	80061fe <u8g2_ClearBuffer>
	u8g2_SendBuffer(&u8g2);
 8005cce:	4815      	ldr	r0, [pc, #84]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005cd0:	f000 fb08 	bl	80062e4 <u8g2_SendBuffer>
	u8g2_DrawLine(&u8g2, 0,0, 128, 64);
 8005cd4:	2340      	movs	r3, #64	; 0x40
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	2380      	movs	r3, #128	; 0x80
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4811      	ldr	r0, [pc, #68]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005ce0:	f001 fb62 	bl	80073a8 <u8g2_DrawLine>
	u8g2_DrawLine(&u8g2, 128,0, 0, 64);
 8005ce4:	2340      	movs	r3, #64	; 0x40
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	2200      	movs	r2, #0
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	480d      	ldr	r0, [pc, #52]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005cf0:	f001 fb5a 	bl	80073a8 <u8g2_DrawLine>
	u8g2_SetFont(&u8g2,u8g2_font_7x13_tf);
 8005cf4:	490c      	ldr	r1, [pc, #48]	; (8005d28 <User_U8g2_Init+0x80>)
 8005cf6:	480b      	ldr	r0, [pc, #44]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005cf8:	f001 f9ba 	bl	8007070 <u8g2_SetFont>
	u8g2_SendBuffer(&u8g2);
 8005cfc:	4809      	ldr	r0, [pc, #36]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005cfe:	f000 faf1 	bl	80062e4 <u8g2_SendBuffer>
	u8g2_SetPowerSave(&u8g2, 0);
 8005d02:	2100      	movs	r1, #0
 8005d04:	4807      	ldr	r0, [pc, #28]	; (8005d24 <User_U8g2_Init+0x7c>)
 8005d06:	f002 f90d 	bl	8007f24 <u8x8_SetPowerSave>
	HAL_Delay(500);
 8005d0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d0e:	f7fb fe99 	bl	8001a44 <HAL_Delay>
	//HAL_I2C_Master_Transmit(&hi2c1,u8x8_GetI2CAddress(u8x8)>> 1,&buffer[0], buf_idx, 1);
}
 8005d12:	bf00      	nop
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	08005b99 	.word	0x08005b99
 8005d1c:	08005ad1 	.word	0x08005ad1
 8005d20:	0800d304 	.word	0x0800d304
 8005d24:	2000087c 	.word	0x2000087c
 8005d28:	0800a1c0 	.word	0x0800a1c0
 8005d2c:	00000000 	.word	0x00000000

08005d30 <User_Display_Function_SLAVE>:
 */
float adc[3];
float current;

//从机显示函数
void User_Display_Function_SLAVE(){
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	af02      	add	r7, sp, #8
	int8_t temp_buf[20];

	u8g2_ClearBuffer(&u8g2);
 8005d36:	4886      	ldr	r0, [pc, #536]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005d38:	f000 fa61 	bl	80061fe <u8g2_ClearBuffer>
	adc[0]=(float)Ture_ADC_0/4095*3.3;
 8005d3c:	4b85      	ldr	r3, [pc, #532]	; (8005f54 <User_Display_Function_SLAVE+0x224>)
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fa ffc7 	bl	8000cd4 <__aeabi_ui2f>
 8005d46:	4603      	mov	r3, r0
 8005d48:	4983      	ldr	r1, [pc, #524]	; (8005f58 <User_Display_Function_SLAVE+0x228>)
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fb f8ce 	bl	8000eec <__aeabi_fdiv>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fa fb68 	bl	8000428 <__aeabi_f2d>
 8005d58:	a37b      	add	r3, pc, #492	; (adr r3, 8005f48 <User_Display_Function_SLAVE+0x218>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fbbb 	bl	80004d8 <__aeabi_dmul>
 8005d62:	4603      	mov	r3, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	4618      	mov	r0, r3
 8005d68:	4621      	mov	r1, r4
 8005d6a:	f7fa fead 	bl	8000ac8 <__aeabi_d2f>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	4b7a      	ldr	r3, [pc, #488]	; (8005f5c <User_Display_Function_SLAVE+0x22c>)
 8005d72:	601a      	str	r2, [r3, #0]
	adc[1]=(float)Ture_ADC_1/4095*3.3;
 8005d74:	4b7a      	ldr	r3, [pc, #488]	; (8005f60 <User_Display_Function_SLAVE+0x230>)
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fa ffab 	bl	8000cd4 <__aeabi_ui2f>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	4975      	ldr	r1, [pc, #468]	; (8005f58 <User_Display_Function_SLAVE+0x228>)
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fb f8b2 	bl	8000eec <__aeabi_fdiv>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fa fb4c 	bl	8000428 <__aeabi_f2d>
 8005d90:	a36d      	add	r3, pc, #436	; (adr r3, 8005f48 <User_Display_Function_SLAVE+0x218>)
 8005d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d96:	f7fa fb9f 	bl	80004d8 <__aeabi_dmul>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	4621      	mov	r1, r4
 8005da2:	f7fa fe91 	bl	8000ac8 <__aeabi_d2f>
 8005da6:	4602      	mov	r2, r0
 8005da8:	4b6c      	ldr	r3, [pc, #432]	; (8005f5c <User_Display_Function_SLAVE+0x22c>)
 8005daa:	605a      	str	r2, [r3, #4]
	adc[2]=(float)Ture_ADC_2/4095*3.3*4;
 8005dac:	4b6d      	ldr	r3, [pc, #436]	; (8005f64 <User_Display_Function_SLAVE+0x234>)
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fa ff8f 	bl	8000cd4 <__aeabi_ui2f>
 8005db6:	4603      	mov	r3, r0
 8005db8:	4967      	ldr	r1, [pc, #412]	; (8005f58 <User_Display_Function_SLAVE+0x228>)
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fb f896 	bl	8000eec <__aeabi_fdiv>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f7fa fb30 	bl	8000428 <__aeabi_f2d>
 8005dc8:	a35f      	add	r3, pc, #380	; (adr r3, 8005f48 <User_Display_Function_SLAVE+0x218>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa fb83 	bl	80004d8 <__aeabi_dmul>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	4621      	mov	r1, r4
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	4b62      	ldr	r3, [pc, #392]	; (8005f68 <User_Display_Function_SLAVE+0x238>)
 8005de0:	f7fa fb7a 	bl	80004d8 <__aeabi_dmul>
 8005de4:	4603      	mov	r3, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	4618      	mov	r0, r3
 8005dea:	4621      	mov	r1, r4
 8005dec:	f7fa fe6c 	bl	8000ac8 <__aeabi_d2f>
 8005df0:	4602      	mov	r2, r0
 8005df2:	4b5a      	ldr	r3, [pc, #360]	; (8005f5c <User_Display_Function_SLAVE+0x22c>)
 8005df4:	609a      	str	r2, [r3, #8]

	sprintf((char*)temp_buf,"ADC_0:%.3fV",adc[0]); // @suppress("Float formatting support")
 8005df6:	4b59      	ldr	r3, [pc, #356]	; (8005f5c <User_Display_Function_SLAVE+0x22c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fa fb14 	bl	8000428 <__aeabi_f2d>
 8005e00:	4603      	mov	r3, r0
 8005e02:	460c      	mov	r4, r1
 8005e04:	1d38      	adds	r0, r7, #4
 8005e06:	461a      	mov	r2, r3
 8005e08:	4623      	mov	r3, r4
 8005e0a:	4958      	ldr	r1, [pc, #352]	; (8005f6c <User_Display_Function_SLAVE+0x23c>)
 8005e0c:	f002 fd9e 	bl	800894c <siprintf>
	u8g2_DrawStr(&u8g2,0,16,(char*)temp_buf);    //
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	2210      	movs	r2, #16
 8005e14:	2100      	movs	r1, #0
 8005e16:	484e      	ldr	r0, [pc, #312]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005e18:	f001 f88c 	bl	8006f34 <u8g2_DrawStr>

	sprintf((char*)temp_buf,"ADC_1:%.3fV",adc[1]);
 8005e1c:	4b4f      	ldr	r3, [pc, #316]	; (8005f5c <User_Display_Function_SLAVE+0x22c>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fa fb01 	bl	8000428 <__aeabi_f2d>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	1d38      	adds	r0, r7, #4
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	4623      	mov	r3, r4
 8005e30:	494f      	ldr	r1, [pc, #316]	; (8005f70 <User_Display_Function_SLAVE+0x240>)
 8005e32:	f002 fd8b 	bl	800894c <siprintf>
	u8g2_DrawStr(&u8g2,0,32,(char*)temp_buf);    //
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	2220      	movs	r2, #32
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4844      	ldr	r0, [pc, #272]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005e3e:	f001 f879 	bl	8006f34 <u8g2_DrawStr>

	sprintf((char*)temp_buf,"ADC_2:%.3fV",adc[2]);
 8005e42:	4b46      	ldr	r3, [pc, #280]	; (8005f5c <User_Display_Function_SLAVE+0x22c>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fa faee 	bl	8000428 <__aeabi_f2d>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	1d38      	adds	r0, r7, #4
 8005e52:	461a      	mov	r2, r3
 8005e54:	4623      	mov	r3, r4
 8005e56:	4947      	ldr	r1, [pc, #284]	; (8005f74 <User_Display_Function_SLAVE+0x244>)
 8005e58:	f002 fd78 	bl	800894c <siprintf>
	u8g2_DrawStr(&u8g2,0,48,(char*)temp_buf);    //
 8005e5c:	1d3b      	adds	r3, r7, #4
 8005e5e:	2230      	movs	r2, #48	; 0x30
 8005e60:	2100      	movs	r1, #0
 8005e62:	483b      	ldr	r0, [pc, #236]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005e64:	f001 f866 	bl	8006f34 <u8g2_DrawStr>

	current=(float)(Ture_ADC_1-Ture_ADC_0)/4095*3.3*1000/50*100;
 8005e68:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <User_Display_Function_SLAVE+0x230>)
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	4b39      	ldr	r3, [pc, #228]	; (8005f54 <User_Display_Function_SLAVE+0x224>)
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fa ff31 	bl	8000cdc <__aeabi_i2f>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4936      	ldr	r1, [pc, #216]	; (8005f58 <User_Display_Function_SLAVE+0x228>)
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fb f834 	bl	8000eec <__aeabi_fdiv>
 8005e84:	4603      	mov	r3, r0
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fa face 	bl	8000428 <__aeabi_f2d>
 8005e8c:	a32e      	add	r3, pc, #184	; (adr r3, 8005f48 <User_Display_Function_SLAVE+0x218>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	f7fa fb21 	bl	80004d8 <__aeabi_dmul>
 8005e96:	4603      	mov	r3, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	f04f 0200 	mov.w	r2, #0
 8005ea2:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <User_Display_Function_SLAVE+0x248>)
 8005ea4:	f7fa fb18 	bl	80004d8 <__aeabi_dmul>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4618      	mov	r0, r3
 8005eae:	4621      	mov	r1, r4
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	4b31      	ldr	r3, [pc, #196]	; (8005f7c <User_Display_Function_SLAVE+0x24c>)
 8005eb6:	f7fa fc39 	bl	800072c <__aeabi_ddiv>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <User_Display_Function_SLAVE+0x250>)
 8005ec8:	f7fa fb06 	bl	80004d8 <__aeabi_dmul>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	f7fa fdf8 	bl	8000ac8 <__aeabi_d2f>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <User_Display_Function_SLAVE+0x254>)
 8005edc:	601a      	str	r2, [r3, #0]


	sprintf((char*)temp_buf,"Current:%.3fmA",current);
 8005ede:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <User_Display_Function_SLAVE+0x254>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fa faa0 	bl	8000428 <__aeabi_f2d>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	460c      	mov	r4, r1
 8005eec:	1d38      	adds	r0, r7, #4
 8005eee:	461a      	mov	r2, r3
 8005ef0:	4623      	mov	r3, r4
 8005ef2:	4925      	ldr	r1, [pc, #148]	; (8005f88 <User_Display_Function_SLAVE+0x258>)
 8005ef4:	f002 fd2a 	bl	800894c <siprintf>
	u8g2_DrawStr(&u8g2,0,63,(char*)temp_buf);    //
 8005ef8:	1d3b      	adds	r3, r7, #4
 8005efa:	223f      	movs	r2, #63	; 0x3f
 8005efc:	2100      	movs	r1, #0
 8005efe:	4814      	ldr	r0, [pc, #80]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005f00:	f001 f818 	bl	8006f34 <u8g2_DrawStr>

	temp_buf[0]='0'+SLAVE_ID;
 8005f04:	2331      	movs	r3, #49	; 0x31
 8005f06:	713b      	strb	r3, [r7, #4]
	temp_buf[1]='\0';
 8005f08:	2300      	movs	r3, #0
 8005f0a:	717b      	strb	r3, [r7, #5]
	u8g2_SetFont(&u8g2,u8g2_font_10x20_t_arabic);
 8005f0c:	491f      	ldr	r1, [pc, #124]	; (8005f8c <User_Display_Function_SLAVE+0x25c>)
 8005f0e:	4810      	ldr	r0, [pc, #64]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005f10:	f001 f8ae 	bl	8007070 <u8g2_SetFont>
	u8g2_DrawStr(&u8g2,100,30,(char*)temp_buf);    //
 8005f14:	1d3b      	adds	r3, r7, #4
 8005f16:	221e      	movs	r2, #30
 8005f18:	2164      	movs	r1, #100	; 0x64
 8005f1a:	480d      	ldr	r0, [pc, #52]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005f1c:	f001 f80a 	bl	8006f34 <u8g2_DrawStr>
	u8g2_DrawCircle(&u8g2,105,24,12,U8G2_DRAW_ALL);
 8005f20:	230f      	movs	r3, #15
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	230c      	movs	r3, #12
 8005f26:	2218      	movs	r2, #24
 8005f28:	2169      	movs	r1, #105	; 0x69
 8005f2a:	4809      	ldr	r0, [pc, #36]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005f2c:	f000 facd 	bl	80064ca <u8g2_DrawCircle>
	u8g2_SetFont(&u8g2,u8g2_font_7x13_tf);
 8005f30:	4917      	ldr	r1, [pc, #92]	; (8005f90 <User_Display_Function_SLAVE+0x260>)
 8005f32:	4807      	ldr	r0, [pc, #28]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005f34:	f001 f89c 	bl	8007070 <u8g2_SetFont>

	u8g2_SendBuffer(&u8g2);
 8005f38:	4805      	ldr	r0, [pc, #20]	; (8005f50 <User_Display_Function_SLAVE+0x220>)
 8005f3a:	f000 f9d3 	bl	80062e4 <u8g2_SendBuffer>
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd90      	pop	{r4, r7, pc}
 8005f46:	bf00      	nop
 8005f48:	66666666 	.word	0x66666666
 8005f4c:	400a6666 	.word	0x400a6666
 8005f50:	2000087c 	.word	0x2000087c
 8005f54:	20000a44 	.word	0x20000a44
 8005f58:	457ff000 	.word	0x457ff000
 8005f5c:	20000908 	.word	0x20000908
 8005f60:	20000a48 	.word	0x20000a48
 8005f64:	20000a46 	.word	0x20000a46
 8005f68:	40100000 	.word	0x40100000
 8005f6c:	0800a168 	.word	0x0800a168
 8005f70:	0800a174 	.word	0x0800a174
 8005f74:	0800a180 	.word	0x0800a180
 8005f78:	408f4000 	.word	0x408f4000
 8005f7c:	40490000 	.word	0x40490000
 8005f80:	40590000 	.word	0x40590000
 8005f84:	20000904 	.word	0x20000904
 8005f88:	0800a18c 	.word	0x0800a18c
 8005f8c:	0800aae4 	.word	0x0800aae4
 8005f90:	0800a1c0 	.word	0x0800a1c0

08005f94 <bubbleSort>:
uint16_t Ture_ADC_2;
uint16_t Ture_ADC_3_ref;

//冒泡传入数组，数组元素数量
void bubbleSort(uint16_t arr[], int n)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  int i, j, tmp;

  for(i = 0; i < n - 1; i++)
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e038      	b.n	8006016 <bubbleSort+0x82>
  {
    for(j = 1; j < n; j++)
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	e02e      	b.n	8006008 <bubbleSort+0x74>
    {
      if(arr[j] < arr[j - 1])
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	881a      	ldrh	r2, [r3, #0]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	440b      	add	r3, r1
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d21c      	bcs.n	8006002 <bubbleSort+0x6e>
      {
        tmp = arr[j];
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	4413      	add	r3, r2
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]
        arr[j] = arr[j - 1];
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	440b      	add	r3, r1
 8005fea:	8812      	ldrh	r2, [r2, #0]
 8005fec:	801a      	strh	r2, [r3, #0]
        arr[j - 1] = tmp;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	b292      	uxth	r2, r2
 8006000:	801a      	strh	r2, [r3, #0]
    for(j = 1; j < n; j++)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	3301      	adds	r3, #1
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	dbcc      	blt.n	8005faa <bubbleSort+0x16>
  for(i = 0; i < n - 1; i++)
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	3301      	adds	r3, #1
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	3b01      	subs	r3, #1
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	429a      	cmp	r2, r3
 800601e:	dbc1      	blt.n	8005fa4 <bubbleSort+0x10>
      }
    }
  }
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	bc80      	pop	{r7}
 8006028:	4770      	bx	lr
 800602a:	0000      	movs	r0, r0
 800602c:	0000      	movs	r0, r0
	...

08006030 <GET_CH_Vlaue>:
uint16_t temp_1[50];
uint16_t temp_2[50];


//获取实际输出通道值
void GET_CH_Vlaue(){
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 	static int i;
 	int ii;
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&AD_DMA[0], 3);
 8006036:	2203      	movs	r2, #3
 8006038:	494d      	ldr	r1, [pc, #308]	; (8006170 <GET_CH_Vlaue+0x140>)
 800603a:	484e      	ldr	r0, [pc, #312]	; (8006174 <GET_CH_Vlaue+0x144>)
 800603c:	f7fb fdfc 	bl	8001c38 <HAL_ADC_Start_DMA>
		temp_0[i]=(uint16_t)AD_DMA[0];
 8006040:	4b4d      	ldr	r3, [pc, #308]	; (8006178 <GET_CH_Vlaue+0x148>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a4a      	ldr	r2, [pc, #296]	; (8006170 <GET_CH_Vlaue+0x140>)
 8006046:	8811      	ldrh	r1, [r2, #0]
 8006048:	4a4c      	ldr	r2, [pc, #304]	; (800617c <GET_CH_Vlaue+0x14c>)
 800604a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		temp_1[i]=(uint16_t)AD_DMA[1];
 800604e:	4b4a      	ldr	r3, [pc, #296]	; (8006178 <GET_CH_Vlaue+0x148>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a47      	ldr	r2, [pc, #284]	; (8006170 <GET_CH_Vlaue+0x140>)
 8006054:	8851      	ldrh	r1, [r2, #2]
 8006056:	4a4a      	ldr	r2, [pc, #296]	; (8006180 <GET_CH_Vlaue+0x150>)
 8006058:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		temp_2[i]=(uint16_t)AD_DMA[2];
 800605c:	4b46      	ldr	r3, [pc, #280]	; (8006178 <GET_CH_Vlaue+0x148>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a43      	ldr	r2, [pc, #268]	; (8006170 <GET_CH_Vlaue+0x140>)
 8006062:	8891      	ldrh	r1, [r2, #4]
 8006064:	4a47      	ldr	r2, [pc, #284]	; (8006184 <GET_CH_Vlaue+0x154>)
 8006066:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		i++;
 800606a:	4b43      	ldr	r3, [pc, #268]	; (8006178 <GET_CH_Vlaue+0x148>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	4a41      	ldr	r2, [pc, #260]	; (8006178 <GET_CH_Vlaue+0x148>)
 8006072:	6013      	str	r3, [r2, #0]
		if(i>=50){
 8006074:	4b40      	ldr	r3, [pc, #256]	; (8006178 <GET_CH_Vlaue+0x148>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b31      	cmp	r3, #49	; 0x31
 800607a:	dd6e      	ble.n	800615a <GET_CH_Vlaue+0x12a>
			i=0;
 800607c:	4b3e      	ldr	r3, [pc, #248]	; (8006178 <GET_CH_Vlaue+0x148>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]
			 bubbleSort(temp_0,50);
 8006082:	2132      	movs	r1, #50	; 0x32
 8006084:	483d      	ldr	r0, [pc, #244]	; (800617c <GET_CH_Vlaue+0x14c>)
 8006086:	f7ff ff85 	bl	8005f94 <bubbleSort>
			 bubbleSort(temp_1,50);
 800608a:	2132      	movs	r1, #50	; 0x32
 800608c:	483c      	ldr	r0, [pc, #240]	; (8006180 <GET_CH_Vlaue+0x150>)
 800608e:	f7ff ff81 	bl	8005f94 <bubbleSort>
			 bubbleSort(temp_2,50);
 8006092:	2132      	movs	r1, #50	; 0x32
 8006094:	483b      	ldr	r0, [pc, #236]	; (8006184 <GET_CH_Vlaue+0x154>)
 8006096:	f7ff ff7d 	bl	8005f94 <bubbleSort>

			 Ture_ADC_0=(float)temp_0[25]*MULTIPLE;
 800609a:	4b38      	ldr	r3, [pc, #224]	; (800617c <GET_CH_Vlaue+0x14c>)
 800609c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fa fe18 	bl	8000cd4 <__aeabi_ui2f>
 80060a4:	4603      	mov	r3, r0
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fa f9be 	bl	8000428 <__aeabi_f2d>
 80060ac:	a32e      	add	r3, pc, #184	; (adr r3, 8006168 <GET_CH_Vlaue+0x138>)
 80060ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b2:	f7fa fa11 	bl	80004d8 <__aeabi_dmul>
 80060b6:	4603      	mov	r3, r0
 80060b8:	460c      	mov	r4, r1
 80060ba:	4618      	mov	r0, r3
 80060bc:	4621      	mov	r1, r4
 80060be:	f7fa fce3 	bl	8000a88 <__aeabi_d2uiz>
 80060c2:	4603      	mov	r3, r0
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	4b30      	ldr	r3, [pc, #192]	; (8006188 <GET_CH_Vlaue+0x158>)
 80060c8:	801a      	strh	r2, [r3, #0]
			 Ture_ADC_1=(float)temp_1[25]*MULTIPLE;
 80060ca:	4b2d      	ldr	r3, [pc, #180]	; (8006180 <GET_CH_Vlaue+0x150>)
 80060cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fa fe00 	bl	8000cd4 <__aeabi_ui2f>
 80060d4:	4603      	mov	r3, r0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fa f9a6 	bl	8000428 <__aeabi_f2d>
 80060dc:	a322      	add	r3, pc, #136	; (adr r3, 8006168 <GET_CH_Vlaue+0x138>)
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f7fa f9f9 	bl	80004d8 <__aeabi_dmul>
 80060e6:	4603      	mov	r3, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	4618      	mov	r0, r3
 80060ec:	4621      	mov	r1, r4
 80060ee:	f7fa fccb 	bl	8000a88 <__aeabi_d2uiz>
 80060f2:	4603      	mov	r3, r0
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	4b25      	ldr	r3, [pc, #148]	; (800618c <GET_CH_Vlaue+0x15c>)
 80060f8:	801a      	strh	r2, [r3, #0]
			 Ture_ADC_2=(float)temp_2[25]*MULTIPLE_2;
 80060fa:	4b22      	ldr	r3, [pc, #136]	; (8006184 <GET_CH_Vlaue+0x154>)
 80060fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fa fde8 	bl	8000cd4 <__aeabi_ui2f>
 8006104:	4603      	mov	r3, r0
 8006106:	4618      	mov	r0, r3
 8006108:	f7fa f98e 	bl	8000428 <__aeabi_f2d>
 800610c:	a316      	add	r3, pc, #88	; (adr r3, 8006168 <GET_CH_Vlaue+0x138>)
 800610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006112:	f7fa f9e1 	bl	80004d8 <__aeabi_dmul>
 8006116:	4603      	mov	r3, r0
 8006118:	460c      	mov	r4, r1
 800611a:	4618      	mov	r0, r3
 800611c:	4621      	mov	r1, r4
 800611e:	f7fa fcb3 	bl	8000a88 <__aeabi_d2uiz>
 8006122:	4603      	mov	r3, r0
 8006124:	b29a      	uxth	r2, r3
 8006126:	4b1a      	ldr	r3, [pc, #104]	; (8006190 <GET_CH_Vlaue+0x160>)
 8006128:	801a      	strh	r2, [r3, #0]

			for(ii=0;ii<50;ii++){
 800612a:	2300      	movs	r3, #0
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	e011      	b.n	8006154 <GET_CH_Vlaue+0x124>
				temp_0[ii]=0;
 8006130:	4a12      	ldr	r2, [pc, #72]	; (800617c <GET_CH_Vlaue+0x14c>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2100      	movs	r1, #0
 8006136:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				temp_1[ii]=0;
 800613a:	4a11      	ldr	r2, [pc, #68]	; (8006180 <GET_CH_Vlaue+0x150>)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2100      	movs	r1, #0
 8006140:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				temp_2[ii]=0;
 8006144:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <GET_CH_Vlaue+0x154>)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2100      	movs	r1, #0
 800614a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(ii=0;ii<50;ii++){
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3301      	adds	r3, #1
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b31      	cmp	r3, #49	; 0x31
 8006158:	ddea      	ble.n	8006130 <GET_CH_Vlaue+0x100>
			}
		}
}
 800615a:	bf00      	nop
 800615c:	370c      	adds	r7, #12
 800615e:	46bd      	mov	sp, r7
 8006160:	bd90      	pop	{r4, r7, pc}
 8006162:	bf00      	nop
 8006164:	f3af 8000 	nop.w
 8006168:	851eb852 	.word	0x851eb852
 800616c:	3ff051eb 	.word	0x3ff051eb
 8006170:	20000a50 	.word	0x20000a50
 8006174:	20000708 	.word	0x20000708
 8006178:	20000220 	.word	0x20000220
 800617c:	2000097c 	.word	0x2000097c
 8006180:	200009e0 	.word	0x200009e0
 8006184:	20000918 	.word	0x20000918
 8006188:	20000a44 	.word	0x20000a44
 800618c:	20000a48 	.word	0x20000a48
 8006190:	20000a46 	.word	0x20000a46

08006194 <Start_Peripheral>:

uint16_t temp;
uint16_t AD_DMA[10];

//启动外设
void Start_Peripheral(){
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);  //Start timer interrupt启动定时器中断（同时就启动定时器了不用单独启动定时器）
 8006198:	480b      	ldr	r0, [pc, #44]	; (80061c8 <Start_Peripheral+0x34>)
 800619a:	f7fd fffd 	bl	8004198 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1,(uint8_t*)&buffer,1);  //Start uart interrupt启动串口中断
 800619e:	2201      	movs	r2, #1
 80061a0:	490a      	ldr	r1, [pc, #40]	; (80061cc <Start_Peripheral+0x38>)
 80061a2:	480b      	ldr	r0, [pc, #44]	; (80061d0 <Start_Peripheral+0x3c>)
 80061a4:	f7fe fc75 	bl	8004a92 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_Str(&huart1,(uint8_t*)"usart_ok");
 80061a8:	490a      	ldr	r1, [pc, #40]	; (80061d4 <Start_Peripheral+0x40>)
 80061aa:	4809      	ldr	r0, [pc, #36]	; (80061d0 <Start_Peripheral+0x3c>)
 80061ac:	f7ff fc22 	bl	80059f4 <HAL_UART_Transmit_Str>

	HAL_ADCEx_Calibration_Start(&hadc1);              	//AD校准
 80061b0:	4809      	ldr	r0, [pc, #36]	; (80061d8 <Start_Peripheral+0x44>)
 80061b2:	f7fc f825 	bl	8002200 <HAL_ADCEx_Calibration_Start>

	led_function_2(3,30);  //呼吸灯
 80061b6:	211e      	movs	r1, #30
 80061b8:	2003      	movs	r0, #3
 80061ba:	f7ff faa3 	bl	8005704 <led_function_2>
	User_U8g2_Init();
 80061be:	f7ff fd73 	bl	8005ca8 <User_U8g2_Init>
}
 80061c2:	bf00      	nop
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000778 	.word	0x20000778
 80061cc:	200007e0 	.word	0x200007e0
 80061d0:	200006c8 	.word	0x200006c8
 80061d4:	0800a19c 	.word	0x0800a19c
 80061d8:	20000708 	.word	0x20000708

080061dc <HAL_TIM_PeriodElapsedCallback>:

//定时器回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ec:	d103      	bne.n	80061f6 <HAL_TIM_PeriodElapsedCallback+0x1a>
		Uart_Time_Even();
 80061ee:	f7ff fad1 	bl	8005794 <Uart_Time_Even>
		Key_Timer_Interrupt();
 80061f2:	f7ff fa37 	bl	8005664 <Key_Timer_Interrupt>
	}
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	7c1b      	ldrb	r3, [r3, #16]
 800620c:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006214:	461a      	mov	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	fb02 f303 	mul.w	r3, r2, r3
 800621c:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f001 ff35 	bl	800809c <memset>
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b086      	sub	sp, #24
 800623e:	af02      	add	r7, sp, #8
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	70fb      	strb	r3, [r7, #3]
 8006246:	4613      	mov	r3, r2
 8006248:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	7c1b      	ldrb	r3, [r3, #16]
 8006250:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625a:	60bb      	str	r3, [r7, #8]
  offset *= w;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	b29b      	uxth	r3, r3
 8006260:	89ba      	ldrh	r2, [r7, #12]
 8006262:	fb02 f303 	mul.w	r3, r2, r3
 8006266:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8006268:	89bb      	ldrh	r3, [r7, #12]
 800626a:	00db      	lsls	r3, r3, #3
 800626c:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 800626e:	89bb      	ldrh	r3, [r7, #12]
 8006270:	68ba      	ldr	r2, [r7, #8]
 8006272:	4413      	add	r3, r2
 8006274:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8006276:	7bf9      	ldrb	r1, [r7, #15]
 8006278:	78ba      	ldrb	r2, [r7, #2]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	460b      	mov	r3, r1
 8006280:	2100      	movs	r1, #0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 fe0e 	bl	8007ea4 <u8x8_DrawTile>
}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a2:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	7c5b      	ldrb	r3, [r3, #17]
 80062b2:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80062b4:	7bba      	ldrb	r2, [r7, #14]
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7ff ffbd 	bl	800623a <u8g2_send_tile_row>
    src_row++;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	3301      	adds	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80062c6:	7bbb      	ldrb	r3, [r7, #14]
 80062c8:	3301      	adds	r3, #1
 80062ca:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80062cc:	7bfa      	ldrb	r2, [r7, #15]
 80062ce:	7b7b      	ldrb	r3, [r7, #13]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d203      	bcs.n	80062dc <u8g2_send_buffer+0x4c>
 80062d4:	7bba      	ldrb	r2, [r7, #14]
 80062d6:	7b3b      	ldrb	r3, [r7, #12]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d3eb      	bcc.n	80062b4 <u8g2_send_buffer+0x24>
}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff ffcf 	bl	8006290 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 fe27 	bl	8007f46 <u8x8_RefreshDisplay>
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <u8g2_draw_circle_section>:
/* Circle */

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;

static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	4608      	mov	r0, r1
 800630a:	4611      	mov	r1, r2
 800630c:	461a      	mov	r2, r3
 800630e:	4603      	mov	r3, r0
 8006310:	70fb      	strb	r3, [r7, #3]
 8006312:	460b      	mov	r3, r1
 8006314:	70bb      	strb	r3, [r7, #2]
 8006316:	4613      	mov	r3, r2
 8006318:	707b      	strb	r3, [r7, #1]
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
 800631a:	7d3b      	ldrb	r3, [r7, #20]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d017      	beq.n	8006354 <u8g2_draw_circle_section+0x54>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 8006324:	787a      	ldrb	r2, [r7, #1]
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	4413      	add	r3, r2
 800632a:	b2d9      	uxtb	r1, r3
 800632c:	7c3a      	ldrb	r2, [r7, #16]
 800632e:	78bb      	ldrb	r3, [r7, #2]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 ffa5 	bl	8007286 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
 800633c:	787a      	ldrb	r2, [r7, #1]
 800633e:	78bb      	ldrb	r3, [r7, #2]
 8006340:	4413      	add	r3, r2
 8006342:	b2d9      	uxtb	r1, r3
 8006344:	7c3a      	ldrb	r2, [r7, #16]
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	b2db      	uxtb	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 ff99 	bl	8007286 <u8g2_DrawPixel>
    }
    
    /* upper left */
    if ( option & U8G2_DRAW_UPPER_LEFT )
 8006354:	7d3b      	ldrb	r3, [r7, #20]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d017      	beq.n	800638e <u8g2_draw_circle_section+0x8e>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 800635e:	787a      	ldrb	r2, [r7, #1]
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	b2d9      	uxtb	r1, r3
 8006366:	7c3a      	ldrb	r2, [r7, #16]
 8006368:	78bb      	ldrb	r3, [r7, #2]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	b2db      	uxtb	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 ff88 	bl	8007286 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
 8006376:	787a      	ldrb	r2, [r7, #1]
 8006378:	78bb      	ldrb	r3, [r7, #2]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	b2d9      	uxtb	r1, r3
 800637e:	7c3a      	ldrb	r2, [r7, #16]
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	b2db      	uxtb	r3, r3
 8006386:	461a      	mov	r2, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 ff7c 	bl	8007286 <u8g2_DrawPixel>
    }
    
    /* lower right */
    if ( option & U8G2_DRAW_LOWER_RIGHT )
 800638e:	7d3b      	ldrb	r3, [r7, #20]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d017      	beq.n	80063c8 <u8g2_draw_circle_section+0xc8>
    {
      u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 8006398:	787a      	ldrb	r2, [r7, #1]
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	4413      	add	r3, r2
 800639e:	b2d9      	uxtb	r1, r3
 80063a0:	7c3a      	ldrb	r2, [r7, #16]
 80063a2:	78bb      	ldrb	r3, [r7, #2]
 80063a4:	4413      	add	r3, r2
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 ff6b 	bl	8007286 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
 80063b0:	787a      	ldrb	r2, [r7, #1]
 80063b2:	78bb      	ldrb	r3, [r7, #2]
 80063b4:	4413      	add	r3, r2
 80063b6:	b2d9      	uxtb	r1, r3
 80063b8:	7c3a      	ldrb	r2, [r7, #16]
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	4413      	add	r3, r2
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 ff5f 	bl	8007286 <u8g2_DrawPixel>
    }
    
    /* lower left */
    if ( option & U8G2_DRAW_LOWER_LEFT )
 80063c8:	7d3b      	ldrb	r3, [r7, #20]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d017      	beq.n	8006402 <u8g2_draw_circle_section+0x102>
    {
      u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 80063d2:	787a      	ldrb	r2, [r7, #1]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	b2d9      	uxtb	r1, r3
 80063da:	7c3a      	ldrb	r2, [r7, #16]
 80063dc:	78bb      	ldrb	r3, [r7, #2]
 80063de:	4413      	add	r3, r2
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	461a      	mov	r2, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 ff4e 	bl	8007286 <u8g2_DrawPixel>
      u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
 80063ea:	787a      	ldrb	r2, [r7, #1]
 80063ec:	78bb      	ldrb	r3, [r7, #2]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	b2d9      	uxtb	r1, r3
 80063f2:	7c3a      	ldrb	r2, [r7, #16]
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	4413      	add	r3, r2
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 ff42 	bl	8007286 <u8g2_DrawPixel>
    }
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <u8g2_draw_circle>:

static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b086      	sub	sp, #24
 800640e:	af02      	add	r7, sp, #8
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	4608      	mov	r0, r1
 8006414:	4611      	mov	r1, r2
 8006416:	461a      	mov	r2, r3
 8006418:	4603      	mov	r3, r0
 800641a:	70fb      	strb	r3, [r7, #3]
 800641c:	460b      	mov	r3, r1
 800641e:	70bb      	strb	r3, [r7, #2]
 8006420:	4613      	mov	r3, r2
 8006422:	707b      	strb	r3, [r7, #1]
    u8g2_int_t ddF_x;
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
    f -= rad;
 8006428:	7bfa      	ldrb	r2, [r7, #15]
 800642a:	787b      	ldrb	r3, [r7, #1]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	b2db      	uxtb	r3, r3
 8006430:	73fb      	strb	r3, [r7, #15]
    ddF_x = 1;
 8006432:	2301      	movs	r3, #1
 8006434:	73bb      	strb	r3, [r7, #14]
    ddF_y = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	737b      	strb	r3, [r7, #13]
    ddF_y -= rad;
 800643a:	7b7a      	ldrb	r2, [r7, #13]
 800643c:	787b      	ldrb	r3, [r7, #1]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	b2db      	uxtb	r3, r3
 8006442:	737b      	strb	r3, [r7, #13]
    ddF_y *= 2;
 8006444:	7b7b      	ldrb	r3, [r7, #13]
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	b2db      	uxtb	r3, r3
 800644a:	737b      	strb	r3, [r7, #13]
    x = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	733b      	strb	r3, [r7, #12]
    y = rad;
 8006450:	787b      	ldrb	r3, [r7, #1]
 8006452:	72fb      	strb	r3, [r7, #11]

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
 8006454:	78f8      	ldrb	r0, [r7, #3]
 8006456:	7afa      	ldrb	r2, [r7, #11]
 8006458:	7b39      	ldrb	r1, [r7, #12]
 800645a:	7e3b      	ldrb	r3, [r7, #24]
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	78bb      	ldrb	r3, [r7, #2]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	4603      	mov	r3, r0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7ff ff4b 	bl	8006300 <u8g2_draw_circle_section>
    
    while ( x < y )
 800646a:	e026      	b.n	80064ba <u8g2_draw_circle+0xb0>
    {
      if (f >= 0) 
 800646c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006470:	2b00      	cmp	r3, #0
 8006472:	db0b      	blt.n	800648c <u8g2_draw_circle+0x82>
      {
        y--;
 8006474:	7afb      	ldrb	r3, [r7, #11]
 8006476:	3b01      	subs	r3, #1
 8006478:	72fb      	strb	r3, [r7, #11]
        ddF_y += 2;
 800647a:	7b7b      	ldrb	r3, [r7, #13]
 800647c:	3302      	adds	r3, #2
 800647e:	b2db      	uxtb	r3, r3
 8006480:	737b      	strb	r3, [r7, #13]
        f += ddF_y;
 8006482:	7bfa      	ldrb	r2, [r7, #15]
 8006484:	7b7b      	ldrb	r3, [r7, #13]
 8006486:	4413      	add	r3, r2
 8006488:	b2db      	uxtb	r3, r3
 800648a:	73fb      	strb	r3, [r7, #15]
      }
      x++;
 800648c:	7b3b      	ldrb	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	733b      	strb	r3, [r7, #12]
      ddF_x += 2;
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	3302      	adds	r3, #2
 8006496:	b2db      	uxtb	r3, r3
 8006498:	73bb      	strb	r3, [r7, #14]
      f += ddF_x;
 800649a:	7bfa      	ldrb	r2, [r7, #15]
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	4413      	add	r3, r2
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	73fb      	strb	r3, [r7, #15]

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 80064a4:	78f8      	ldrb	r0, [r7, #3]
 80064a6:	7afa      	ldrb	r2, [r7, #11]
 80064a8:	7b39      	ldrb	r1, [r7, #12]
 80064aa:	7e3b      	ldrb	r3, [r7, #24]
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	78bb      	ldrb	r3, [r7, #2]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	4603      	mov	r3, r0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7ff ff23 	bl	8006300 <u8g2_draw_circle_section>
    while ( x < y )
 80064ba:	7b3a      	ldrb	r2, [r7, #12]
 80064bc:	7afb      	ldrb	r3, [r7, #11]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d3d4      	bcc.n	800646c <u8g2_draw_circle+0x62>
    }
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <u8g2_DrawCircle>:

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
 80064ca:	b590      	push	{r4, r7, lr}
 80064cc:	b085      	sub	sp, #20
 80064ce:	af02      	add	r7, sp, #8
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	4608      	mov	r0, r1
 80064d4:	4611      	mov	r1, r2
 80064d6:	461a      	mov	r2, r3
 80064d8:	4603      	mov	r3, r0
 80064da:	70fb      	strb	r3, [r7, #3]
 80064dc:	460b      	mov	r3, r1
 80064de:	70bb      	strb	r3, [r7, #2]
 80064e0:	4613      	mov	r3, r2
 80064e2:	707b      	strb	r3, [r7, #1]
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	787b      	ldrb	r3, [r7, #1]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	b2d9      	uxtb	r1, r3
 80064ec:	78ba      	ldrb	r2, [r7, #2]
 80064ee:	787b      	ldrb	r3, [r7, #1]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	b2d8      	uxtb	r0, r3
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	787b      	ldrb	r3, [r7, #1]
 80064f8:	4413      	add	r3, r2
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	3301      	adds	r3, #1
 80064fe:	b2dc      	uxtb	r4, r3
 8006500:	78ba      	ldrb	r2, [r7, #2]
 8006502:	787b      	ldrb	r3, [r7, #1]
 8006504:	4413      	add	r3, r2
 8006506:	b2db      	uxtb	r3, r3
 8006508:	3301      	adds	r3, #1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	4623      	mov	r3, r4
 8006510:	4602      	mov	r2, r0
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 ff1d 	bl	8007352 <u8g2_IsIntersection>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <u8g2_DrawCircle+0x68>
  }
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
 800651e:	7878      	ldrb	r0, [r7, #1]
 8006520:	78ba      	ldrb	r2, [r7, #2]
 8006522:	78f9      	ldrb	r1, [r7, #3]
 8006524:	7e3b      	ldrb	r3, [r7, #24]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	4603      	mov	r3, r0
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff ff6d 	bl	800640a <u8g2_draw_circle>
 8006530:	e000      	b.n	8006534 <u8g2_DrawCircle+0x6a>
      return;
 8006532:	bf00      	nop
}
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	bd90      	pop	{r4, r7, pc}
	...

0800653c <u8g2_m_16_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2208      	movs	r2, #8
 8006548:	701a      	strb	r2, [r3, #0]
  return buf;
 800654a:	4b03      	ldr	r3, [pc, #12]	; (8006558 <u8g2_m_16_8_f+0x1c>)
  #endif
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	20000224 	.word	0x20000224

0800655c <u8g2_Setup_ssd1306_i2c_128x64_vcomh0_f>:
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
  buf = u8g2_m_16_8_f(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
void u8g2_Setup_ssd1306_i2c_128x64_vcomh0_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af02      	add	r7, sp, #8
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_vcomh0, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a0b      	ldr	r2, [pc, #44]	; (80065a0 <u8g2_Setup_ssd1306_i2c_128x64_vcomh0_f+0x44>)
 8006572:	490c      	ldr	r1, [pc, #48]	; (80065a4 <u8g2_Setup_ssd1306_i2c_128x64_vcomh0_f+0x48>)
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 fd49 	bl	800800c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800657a:	f107 0313 	add.w	r3, r7, #19
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff ffdc 	bl	800653c <u8g2_m_16_8_f>
 8006584:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8006586:	7cfa      	ldrb	r2, [r7, #19]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	4b06      	ldr	r3, [pc, #24]	; (80065a8 <u8g2_Setup_ssd1306_i2c_128x64_vcomh0_f+0x4c>)
 800658e:	6979      	ldr	r1, [r7, #20]
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f001 f85c 	bl	800764e <u8g2_SetupBuffer>
}
 8006596:	bf00      	nop
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	08007b45 	.word	0x08007b45
 80065a4:	08007da1 	.word	0x08007da1
 80065a8:	080074d5 	.word	0x080074d5

080065ac <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	781b      	ldrb	r3, [r3, #0]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr

080065ce <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80065da:	78fb      	ldrb	r3, [r7, #3]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	81fb      	strh	r3, [r7, #14]
    font++;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3301      	adds	r3, #1
 80065ec:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80065ee:	89fb      	ldrh	r3, [r7, #14]
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	89fb      	ldrh	r3, [r7, #14]
 80065fc:	4413      	add	r3, r2
 80065fe:	81fb      	strh	r3, [r7, #14]
    return pos;
 8006600:	89fb      	ldrh	r3, [r7, #14]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8006616:	2100      	movs	r1, #0
 8006618:	6838      	ldr	r0, [r7, #0]
 800661a:	f7ff ffc7 	bl	80065ac <u8g2_font_get_byte>
 800661e:	4603      	mov	r3, r0
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8006626:	2101      	movs	r1, #1
 8006628:	6838      	ldr	r0, [r7, #0]
 800662a:	f7ff ffbf 	bl	80065ac <u8g2_font_get_byte>
 800662e:	4603      	mov	r3, r0
 8006630:	461a      	mov	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8006636:	2102      	movs	r1, #2
 8006638:	6838      	ldr	r0, [r7, #0]
 800663a:	f7ff ffb7 	bl	80065ac <u8g2_font_get_byte>
 800663e:	4603      	mov	r3, r0
 8006640:	461a      	mov	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8006646:	2103      	movs	r1, #3
 8006648:	6838      	ldr	r0, [r7, #0]
 800664a:	f7ff ffaf 	bl	80065ac <u8g2_font_get_byte>
 800664e:	4603      	mov	r3, r0
 8006650:	461a      	mov	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8006656:	2104      	movs	r1, #4
 8006658:	6838      	ldr	r0, [r7, #0]
 800665a:	f7ff ffa7 	bl	80065ac <u8g2_font_get_byte>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8006666:	2105      	movs	r1, #5
 8006668:	6838      	ldr	r0, [r7, #0]
 800666a:	f7ff ff9f 	bl	80065ac <u8g2_font_get_byte>
 800666e:	4603      	mov	r3, r0
 8006670:	461a      	mov	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8006676:	2106      	movs	r1, #6
 8006678:	6838      	ldr	r0, [r7, #0]
 800667a:	f7ff ff97 	bl	80065ac <u8g2_font_get_byte>
 800667e:	4603      	mov	r3, r0
 8006680:	461a      	mov	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8006686:	2107      	movs	r1, #7
 8006688:	6838      	ldr	r0, [r7, #0]
 800668a:	f7ff ff8f 	bl	80065ac <u8g2_font_get_byte>
 800668e:	4603      	mov	r3, r0
 8006690:	461a      	mov	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8006696:	2108      	movs	r1, #8
 8006698:	6838      	ldr	r0, [r7, #0]
 800669a:	f7ff ff87 	bl	80065ac <u8g2_font_get_byte>
 800669e:	4603      	mov	r3, r0
 80066a0:	461a      	mov	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80066a6:	2109      	movs	r1, #9
 80066a8:	6838      	ldr	r0, [r7, #0]
 80066aa:	f7ff ff7f 	bl	80065ac <u8g2_font_get_byte>
 80066ae:	4603      	mov	r3, r0
 80066b0:	b25a      	sxtb	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80066b6:	210a      	movs	r1, #10
 80066b8:	6838      	ldr	r0, [r7, #0]
 80066ba:	f7ff ff77 	bl	80065ac <u8g2_font_get_byte>
 80066be:	4603      	mov	r3, r0
 80066c0:	b25a      	sxtb	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80066c6:	210b      	movs	r1, #11
 80066c8:	6838      	ldr	r0, [r7, #0]
 80066ca:	f7ff ff6f 	bl	80065ac <u8g2_font_get_byte>
 80066ce:	4603      	mov	r3, r0
 80066d0:	b25a      	sxtb	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80066d6:	210c      	movs	r1, #12
 80066d8:	6838      	ldr	r0, [r7, #0]
 80066da:	f7ff ff67 	bl	80065ac <u8g2_font_get_byte>
 80066de:	4603      	mov	r3, r0
 80066e0:	b25a      	sxtb	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80066e6:	210d      	movs	r1, #13
 80066e8:	6838      	ldr	r0, [r7, #0]
 80066ea:	f7ff ff5f 	bl	80065ac <u8g2_font_get_byte>
 80066ee:	4603      	mov	r3, r0
 80066f0:	b25a      	sxtb	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80066f6:	210e      	movs	r1, #14
 80066f8:	6838      	ldr	r0, [r7, #0]
 80066fa:	f7ff ff57 	bl	80065ac <u8g2_font_get_byte>
 80066fe:	4603      	mov	r3, r0
 8006700:	b25a      	sxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8006706:	210f      	movs	r1, #15
 8006708:	6838      	ldr	r0, [r7, #0]
 800670a:	f7ff ff4f 	bl	80065ac <u8g2_font_get_byte>
 800670e:	4603      	mov	r3, r0
 8006710:	b25a      	sxtb	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8006716:	2110      	movs	r1, #16
 8006718:	6838      	ldr	r0, [r7, #0]
 800671a:	f7ff ff47 	bl	80065ac <u8g2_font_get_byte>
 800671e:	4603      	mov	r3, r0
 8006720:	b25a      	sxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8006726:	2111      	movs	r1, #17
 8006728:	6838      	ldr	r0, [r7, #0]
 800672a:	f7ff ff50 	bl	80065ce <u8g2_font_get_word>
 800672e:	4603      	mov	r3, r0
 8006730:	461a      	mov	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8006736:	2113      	movs	r1, #19
 8006738:	6838      	ldr	r0, [r7, #0]
 800673a:	f7ff ff48 	bl	80065ce <u8g2_font_get_word>
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8006746:	2115      	movs	r1, #21
 8006748:	6838      	ldr	r0, [r7, #0]
 800674a:	f7ff ff40 	bl	80065ce <u8g2_font_get_word>
 800674e:	4603      	mov	r3, r0
 8006750:	461a      	mov	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	82da      	strh	r2, [r3, #22]
#endif
}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7a9b      	ldrb	r3, [r3, #10]
 800676e:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8006778:	7bfa      	ldrb	r2, [r7, #15]
 800677a:	7b7b      	ldrb	r3, [r7, #13]
 800677c:	fa42 f303 	asr.w	r3, r2, r3
 8006780:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8006782:	7b7b      	ldrb	r3, [r7, #13]
 8006784:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8006786:	7bba      	ldrb	r2, [r7, #14]
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	4413      	add	r3, r2
 800678c:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	2b07      	cmp	r3, #7
 8006792:	d91a      	bls.n	80067ca <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8006794:	2308      	movs	r3, #8
 8006796:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8006798:	7b3a      	ldrb	r2, [r7, #12]
 800679a:	7b7b      	ldrb	r3, [r7, #13]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	7b3b      	ldrb	r3, [r7, #12]
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	b25a      	sxtb	r2, r3
 80067ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067be:	4313      	orrs	r3, r2
 80067c0:	b25b      	sxtb	r3, r3
 80067c2:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	3b08      	subs	r3, #8
 80067c8:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80067ca:	78fb      	ldrb	r3, [r7, #3]
 80067cc:	f04f 32ff 	mov.w	r2, #4294967295
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	43db      	mvns	r3, r3
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	4013      	ands	r3, r2
 80067de:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	7bba      	ldrb	r2, [r7, #14]
 80067e4:	729a      	strb	r2, [r3, #10]
  return val;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b084      	sub	sp, #16
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	460b      	mov	r3, r1
 80067fc:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	4619      	mov	r1, r3
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff ffab 	bl	800675e <u8g2_font_decode_get_unsigned_bits>
 8006808:	4603      	mov	r3, r0
 800680a:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800680c:	2301      	movs	r3, #1
 800680e:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	3b01      	subs	r3, #1
 8006814:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8006816:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	fa02 f303 	lsl.w	r3, r2, r3
 8006820:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8006822:	7bfa      	ldrb	r2, [r7, #15]
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	b2db      	uxtb	r3, r3
 800682a:	73fb      	strb	r3, [r7, #15]
  return v;
 800682c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8006838:	b490      	push	{r4, r7}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	4604      	mov	r4, r0
 8006840:	4608      	mov	r0, r1
 8006842:	4611      	mov	r1, r2
 8006844:	461a      	mov	r2, r3
 8006846:	4623      	mov	r3, r4
 8006848:	71fb      	strb	r3, [r7, #7]
 800684a:	4603      	mov	r3, r0
 800684c:	71bb      	strb	r3, [r7, #6]
 800684e:	460b      	mov	r3, r1
 8006850:	717b      	strb	r3, [r7, #5]
 8006852:	4613      	mov	r3, r2
 8006854:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8006856:	793b      	ldrb	r3, [r7, #4]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d008      	beq.n	800686e <u8g2_add_vector_y+0x36>
 800685c:	2b02      	cmp	r3, #2
 800685e:	d00b      	beq.n	8006878 <u8g2_add_vector_y+0x40>
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10e      	bne.n	8006882 <u8g2_add_vector_y+0x4a>
  {
    case 0:
      dy += y;
 8006864:	797a      	ldrb	r2, [r7, #5]
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	4413      	add	r3, r2
 800686a:	71fb      	strb	r3, [r7, #7]
      break;
 800686c:	e00e      	b.n	800688c <u8g2_add_vector_y+0x54>
    case 1:
      dy += x;
 800686e:	79ba      	ldrb	r2, [r7, #6]
 8006870:	79fb      	ldrb	r3, [r7, #7]
 8006872:	4413      	add	r3, r2
 8006874:	71fb      	strb	r3, [r7, #7]
      break;
 8006876:	e009      	b.n	800688c <u8g2_add_vector_y+0x54>
    case 2:
      dy -= y;
 8006878:	797b      	ldrb	r3, [r7, #5]
 800687a:	79fa      	ldrb	r2, [r7, #7]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	71fb      	strb	r3, [r7, #7]
      break;
 8006880:	e004      	b.n	800688c <u8g2_add_vector_y+0x54>
    default:
      dy -= x;
 8006882:	79bb      	ldrb	r3, [r7, #6]
 8006884:	79fa      	ldrb	r2, [r7, #7]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	71fb      	strb	r3, [r7, #7]
      break;      
 800688a:	bf00      	nop
  }
  return dy;
 800688c:	79fb      	ldrb	r3, [r7, #7]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bc90      	pop	{r4, r7}
 8006896:	4770      	bx	lr

08006898 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8006898:	b490      	push	{r4, r7}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	4604      	mov	r4, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	461a      	mov	r2, r3
 80068a6:	4623      	mov	r3, r4
 80068a8:	71fb      	strb	r3, [r7, #7]
 80068aa:	4603      	mov	r3, r0
 80068ac:	71bb      	strb	r3, [r7, #6]
 80068ae:	460b      	mov	r3, r1
 80068b0:	717b      	strb	r3, [r7, #5]
 80068b2:	4613      	mov	r3, r2
 80068b4:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80068b6:	793b      	ldrb	r3, [r7, #4]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d008      	beq.n	80068ce <u8g2_add_vector_x+0x36>
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d00b      	beq.n	80068d8 <u8g2_add_vector_x+0x40>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10e      	bne.n	80068e2 <u8g2_add_vector_x+0x4a>
  {
    case 0:
      dx += x;
 80068c4:	79ba      	ldrb	r2, [r7, #6]
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	4413      	add	r3, r2
 80068ca:	71fb      	strb	r3, [r7, #7]
      break;
 80068cc:	e00e      	b.n	80068ec <u8g2_add_vector_x+0x54>
    case 1:
      dx -= y;
 80068ce:	797b      	ldrb	r3, [r7, #5]
 80068d0:	79fa      	ldrb	r2, [r7, #7]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	71fb      	strb	r3, [r7, #7]
      break;
 80068d6:	e009      	b.n	80068ec <u8g2_add_vector_x+0x54>
    case 2:
      dx -= x;
 80068d8:	79bb      	ldrb	r3, [r7, #6]
 80068da:	79fa      	ldrb	r2, [r7, #7]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	71fb      	strb	r3, [r7, #7]
      break;
 80068e0:	e004      	b.n	80068ec <u8g2_add_vector_x+0x54>
    default:
      dx += y;
 80068e2:	797a      	ldrb	r2, [r7, #5]
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	4413      	add	r3, r2
 80068e8:	71fb      	strb	r3, [r7, #7]
      break;      
 80068ea:	bf00      	nop
  }
  return dx;
 80068ec:	79fb      	ldrb	r3, [r7, #7]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc90      	pop	{r4, r7}
 80068f6:	4770      	bx	lr

080068f8 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	460b      	mov	r3, r1
 8006902:	70fb      	strb	r3, [r7, #3]
 8006904:	4613      	mov	r3, r2
 8006906:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3358      	adds	r3, #88	; 0x58
 800690c:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 800690e:	78fb      	ldrb	r3, [r7, #3]
 8006910:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8006918:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8006920:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006928:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800692a:	7bfa      	ldrb	r2, [r7, #15]
 800692c:	7d7b      	ldrb	r3, [r7, #21]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8006936:	7dfa      	ldrb	r2, [r7, #23]
 8006938:	7bfb      	ldrb	r3, [r7, #15]
 800693a:	429a      	cmp	r2, r3
 800693c:	d201      	bcs.n	8006942 <u8g2_font_decode_len+0x4a>
      current = cnt;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
 8006940:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	791b      	ldrb	r3, [r3, #4]
 8006946:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	795b      	ldrb	r3, [r3, #5]
 800694c:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800694e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8006952:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	7b9b      	ldrb	r3, [r3, #14]
 800695a:	7bb8      	ldrb	r0, [r7, #14]
 800695c:	f7ff ff9c 	bl	8006898 <u8g2_add_vector_x>
 8006960:	4603      	mov	r3, r0
 8006962:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8006964:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8006968:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	7b9b      	ldrb	r3, [r3, #14]
 8006970:	7b78      	ldrb	r0, [r7, #13]
 8006972:	f7ff ff61 	bl	8006838 <u8g2_add_vector_y>
 8006976:	4603      	mov	r3, r0
 8006978:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800697a:	78bb      	ldrb	r3, [r7, #2]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00f      	beq.n	80069a0 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	7b1a      	ldrb	r2, [r3, #12]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	7b9b      	ldrb	r3, [r3, #14]
 800698e:	7db8      	ldrb	r0, [r7, #22]
 8006990:	7b7a      	ldrb	r2, [r7, #13]
 8006992:	7bb9      	ldrb	r1, [r7, #14]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	4603      	mov	r3, r0
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fbf1 	bl	8007180 <u8g2_DrawHVLine>
 800699e:	e012      	b.n	80069c6 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	7adb      	ldrb	r3, [r3, #11]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10e      	bne.n	80069c6 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	7b5a      	ldrb	r2, [r3, #13]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	7b9b      	ldrb	r3, [r3, #14]
 80069b6:	7db8      	ldrb	r0, [r7, #22]
 80069b8:	7b7a      	ldrb	r2, [r7, #13]
 80069ba:	7bb9      	ldrb	r1, [r7, #14]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4603      	mov	r3, r0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fbdd 	bl	8007180 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80069c6:	7dfa      	ldrb	r2, [r7, #23]
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d309      	bcc.n	80069e2 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 80069ce:	7dfa      	ldrb	r2, [r7, #23]
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	757b      	strb	r3, [r7, #21]
    ly++;
 80069da:	7d3b      	ldrb	r3, [r7, #20]
 80069dc:	3301      	adds	r3, #1
 80069de:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80069e0:	e79f      	b.n	8006922 <u8g2_font_decode_len+0x2a>
      break;
 80069e2:	bf00      	nop
  }
  lx += cnt;
 80069e4:	7d7a      	ldrb	r2, [r7, #21]
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	4413      	add	r3, r2
 80069ea:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80069ec:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 80069f4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	71da      	strb	r2, [r3, #7]
  
}
 80069fc:	bf00      	nop
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3358      	adds	r3, #88	; 0x58
 8006a12:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8006a26:	4619      	mov	r1, r3
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f7ff fe98 	bl	800675e <u8g2_font_decode_get_unsigned_bits>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	b25a      	sxtb	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff fe8d 	bl	800675e <u8g2_font_decode_get_unsigned_bits>
 8006a44:	4603      	mov	r3, r0
 8006a46:	b25a      	sxtb	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	7b1b      	ldrb	r3, [r3, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	bf0c      	ite	eq
 8006a5e:	2301      	moveq	r3, #1
 8006a60:	2300      	movne	r3, #0
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	735a      	strb	r2, [r3, #13]
}
 8006a6a:	bf00      	nop
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	3358      	adds	r3, #88	; 0x58
 8006a82:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7ff ffbc 	bl	8006a04 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006a92:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6938      	ldr	r0, [r7, #16]
 8006a9e:	f7ff fea8 	bl	80067f2 <u8g2_font_decode_get_signed_bits>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8006aac:	4619      	mov	r1, r3
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f7ff fe9f 	bl	80067f2 <u8g2_font_decode_get_signed_bits>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6938      	ldr	r0, [r7, #16]
 8006ac2:	f7ff fe96 	bl	80067f2 <u8g2_font_decode_get_signed_bits>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f340 80cf 	ble.w	8006c74 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	7918      	ldrb	r0, [r3, #4]
 8006ada:	7bfa      	ldrb	r2, [r7, #15]
 8006adc:	7b7b      	ldrb	r3, [r7, #13]
 8006ade:	4413      	add	r3, r2
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	425b      	negs	r3, r3
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	b25a      	sxtb	r2, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	7b9b      	ldrb	r3, [r3, #14]
 8006aec:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8006af0:	f7ff fed2 	bl	8006898 <u8g2_add_vector_x>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	7958      	ldrb	r0, [r3, #5]
 8006b00:	7bfa      	ldrb	r2, [r7, #15]
 8006b02:	7b7b      	ldrb	r3, [r7, #13]
 8006b04:	4413      	add	r3, r2
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	425b      	negs	r3, r3
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	b25a      	sxtb	r2, r3
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	7b9b      	ldrb	r3, [r3, #14]
 8006b12:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8006b16:	f7ff fe8f 	bl	8006838 <u8g2_add_vector_y>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	791b      	ldrb	r3, [r3, #4]
 8006b26:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	795b      	ldrb	r3, [r3, #5]
 8006b2c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8006b32:	7d7b      	ldrb	r3, [r7, #21]
 8006b34:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	7b9b      	ldrb	r3, [r3, #14]
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d852      	bhi.n	8006be4 <u8g2_font_decode_glyph+0x170>
 8006b3e:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <u8g2_font_decode_glyph+0xd0>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b91 	.word	0x08006b91
 8006b50:	08006bc1 	.word	0x08006bc1
      {
	case 0:
	    x1 += decode->glyph_width;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	7dbb      	ldrb	r3, [r7, #22]
 8006b5e:	4413      	add	r3, r2
 8006b60:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8006b62:	7bfa      	ldrb	r2, [r7, #15]
 8006b64:	7d3b      	ldrb	r3, [r7, #20]
 8006b66:	4413      	add	r3, r2
 8006b68:	753b      	strb	r3, [r7, #20]
	    break;
 8006b6a:	e03b      	b.n	8006be4 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	7dfa      	ldrb	r2, [r7, #23]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	3301      	adds	r3, #1
 8006b78:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8006b7a:	7dbb      	ldrb	r3, [r7, #22]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	7d3b      	ldrb	r3, [r7, #20]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	753b      	strb	r3, [r7, #20]
	    break;
 8006b8e:	e029      	b.n	8006be4 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	7dfa      	ldrb	r2, [r7, #23]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006b9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8006ba4:	7dbb      	ldrb	r3, [r7, #22]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8006baa:	7bfb      	ldrb	r3, [r7, #15]
 8006bac:	7d7a      	ldrb	r2, [r7, #21]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006bb2:	7d7b      	ldrb	r3, [r7, #21]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006bb8:	7d3b      	ldrb	r3, [r7, #20]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	753b      	strb	r3, [r7, #20]
	    break;	  
 8006bbe:	e011      	b.n	8006be4 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8006bc0:	7bfa      	ldrb	r2, [r7, #15]
 8006bc2:	7dbb      	ldrb	r3, [r7, #22]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	7d7a      	ldrb	r2, [r7, #21]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8006bd6:	7d7b      	ldrb	r3, [r7, #21]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	757b      	strb	r3, [r7, #21]
	    y1++;
 8006bdc:	7d3b      	ldrb	r3, [r7, #20]
 8006bde:	3301      	adds	r3, #1
 8006be0:	753b      	strb	r3, [r7, #20]
	    break;	  
 8006be2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8006be4:	7db8      	ldrb	r0, [r7, #22]
 8006be6:	7d7a      	ldrb	r2, [r7, #21]
 8006be8:	7df9      	ldrb	r1, [r7, #23]
 8006bea:	7d3b      	ldrb	r3, [r7, #20]
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	4603      	mov	r3, r0
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fbae 	bl	8007352 <u8g2_IsIntersection>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <u8g2_font_decode_glyph+0x18e>
	return d;
 8006bfc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8006c00:	e03a      	b.n	8006c78 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2200      	movs	r2, #0
 8006c06:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8006c14:	4619      	mov	r1, r3
 8006c16:	6938      	ldr	r0, [r7, #16]
 8006c18:	f7ff fda1 	bl	800675e <u8g2_font_decode_get_unsigned_bits>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8006c26:	4619      	mov	r1, r3
 8006c28:	6938      	ldr	r0, [r7, #16]
 8006c2a:	f7ff fd98 	bl	800675e <u8g2_font_decode_get_unsigned_bits>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8006c32:	7afb      	ldrb	r3, [r7, #11]
 8006c34:	2200      	movs	r2, #0
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff fe5d 	bl	80068f8 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8006c3e:	7abb      	ldrb	r3, [r7, #10]
 8006c40:	2201      	movs	r2, #1
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff fe57 	bl	80068f8 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	6938      	ldr	r0, [r7, #16]
 8006c4e:	f7ff fd86 	bl	800675e <u8g2_font_decode_get_unsigned_bits>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1ec      	bne.n	8006c32 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8006c5e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	dd00      	ble.n	8006c68 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8006c66:	e7d2      	b.n	8006c0e <u8g2_font_decode_glyph+0x19a>
	break;
 8006c68:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	7b1a      	ldrb	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8006c74:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c90:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	3317      	adds	r3, #23
 8006c96:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8006c98:	887b      	ldrh	r3, [r7, #2]
 8006c9a:	2bff      	cmp	r3, #255	; 0xff
 8006c9c:	d82a      	bhi.n	8006cf4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	2b60      	cmp	r3, #96	; 0x60
 8006ca2:	d907      	bls.n	8006cb4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006caa:	461a      	mov	r2, r3
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	4413      	add	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	e009      	b.n	8006cc8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8006cb4:	887b      	ldrh	r3, [r7, #2]
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d906      	bls.n	8006cc8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d04e      	beq.n	8006d70 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	887a      	ldrh	r2, [r7, #2]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d102      	bne.n	8006ce4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	e049      	b.n	8006d78 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	461a      	mov	r2, r3
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	4413      	add	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8006cf2:	e7e9      	b.n	8006cc8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4413      	add	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8006d06:	2100      	movs	r1, #0
 8006d08:	6938      	ldr	r0, [r7, #16]
 8006d0a:	f7ff fc60 	bl	80065ce <u8g2_font_get_word>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	4413      	add	r3, r2
 8006d16:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8006d18:	2102      	movs	r1, #2
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f7ff fc57 	bl	80065ce <u8g2_font_get_word>
 8006d20:	4603      	mov	r3, r0
 8006d22:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	3304      	adds	r3, #4
 8006d28:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8006d2a:	89fa      	ldrh	r2, [r7, #14]
 8006d2c:	887b      	ldrh	r3, [r7, #2]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d3e9      	bcc.n	8006d06 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	3301      	adds	r3, #1
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	89fb      	ldrh	r3, [r7, #14]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8006d4c:	89fb      	ldrh	r3, [r7, #14]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d010      	beq.n	8006d74 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8006d52:	89fa      	ldrh	r2, [r7, #14]
 8006d54:	887b      	ldrh	r3, [r7, #2]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d102      	bne.n	8006d60 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	3303      	adds	r3, #3
 8006d5e:	e00b      	b.n	8006d78 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	3302      	adds	r3, #2
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8006d6e:	e7e0      	b.n	8006d32 <u8g2_font_get_glyph_data+0xb2>
	break;
 8006d70:	bf00      	nop
 8006d72:	e000      	b.n	8006d76 <u8g2_font_get_glyph_data+0xf6>
	break;
 8006d74:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	4608      	mov	r0, r1
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4603      	mov	r3, r0
 8006d90:	70fb      	strb	r3, [r7, #3]
 8006d92:	460b      	mov	r3, r1
 8006d94:	70bb      	strb	r3, [r7, #2]
 8006d96:	4613      	mov	r3, r2
 8006d98:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	78fa      	ldrb	r2, [r7, #3]
 8006da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	78ba      	ldrb	r2, [r7, #2]
 8006daa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8006dae:	883b      	ldrh	r3, [r7, #0]
 8006db0:	4619      	mov	r1, r3
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7ff ff64 	bl	8006c80 <u8g2_font_get_glyph_data>
 8006db8:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8006dc0:	68b9      	ldr	r1, [r7, #8]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff fe56 	bl	8006a74 <u8g2_font_decode_glyph>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	4608      	mov	r0, r1
 8006de2:	4611      	mov	r1, r2
 8006de4:	461a      	mov	r2, r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	70fb      	strb	r3, [r7, #3]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70bb      	strb	r3, [r7, #2]
 8006dee:	4613      	mov	r3, r2
 8006df0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006df8:	2b03      	cmp	r3, #3
 8006dfa:	d833      	bhi.n	8006e64 <u8g2_DrawGlyph+0x8c>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <u8g2_DrawGlyph+0x2c>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e15 	.word	0x08006e15
 8006e08:	08006e29 	.word	0x08006e29
 8006e0c:	08006e3d 	.word	0x08006e3d
 8006e10:	08006e51 	.word	0x08006e51
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	4798      	blx	r3
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	78bb      	ldrb	r3, [r7, #2]
 8006e22:	4413      	add	r3, r2
 8006e24:	70bb      	strb	r3, [r7, #2]
      break;
 8006e26:	e01d      	b.n	8006e64 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
 8006e30:	4603      	mov	r3, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	1a9b      	subs	r3, r3, r2
 8006e38:	70fb      	strb	r3, [r7, #3]
      break;
 8006e3a:	e013      	b.n	8006e64 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	461a      	mov	r2, r3
 8006e48:	78bb      	ldrb	r3, [r7, #2]
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	70bb      	strb	r3, [r7, #2]
      break;
 8006e4e:	e009      	b.n	8006e64 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	4798      	blx	r3
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	4413      	add	r3, r2
 8006e60:	70fb      	strb	r3, [r7, #3]
      break;
 8006e62:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8006e64:	883b      	ldrh	r3, [r7, #0]
 8006e66:	78ba      	ldrb	r2, [r7, #2]
 8006e68:	78f9      	ldrb	r1, [r7, #3]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff ff88 	bl	8006d80 <u8g2_font_draw_glyph>
 8006e70:	4603      	mov	r3, r0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3708      	adds	r7, #8
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop

08006e7c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	607b      	str	r3, [r7, #4]
 8006e86:	460b      	mov	r3, r1
 8006e88:	72fb      	strb	r3, [r7, #11]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 fd30 	bl	80078f4 <u8x8_utf8_init>
  sum = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	4611      	mov	r1, r2
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	4798      	blx	r3
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8006eaa:	8abb      	ldrh	r3, [r7, #20]
 8006eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d038      	beq.n	8006f26 <u8g2_draw_string+0xaa>
      break;
    str++;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8006eba:	8abb      	ldrh	r3, [r7, #20]
 8006ebc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d0e9      	beq.n	8006e98 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8006ec4:	8abb      	ldrh	r3, [r7, #20]
 8006ec6:	7aba      	ldrb	r2, [r7, #10]
 8006ec8:	7af9      	ldrb	r1, [r7, #11]
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7ff ff84 	bl	8006dd8 <u8g2_DrawGlyph>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d81e      	bhi.n	8006f1c <u8g2_draw_string+0xa0>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <u8g2_draw_string+0x68>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006eff 	.word	0x08006eff
 8006eec:	08006f09 	.word	0x08006f09
 8006ef0:	08006f13 	.word	0x08006f13
      {
	case 0:
	  x += delta;
 8006ef4:	7afa      	ldrb	r2, [r7, #11]
 8006ef6:	7cfb      	ldrb	r3, [r7, #19]
 8006ef8:	4413      	add	r3, r2
 8006efa:	72fb      	strb	r3, [r7, #11]
	  break;
 8006efc:	e00e      	b.n	8006f1c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8006efe:	7aba      	ldrb	r2, [r7, #10]
 8006f00:	7cfb      	ldrb	r3, [r7, #19]
 8006f02:	4413      	add	r3, r2
 8006f04:	72bb      	strb	r3, [r7, #10]
	  break;
 8006f06:	e009      	b.n	8006f1c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8006f08:	7afa      	ldrb	r2, [r7, #11]
 8006f0a:	7cfb      	ldrb	r3, [r7, #19]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	72fb      	strb	r3, [r7, #11]
	  break;
 8006f10:	e004      	b.n	8006f1c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8006f12:	7aba      	ldrb	r2, [r7, #10]
 8006f14:	7cfb      	ldrb	r3, [r7, #19]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	72bb      	strb	r3, [r7, #10]
	  break;
 8006f1a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8006f1c:	7dfa      	ldrb	r2, [r7, #23]
 8006f1e:	7cfb      	ldrb	r3, [r7, #19]
 8006f20:	4413      	add	r3, r2
 8006f22:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8006f24:	e7b8      	b.n	8006e98 <u8g2_draw_string+0x1c>
      break;
 8006f26:	bf00      	nop
    }
  }
  return sum;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop

08006f34 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	72fb      	strb	r3, [r7, #11]
 8006f42:	4613      	mov	r3, r2
 8006f44:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	4a06      	ldr	r2, [pc, #24]	; (8006f64 <u8g2_DrawStr+0x30>)
 8006f4a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8006f4c:	7aba      	ldrb	r2, [r7, #10]
 8006f4e:	7af9      	ldrb	r1, [r7, #11]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f7ff ff92 	bl	8006e7c <u8g2_draw_string>
 8006f58:	4603      	mov	r3, r0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	0800790f 	.word	0x0800790f

08006f68 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d05d      	beq.n	8007034 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d04d      	beq.n	8007036 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d11c      	bne.n	8006fde <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	da05      	bge.n	8006fc0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	dd32      	ble.n	8007036 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8006fdc:	e02b      	b.n	8007036 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8006fec:	4619      	mov	r1, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8006ff4:	440b      	add	r3, r1
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	da0d      	bge.n	8007016 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8007000:	b2da      	uxtb	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8007008:	b2db      	uxtb	r3, r3
 800700a:	4413      	add	r3, r2
 800700c:	b2db      	uxtb	r3, r3
 800700e:	b25a      	sxtb	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8007022:	429a      	cmp	r2, r3
 8007024:	dd07      	ble.n	8007036 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8007032:	e000      	b.n	8007036 <u8g2_UpdateRefHeight+0xce>
    return;
 8007034:	bf00      	nop
  }  
}
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr

0800703e <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  return 0;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr
	...

08007054 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a03      	ldr	r2, [pc, #12]	; (800706c <u8g2_SetFontPosBaseline+0x18>)
 8007060:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	bc80      	pop	{r7}
 800706a:	4770      	bx	lr
 800706c:	0800703f 	.word	0x0800703f

08007070 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d00b      	beq.n	800709c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3368      	adds	r3, #104	; 0x68
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fabb 	bl	800660c <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff ff66 	bl	8006f68 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800709c:	bf00      	nop
 800709e:	3708      	adds	r7, #8
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	4611      	mov	r1, r2
 80070b0:	461a      	mov	r2, r3
 80070b2:	460b      	mov	r3, r1
 80070b4:	71fb      	strb	r3, [r7, #7]
 80070b6:	4613      	mov	r3, r2
 80070b8:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80070c0:	7dfb      	ldrb	r3, [r7, #23]
 80070c2:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	781a      	ldrb	r2, [r3, #0]
 80070c8:	7dbb      	ldrb	r3, [r7, #22]
 80070ca:	4413      	add	r3, r2
 80070cc:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80070ce:	7dfa      	ldrb	r2, [r7, #23]
 80070d0:	7dbb      	ldrb	r3, [r7, #22]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d90b      	bls.n	80070ee <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80070d6:	7dfa      	ldrb	r2, [r7, #23]
 80070d8:	79bb      	ldrb	r3, [r7, #6]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d205      	bcs.n	80070ea <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80070de:	79bb      	ldrb	r3, [r7, #6]
 80070e0:	75bb      	strb	r3, [r7, #22]
      b--;
 80070e2:	7dbb      	ldrb	r3, [r7, #22]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	75bb      	strb	r3, [r7, #22]
 80070e8:	e001      	b.n	80070ee <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80070ee:	7dfa      	ldrb	r2, [r7, #23]
 80070f0:	79bb      	ldrb	r3, [r7, #6]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d301      	bcc.n	80070fa <u8g2_clip_intersection2+0x56>
    return 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	e01c      	b.n	8007134 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80070fa:	7dba      	ldrb	r2, [r7, #22]
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d801      	bhi.n	8007106 <u8g2_clip_intersection2+0x62>
    return 0;
 8007102:	2300      	movs	r3, #0
 8007104:	e016      	b.n	8007134 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8007106:	7dfa      	ldrb	r2, [r7, #23]
 8007108:	79fb      	ldrb	r3, [r7, #7]
 800710a:	429a      	cmp	r2, r3
 800710c:	d201      	bcs.n	8007112 <u8g2_clip_intersection2+0x6e>
    a = c;
 800710e:	79fb      	ldrb	r3, [r7, #7]
 8007110:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8007112:	7dba      	ldrb	r2, [r7, #22]
 8007114:	79bb      	ldrb	r3, [r7, #6]
 8007116:	429a      	cmp	r2, r3
 8007118:	d901      	bls.n	800711e <u8g2_clip_intersection2+0x7a>
    b = d;
 800711a:	79bb      	ldrb	r3, [r7, #6]
 800711c:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	7dfa      	ldrb	r2, [r7, #23]
 8007122:	701a      	strb	r2, [r3, #0]
  b -= a;
 8007124:	7dba      	ldrb	r2, [r7, #22]
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	75bb      	strb	r3, [r7, #22]
  *len = b;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	7dba      	ldrb	r2, [r7, #22]
 8007130:	701a      	strb	r2, [r3, #0]
  return 1;
 8007132:	2301      	movs	r3, #1
}
 8007134:	4618      	mov	r0, r3
 8007136:	371c      	adds	r7, #28
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr

0800713e <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800713e:	b590      	push	{r4, r7, lr}
 8007140:	b085      	sub	sp, #20
 8007142:	af02      	add	r7, sp, #8
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	4608      	mov	r0, r1
 8007148:	4611      	mov	r1, r2
 800714a:	461a      	mov	r2, r3
 800714c:	4603      	mov	r3, r0
 800714e:	70fb      	strb	r3, [r7, #3]
 8007150:	460b      	mov	r3, r1
 8007152:	70bb      	strb	r3, [r7, #2]
 8007154:	4613      	mov	r3, r2
 8007156:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800715e:	78ba      	ldrb	r2, [r7, #2]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007168:	7878      	ldrb	r0, [r7, #1]
 800716a:	78ba      	ldrb	r2, [r7, #2]
 800716c:	78f9      	ldrb	r1, [r7, #3]
 800716e:	7e3b      	ldrb	r3, [r7, #24]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	4603      	mov	r3, r0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	47a0      	blx	r4
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bd90      	pop	{r4, r7, pc}

08007180 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007180:	b590      	push	{r4, r7, lr}
 8007182:	b085      	sub	sp, #20
 8007184:	af02      	add	r7, sp, #8
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	4608      	mov	r0, r1
 800718a:	4611      	mov	r1, r2
 800718c:	461a      	mov	r2, r3
 800718e:	4603      	mov	r3, r0
 8007190:	70fb      	strb	r3, [r7, #3]
 8007192:	460b      	mov	r3, r1
 8007194:	70bb      	strb	r3, [r7, #2]
 8007196:	4613      	mov	r3, r2
 8007198:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d06d      	beq.n	8007280 <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80071a4:	787b      	ldrb	r3, [r7, #1]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d06a      	beq.n	8007280 <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80071aa:	787b      	ldrb	r3, [r7, #1]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d918      	bls.n	80071e2 <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 80071b0:	7e3b      	ldrb	r3, [r7, #24]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d109      	bne.n	80071ca <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 80071b6:	78fa      	ldrb	r2, [r7, #3]
 80071b8:	787b      	ldrb	r3, [r7, #1]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	70fb      	strb	r3, [r7, #3]
	  x++;
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	3301      	adds	r3, #1
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	70fb      	strb	r3, [r7, #3]
 80071c8:	e00b      	b.n	80071e2 <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80071ca:	7e3b      	ldrb	r3, [r7, #24]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d108      	bne.n	80071e2 <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80071d0:	78ba      	ldrb	r2, [r7, #2]
 80071d2:	787b      	ldrb	r3, [r7, #1]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	70bb      	strb	r3, [r7, #2]
	  y++;
 80071da:	78bb      	ldrb	r3, [r7, #2]
 80071dc:	3301      	adds	r3, #1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80071e2:	7e3b      	ldrb	r3, [r7, #24]
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80071ea:	7e3b      	ldrb	r3, [r7, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d119      	bne.n	8007224 <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80071f6:	78bb      	ldrb	r3, [r7, #2]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d838      	bhi.n	800726e <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007202:	78bb      	ldrb	r3, [r7, #2]
 8007204:	429a      	cmp	r2, r3
 8007206:	d934      	bls.n	8007272 <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007214:	1c79      	adds	r1, r7, #1
 8007216:	1cf8      	adds	r0, r7, #3
 8007218:	f7ff ff44 	bl	80070a4 <u8g2_clip_intersection2>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d119      	bne.n	8007256 <u8g2_DrawHVLine+0xd6>
	  return;
 8007222:	e02d      	b.n	8007280 <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	429a      	cmp	r2, r3
 800722e:	d822      	bhi.n	8007276 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	429a      	cmp	r2, r3
 800723a:	d91e      	bls.n	800727a <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007248:	1c79      	adds	r1, r7, #1
 800724a:	1cb8      	adds	r0, r7, #2
 800724c:	f7ff ff2a 	bl	80070a4 <u8g2_clip_intersection2>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d013      	beq.n	800727e <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725a:	689c      	ldr	r4, [r3, #8]
 800725c:	78f9      	ldrb	r1, [r7, #3]
 800725e:	78ba      	ldrb	r2, [r7, #2]
 8007260:	7878      	ldrb	r0, [r7, #1]
 8007262:	7e3b      	ldrb	r3, [r7, #24]
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	4603      	mov	r3, r0
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	47a0      	blx	r4
 800726c:	e008      	b.n	8007280 <u8g2_DrawHVLine+0x100>
	  return;
 800726e:	bf00      	nop
 8007270:	e006      	b.n	8007280 <u8g2_DrawHVLine+0x100>
	  return;
 8007272:	bf00      	nop
 8007274:	e004      	b.n	8007280 <u8g2_DrawHVLine+0x100>
	  return;
 8007276:	bf00      	nop
 8007278:	e002      	b.n	8007280 <u8g2_DrawHVLine+0x100>
	  return;
 800727a:	bf00      	nop
 800727c:	e000      	b.n	8007280 <u8g2_DrawHVLine+0x100>
	  return;
 800727e:	bf00      	nop
    }
}
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	bd90      	pop	{r4, r7, pc}

08007286 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af02      	add	r7, sp, #8
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
 8007292:	4613      	mov	r3, r2
 8007294:	70bb      	strb	r3, [r7, #2]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800729c:	78ba      	ldrb	r2, [r7, #2]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d31a      	bcc.n	80072d8 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80072a8:	78ba      	ldrb	r2, [r7, #2]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d216      	bcs.n	80072dc <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072b4:	78fa      	ldrb	r2, [r7, #3]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d312      	bcc.n	80072e0 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d20e      	bcs.n	80072e4 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80072c6:	78ba      	ldrb	r2, [r7, #2]
 80072c8:	78f9      	ldrb	r1, [r7, #3]
 80072ca:	2300      	movs	r3, #0
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2301      	movs	r3, #1
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff ff55 	bl	8007180 <u8g2_DrawHVLine>
 80072d6:	e006      	b.n	80072e6 <u8g2_DrawPixel+0x60>
    return;
 80072d8:	bf00      	nop
 80072da:	e004      	b.n	80072e6 <u8g2_DrawPixel+0x60>
    return;
 80072dc:	bf00      	nop
 80072de:	e002      	b.n	80072e6 <u8g2_DrawPixel+0x60>
    return;
 80072e0:	bf00      	nop
 80072e2:	e000      	b.n	80072e6 <u8g2_DrawPixel+0x60>
    return;
 80072e4:	bf00      	nop
}
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80072ec:	b490      	push	{r4, r7}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4604      	mov	r4, r0
 80072f4:	4608      	mov	r0, r1
 80072f6:	4611      	mov	r1, r2
 80072f8:	461a      	mov	r2, r3
 80072fa:	4623      	mov	r3, r4
 80072fc:	71fb      	strb	r3, [r7, #7]
 80072fe:	4603      	mov	r3, r0
 8007300:	71bb      	strb	r3, [r7, #6]
 8007302:	460b      	mov	r3, r1
 8007304:	717b      	strb	r3, [r7, #5]
 8007306:	4613      	mov	r3, r2
 8007308:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800730a:	797a      	ldrb	r2, [r7, #5]
 800730c:	79bb      	ldrb	r3, [r7, #6]
 800730e:	429a      	cmp	r2, r3
 8007310:	d20d      	bcs.n	800732e <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8007312:	793a      	ldrb	r2, [r7, #4]
 8007314:	79fb      	ldrb	r3, [r7, #7]
 8007316:	429a      	cmp	r2, r3
 8007318:	d901      	bls.n	800731e <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800731a:	2301      	movs	r3, #1
 800731c:	e014      	b.n	8007348 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 800731e:	797a      	ldrb	r2, [r7, #5]
 8007320:	793b      	ldrb	r3, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d901      	bls.n	800732a <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8007326:	2301      	movs	r3, #1
 8007328:	e00e      	b.n	8007348 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800732a:	2300      	movs	r3, #0
 800732c:	e00c      	b.n	8007348 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800732e:	793a      	ldrb	r2, [r7, #4]
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	429a      	cmp	r2, r3
 8007334:	d907      	bls.n	8007346 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8007336:	797a      	ldrb	r2, [r7, #5]
 8007338:	793b      	ldrb	r3, [r7, #4]
 800733a:	429a      	cmp	r2, r3
 800733c:	d901      	bls.n	8007342 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 800733e:	2301      	movs	r3, #1
 8007340:	e002      	b.n	8007348 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8007342:	2300      	movs	r3, #0
 8007344:	e000      	b.n	8007348 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8007346:	2300      	movs	r3, #0
    }
  }
}
 8007348:	4618      	mov	r0, r3
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bc90      	pop	{r4, r7}
 8007350:	4770      	bx	lr

08007352 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	4608      	mov	r0, r1
 800735c:	4611      	mov	r1, r2
 800735e:	461a      	mov	r2, r3
 8007360:	4603      	mov	r3, r0
 8007362:	70fb      	strb	r3, [r7, #3]
 8007364:	460b      	mov	r3, r1
 8007366:	70bb      	strb	r3, [r7, #2]
 8007368:	4613      	mov	r3, r2
 800736a:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8007378:	7c3b      	ldrb	r3, [r7, #16]
 800737a:	78ba      	ldrb	r2, [r7, #2]
 800737c:	f7ff ffb6 	bl	80072ec <u8g2_is_intersection_decision_tree>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <u8g2_IsIntersection+0x38>
    return 0; 
 8007386:	2300      	movs	r3, #0
 8007388:	e00a      	b.n	80073a0 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8007396:	787b      	ldrb	r3, [r7, #1]
 8007398:	78fa      	ldrb	r2, [r7, #3]
 800739a:	f7ff ffa7 	bl	80072ec <u8g2_is_intersection_decision_tree>
 800739e:	4603      	mov	r3, r0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	4608      	mov	r0, r1
 80073b2:	4611      	mov	r1, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	70fb      	strb	r3, [r7, #3]
 80073ba:	460b      	mov	r3, r1
 80073bc:	70bb      	strb	r3, [r7, #2]
 80073be:	4613      	mov	r3, r2
 80073c0:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t x,y;
  u8g2_uint_t dx, dy;
  u8g2_int_t err;
  u8g2_int_t ystep;

  uint8_t swapxy = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	727b      	strb	r3, [r7, #9]
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	787b      	ldrb	r3, [r7, #1]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d904      	bls.n	80073d8 <u8g2_DrawLine+0x30>
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	787b      	ldrb	r3, [r7, #1]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	737b      	strb	r3, [r7, #13]
 80073d6:	e003      	b.n	80073e0 <u8g2_DrawLine+0x38>
 80073d8:	787a      	ldrb	r2, [r7, #1]
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	737b      	strb	r3, [r7, #13]
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
 80073e0:	78ba      	ldrb	r2, [r7, #2]
 80073e2:	7e3b      	ldrb	r3, [r7, #24]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d904      	bls.n	80073f2 <u8g2_DrawLine+0x4a>
 80073e8:	78ba      	ldrb	r2, [r7, #2]
 80073ea:	7e3b      	ldrb	r3, [r7, #24]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	733b      	strb	r3, [r7, #12]
 80073f0:	e003      	b.n	80073fa <u8g2_DrawLine+0x52>
 80073f2:	7e3a      	ldrb	r2, [r7, #24]
 80073f4:	78bb      	ldrb	r3, [r7, #2]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	733b      	strb	r3, [r7, #12]

  if ( dy > dx ) 
 80073fa:	7b3a      	ldrb	r2, [r7, #12]
 80073fc:	7b7b      	ldrb	r3, [r7, #13]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d913      	bls.n	800742a <u8g2_DrawLine+0x82>
  {
    swapxy = 1;
 8007402:	2301      	movs	r3, #1
 8007404:	727b      	strb	r3, [r7, #9]
    tmp = dx; dx =dy; dy = tmp;
 8007406:	7b7b      	ldrb	r3, [r7, #13]
 8007408:	723b      	strb	r3, [r7, #8]
 800740a:	7b3b      	ldrb	r3, [r7, #12]
 800740c:	737b      	strb	r3, [r7, #13]
 800740e:	7a3b      	ldrb	r3, [r7, #8]
 8007410:	733b      	strb	r3, [r7, #12]
    tmp = x1; x1 =y1; y1 = tmp;
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	723b      	strb	r3, [r7, #8]
 8007416:	78bb      	ldrb	r3, [r7, #2]
 8007418:	70fb      	strb	r3, [r7, #3]
 800741a:	7a3b      	ldrb	r3, [r7, #8]
 800741c:	70bb      	strb	r3, [r7, #2]
    tmp = x2; x2 =y2; y2 = tmp;
 800741e:	787b      	ldrb	r3, [r7, #1]
 8007420:	723b      	strb	r3, [r7, #8]
 8007422:	7e3b      	ldrb	r3, [r7, #24]
 8007424:	707b      	strb	r3, [r7, #1]
 8007426:	7a3b      	ldrb	r3, [r7, #8]
 8007428:	763b      	strb	r3, [r7, #24]
  }
  if ( x1 > x2 ) 
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	787b      	ldrb	r3, [r7, #1]
 800742e:	429a      	cmp	r2, r3
 8007430:	d90b      	bls.n	800744a <u8g2_DrawLine+0xa2>
  {
    tmp = x1; x1 =x2; x2 = tmp;
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	723b      	strb	r3, [r7, #8]
 8007436:	787b      	ldrb	r3, [r7, #1]
 8007438:	70fb      	strb	r3, [r7, #3]
 800743a:	7a3b      	ldrb	r3, [r7, #8]
 800743c:	707b      	strb	r3, [r7, #1]
    tmp = y1; y1 =y2; y2 = tmp;
 800743e:	78bb      	ldrb	r3, [r7, #2]
 8007440:	723b      	strb	r3, [r7, #8]
 8007442:	7e3b      	ldrb	r3, [r7, #24]
 8007444:	70bb      	strb	r3, [r7, #2]
 8007446:	7a3b      	ldrb	r3, [r7, #8]
 8007448:	763b      	strb	r3, [r7, #24]
  }
  err = dx >> 1;
 800744a:	7b7b      	ldrb	r3, [r7, #13]
 800744c:	085b      	lsrs	r3, r3, #1
 800744e:	b2db      	uxtb	r3, r3
 8007450:	72fb      	strb	r3, [r7, #11]
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
 8007452:	7e3a      	ldrb	r2, [r7, #24]
 8007454:	78bb      	ldrb	r3, [r7, #2]
 8007456:	429a      	cmp	r2, r3
 8007458:	d902      	bls.n	8007460 <u8g2_DrawLine+0xb8>
 800745a:	2301      	movs	r3, #1
 800745c:	72bb      	strb	r3, [r7, #10]
 800745e:	e001      	b.n	8007464 <u8g2_DrawLine+0xbc>
 8007460:	23ff      	movs	r3, #255	; 0xff
 8007462:	72bb      	strb	r3, [r7, #10]
  y = y1;
 8007464:	78bb      	ldrb	r3, [r7, #2]
 8007466:	73bb      	strb	r3, [r7, #14]

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
 8007468:	787b      	ldrb	r3, [r7, #1]
 800746a:	2bff      	cmp	r3, #255	; 0xff
 800746c:	d102      	bne.n	8007474 <u8g2_DrawLine+0xcc>
    x2--;
 800746e:	787b      	ldrb	r3, [r7, #1]
 8007470:	3b01      	subs	r3, #1
 8007472:	707b      	strb	r3, [r7, #1]
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	73fb      	strb	r3, [r7, #15]
 8007478:	e024      	b.n	80074c4 <u8g2_DrawLine+0x11c>
  {
    if ( swapxy == 0 ) 
 800747a:	7a7b      	ldrb	r3, [r7, #9]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <u8g2_DrawLine+0xe6>
      u8g2_DrawPixel(u8g2, x, y); 
 8007480:	7bba      	ldrb	r2, [r7, #14]
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff fefd 	bl	8007286 <u8g2_DrawPixel>
 800748c:	e005      	b.n	800749a <u8g2_DrawLine+0xf2>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
 800748e:	7bfa      	ldrb	r2, [r7, #15]
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fef6 	bl	8007286 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
 800749a:	7afa      	ldrb	r2, [r7, #11]
 800749c:	7b3b      	ldrb	r3, [r7, #12]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	72fb      	strb	r3, [r7, #11]
    if ( err < 0 ) 
 80074a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	da08      	bge.n	80074be <u8g2_DrawLine+0x116>
    {
      y += (u8g2_uint_t)ystep;
 80074ac:	7aba      	ldrb	r2, [r7, #10]
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	4413      	add	r3, r2
 80074b2:	73bb      	strb	r3, [r7, #14]
      err += (u8g2_uint_t)dx;
 80074b4:	7afa      	ldrb	r2, [r7, #11]
 80074b6:	7b7b      	ldrb	r3, [r7, #13]
 80074b8:	4413      	add	r3, r2
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	72fb      	strb	r3, [r7, #11]
  for( x = x1; x <= x2; x++ )
 80074be:	7bfb      	ldrb	r3, [r7, #15]
 80074c0:	3301      	adds	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
 80074c4:	7bfa      	ldrb	r2, [r7, #15]
 80074c6:	787b      	ldrb	r3, [r7, #1]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d9d6      	bls.n	800747a <u8g2_DrawLine+0xd2>
    }
  }
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	4608      	mov	r0, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	461a      	mov	r2, r3
 80074e2:	4603      	mov	r3, r0
 80074e4:	70fb      	strb	r3, [r7, #3]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70bb      	strb	r3, [r7, #2]
 80074ea:	4613      	mov	r3, r2
 80074ec:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80074ee:	78bb      	ldrb	r3, [r7, #2]
 80074f0:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80074f2:	7cfb      	ldrb	r3, [r7, #19]
 80074f4:	f003 0307 	and.w	r3, r3, #7
 80074f8:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 80074fa:	2301      	movs	r3, #1
 80074fc:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 80074fe:	7c3a      	ldrb	r2, [r7, #16]
 8007500:	7cfb      	ldrb	r3, [r7, #19]
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007516:	2b01      	cmp	r3, #1
 8007518:	d801      	bhi.n	800751e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 800751a:	7c3b      	ldrb	r3, [r7, #16]
 800751c:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007524:	2b01      	cmp	r3, #1
 8007526:	d001      	beq.n	800752c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8007528:	7c3b      	ldrb	r3, [r7, #16]
 800752a:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 800752c:	78bb      	ldrb	r3, [r7, #2]
 800752e:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8007530:	89fb      	ldrh	r3, [r7, #14]
 8007532:	f023 0307 	bic.w	r3, r3, #7
 8007536:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	7c1b      	ldrb	r3, [r3, #16]
 800753e:	b29b      	uxth	r3, r3
 8007540:	89fa      	ldrh	r2, [r7, #14]
 8007542:	fb02 f303 	mul.w	r3, r2, r3
 8007546:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	617b      	str	r3, [r7, #20]
  ptr += offset;
 800754e:	89fb      	ldrh	r3, [r7, #14]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4413      	add	r3, r2
 8007554:	617b      	str	r3, [r7, #20]
  ptr += x;
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	4413      	add	r3, r2
 800755c:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 800755e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d117      	bne.n	8007596 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	7cbb      	ldrb	r3, [r7, #18]
 800756c:	4313      	orrs	r3, r2
 800756e:	b2da      	uxtb	r2, r3
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	7c7b      	ldrb	r3, [r7, #17]
 800757a:	4053      	eors	r3, r2
 800757c:	b2da      	uxtb	r2, r3
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	701a      	strb	r2, [r3, #0]
	ptr++;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	3301      	adds	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
	len--;
 8007588:	787b      	ldrb	r3, [r7, #1]
 800758a:	3b01      	subs	r3, #1
 800758c:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 800758e:	787b      	ldrb	r3, [r7, #1]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e8      	bne.n	8007566 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8007594:	e039      	b.n	800760a <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	781a      	ldrb	r2, [r3, #0]
 800759a:	7cbb      	ldrb	r3, [r7, #18]
 800759c:	4313      	orrs	r3, r2
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	781a      	ldrb	r2, [r3, #0]
 80075a8:	7c7b      	ldrb	r3, [r7, #17]
 80075aa:	4053      	eors	r3, r2
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80075b2:	7cfb      	ldrb	r3, [r7, #19]
 80075b4:	3301      	adds	r3, #1
 80075b6:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 80075b8:	7cfb      	ldrb	r3, [r7, #19]
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	74fb      	strb	r3, [r7, #19]
      len--;
 80075c0:	787b      	ldrb	r3, [r7, #1]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 80075c6:	7cfb      	ldrb	r3, [r7, #19]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d115      	bne.n	80075f8 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075d2:	461a      	mov	r2, r3
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	4413      	add	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d801      	bhi.n	80075e8 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 80075e4:	2301      	movs	r3, #1
 80075e6:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d008      	beq.n	8007604 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 80075f2:	2301      	movs	r3, #1
 80075f4:	747b      	strb	r3, [r7, #17]
 80075f6:	e005      	b.n	8007604 <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 80075f8:	7cbb      	ldrb	r3, [r7, #18]
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 80075fe:	7c7b      	ldrb	r3, [r7, #17]
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8007604:	787b      	ldrb	r3, [r7, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1c5      	bne.n	8007596 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr

08007614 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	22ff      	movs	r2, #255	; 0xff
 8007630:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	22ff      	movs	r2, #255	; 0xff
 8007638:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	603b      	str	r3, [r7, #0]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	79fa      	ldrb	r2, [r7, #7]
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff ffaf 	bl	8007614 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff fccc 	bl	8007054 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 80076c4:	bf00      	nop
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e0:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7bfa      	ldrb	r2, [r7, #15]
 80076ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	7c1b      	ldrb	r3, [r3, #16]
 80076f4:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b1f      	cmp	r3, #31
 80076fa:	d901      	bls.n	8007700 <u8g2_update_dimension_common+0x34>
    t = 31;
 80076fc:	231f      	movs	r3, #31
 80076fe:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	7bfa      	ldrb	r2, [r7, #15]
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007714:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	7bfa      	ldrb	r2, [r7, #15]
 8007720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800772a:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8007734:	4413      	add	r3, r2
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	7c52      	ldrb	r2, [r2, #17]
 800773a:	4293      	cmp	r3, r2
 800773c:	dd06      	ble.n	800774c <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	7c5a      	ldrb	r2, [r3, #17]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8007770:	7bfb      	ldrb	r3, [r7, #15]
 8007772:	4413      	add	r3, r2
 8007774:	b2da      	uxtb	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	22f0      	movs	r2, #240	; 0xf0
 8007780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	8a9b      	ldrh	r3, [r3, #20]
 8007788:	2bf0      	cmp	r3, #240	; 0xf0
 800778a:	d805      	bhi.n	8007798 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	8a9b      	ldrh	r3, [r3, #20]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	8adb      	ldrh	r3, [r3, #22]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr

080077ae <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af02      	add	r7, sp, #8
 80077b4:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	4603      	mov	r3, r0
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7ff fdbd 	bl	8007352 <u8g2_IsIntersection>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d104      	bne.n	80077e8 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80077e6:	e03b      	b.n	8007860 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d205      	bcs.n	800780c <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8007818:	429a      	cmp	r2, r3
 800781a:	d905      	bls.n	8007828 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007834:	429a      	cmp	r2, r3
 8007836:	d205      	bcs.n	8007844 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007850:	429a      	cmp	r2, r3
 8007852:	d905      	bls.n	8007860 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff ff2b 	bl	80076cc <u8g2_update_dimension_common>
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7ff ff7b 	bl	80077ae <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	4608      	mov	r0, r1
 80078ca:	4611      	mov	r1, r2
 80078cc:	461a      	mov	r2, r3
 80078ce:	4603      	mov	r3, r0
 80078d0:	70fb      	strb	r3, [r7, #3]
 80078d2:	460b      	mov	r3, r1
 80078d4:	70bb      	strb	r3, [r7, #2]
 80078d6:	4613      	mov	r3, r2
 80078d8:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80078da:	7878      	ldrb	r0, [r7, #1]
 80078dc:	78ba      	ldrb	r2, [r7, #2]
 80078de:	78f9      	ldrb	r1, [r7, #3]
 80078e0:	7c3b      	ldrb	r3, [r7, #16]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	4603      	mov	r3, r0
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff fc29 	bl	800713e <u8g2_draw_hv_line_2dir>
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	bc80      	pop	{r7}
 800790c:	4770      	bx	lr

0800790e <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <u8x8_ascii_next+0x18>
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	2b0a      	cmp	r3, #10
 8007924:	d102      	bne.n	800792c <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8007926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800792a:	e001      	b.n	8007930 <u8x8_ascii_next+0x22>
  return b;
 800792c:	78fb      	ldrb	r3, [r7, #3]
 800792e:	b29b      	uxth	r3, r3
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	bc80      	pop	{r7}
 8007938:	4770      	bx	lr

0800793a <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800793a:	b590      	push	{r4, r7, lr}
 800793c:	b085      	sub	sp, #20
 800793e:	af00      	add	r7, sp, #0
 8007940:	60f8      	str	r0, [r7, #12]
 8007942:	460b      	mov	r3, r1
 8007944:	607a      	str	r2, [r7, #4]
 8007946:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	691c      	ldr	r4, [r3, #16]
 800794c:	7afa      	ldrb	r2, [r7, #11]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2117      	movs	r1, #23
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	47a0      	blx	r4
 8007956:	4603      	mov	r3, r0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	bd90      	pop	{r4, r7, pc}

08007960 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800796c:	1cfb      	adds	r3, r7, #3
 800796e:	461a      	mov	r2, r3
 8007970:	2101      	movs	r1, #1
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff ffe1 	bl	800793a <u8x8_byte_SendBytes>
 8007978:	4603      	mov	r3, r0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8007982:	b590      	push	{r4, r7, lr}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691c      	ldr	r4, [r3, #16]
 800798e:	2300      	movs	r3, #0
 8007990:	2200      	movs	r2, #0
 8007992:	2118      	movs	r1, #24
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	47a0      	blx	r4
 8007998:	4603      	mov	r3, r0
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd90      	pop	{r4, r7, pc}

080079a2 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80079a2:	b590      	push	{r4, r7, lr}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	691c      	ldr	r4, [r3, #16]
 80079ae:	2300      	movs	r3, #0
 80079b0:	2200      	movs	r2, #0
 80079b2:	2119      	movs	r1, #25
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	47a0      	blx	r4
 80079b8:	4603      	mov	r3, r0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd90      	pop	{r4, r7, pc}

080079c2 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80079c2:	b590      	push	{r4, r7, lr}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68dc      	ldr	r4, [r3, #12]
 80079d2:	78fa      	ldrb	r2, [r7, #3]
 80079d4:	2300      	movs	r3, #0
 80079d6:	2115      	movs	r1, #21
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	47a0      	blx	r4
 80079dc:	4603      	mov	r3, r0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd90      	pop	{r4, r7, pc}

080079e6 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80079e6:	b590      	push	{r4, r7, lr}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68dc      	ldr	r4, [r3, #12]
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	2300      	movs	r3, #0
 80079fa:	2116      	movs	r1, #22
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	47a0      	blx	r4
 8007a00:	4603      	mov	r3, r0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	370c      	adds	r7, #12
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd90      	pop	{r4, r7, pc}

08007a0a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8007a0a:	b590      	push	{r4, r7, lr}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	460b      	mov	r3, r1
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68dc      	ldr	r4, [r3, #12]
 8007a1c:	7afa      	ldrb	r2, [r7, #11]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2117      	movs	r1, #23
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	47a0      	blx	r4
 8007a26:	4603      	mov	r3, r0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd90      	pop	{r4, r7, pc}

08007a30 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8007a30:	b590      	push	{r4, r7, lr}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68dc      	ldr	r4, [r3, #12]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2118      	movs	r1, #24
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	47a0      	blx	r4
 8007a46:	4603      	mov	r3, r0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd90      	pop	{r4, r7, pc}

08007a50 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8007a50:	b590      	push	{r4, r7, lr}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68dc      	ldr	r4, [r3, #12]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2119      	movs	r1, #25
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	47a0      	blx	r4
 8007a66:	4603      	mov	r3, r0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd90      	pop	{r4, r7, pc}

08007a70 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8007a70:	b590      	push	{r4, r7, lr}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	73fb      	strb	r3, [r7, #15]
    data++;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	3301      	adds	r3, #1
 8007a84:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b17      	cmp	r3, #23
 8007a8a:	d017      	beq.n	8007abc <u8x8_cad_SendSequence+0x4c>
 8007a8c:	2b17      	cmp	r3, #23
 8007a8e:	dc02      	bgt.n	8007a96 <u8x8_cad_SendSequence+0x26>
 8007a90:	2b15      	cmp	r3, #21
 8007a92:	db37      	blt.n	8007b04 <u8x8_cad_SendSequence+0x94>
 8007a94:	e004      	b.n	8007aa0 <u8x8_cad_SendSequence+0x30>
 8007a96:	2b19      	cmp	r3, #25
 8007a98:	dd1e      	ble.n	8007ad8 <u8x8_cad_SendSequence+0x68>
 8007a9a:	2bfe      	cmp	r3, #254	; 0xfe
 8007a9c:	d024      	beq.n	8007ae8 <u8x8_cad_SendSequence+0x78>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8007a9e:	e031      	b.n	8007b04 <u8x8_cad_SendSequence+0x94>
	  v = *data;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68dc      	ldr	r4, [r3, #12]
 8007aaa:	7bba      	ldrb	r2, [r7, #14]
 8007aac:	7bf9      	ldrb	r1, [r7, #15]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	47a0      	blx	r4
	  data++;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	603b      	str	r3, [r7, #0]
	  break;
 8007aba:	e022      	b.n	8007b02 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8007ac2:	f107 030e 	add.w	r3, r7, #14
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	2101      	movs	r1, #1
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff ff9d 	bl	8007a0a <u8x8_cad_SendData>
	  data++;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	603b      	str	r3, [r7, #0]
	  break;
 8007ad6:	e014      	b.n	8007b02 <u8x8_cad_SendSequence+0x92>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68dc      	ldr	r4, [r3, #12]
 8007adc:	7bf9      	ldrb	r1, [r7, #15]
 8007ade:	2300      	movs	r3, #0
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	47a0      	blx	r4
	  break;
 8007ae6:	e00c      	b.n	8007b02 <u8x8_cad_SendSequence+0x92>
	  v = *data;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	461a      	mov	r2, r3
 8007af2:	2129      	movs	r1, #41	; 0x29
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fa35 	bl	8007f64 <u8x8_gpio_call>
	  data++;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	3301      	adds	r3, #1
 8007afe:	603b      	str	r3, [r7, #0]
	  break;
 8007b00:	bf00      	nop
    cmd = *data;
 8007b02:	e7ba      	b.n	8007a7a <u8x8_cad_SendSequence+0xa>
	return;
 8007b04:	bf00      	nop
    }
  }
}
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd90      	pop	{r4, r7, pc}

08007b0c <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	460b      	mov	r3, r1
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7ff ff31 	bl	8007982 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8007b20:	2140      	movs	r1, #64	; 0x40
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f7ff ff1c 	bl	8007960 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	691c      	ldr	r4, [r3, #16]
 8007b2c:	7afa      	ldrb	r2, [r7, #11]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2117      	movs	r1, #23
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7ff ff33 	bl	80079a2 <u8x8_byte_EndTransfer>
}
 8007b3c:	bf00      	nop
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd90      	pop	{r4, r7, pc}

08007b44 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b087      	sub	sp, #28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	460b      	mov	r3, r1
 8007b50:	72fb      	strb	r3, [r7, #11]
 8007b52:	4613      	mov	r3, r2
 8007b54:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8007b56:	7afb      	ldrb	r3, [r7, #11]
 8007b58:	3b14      	subs	r3, #20
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	d86e      	bhi.n	8007c3c <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8007b5e:	a201      	add	r2, pc, #4	; (adr r2, 8007b64 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007bfb 	.word	0x08007bfb
 8007b68:	08007b7d 	.word	0x08007b7d
 8007b6c:	08007bab 	.word	0x08007bab
 8007b70:	08007bb7 	.word	0x08007bb7
 8007b74:	08007c1f 	.word	0x08007c1f
 8007b78:	08007c27 	.word	0x08007c27
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8007b7c:	4b33      	ldr	r3, [pc, #204]	; (8007c4c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d002      	beq.n	8007b8a <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f7ff ff0c 	bl	80079a2 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff fef9 	bl	8007982 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8007b90:	2100      	movs	r1, #0
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f7ff fee4 	bl	8007960 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8007b98:	7abb      	ldrb	r3, [r7, #10]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f7ff fedf 	bl	8007960 <u8x8_byte_SendByte>
      in_transfer = 1;
 8007ba2:	4b2a      	ldr	r3, [pc, #168]	; (8007c4c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8007ba8:	e04a      	b.n	8007c40 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8007baa:	7abb      	ldrb	r3, [r7, #10]
 8007bac:	4619      	mov	r1, r3
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff fed6 	bl	8007960 <u8x8_byte_SendByte>
      break;      
 8007bb4:	e044      	b.n	8007c40 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8007bb6:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7ff feef 	bl	80079a2 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8007bc8:	e00a      	b.n	8007be0 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	2118      	movs	r1, #24
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7ff ff9c 	bl	8007b0c <u8x8_i2c_data_transfer>
	arg_int-=24;
 8007bd4:	7abb      	ldrb	r3, [r7, #10]
 8007bd6:	3b18      	subs	r3, #24
 8007bd8:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	3318      	adds	r3, #24
 8007bde:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8007be0:	7abb      	ldrb	r3, [r7, #10]
 8007be2:	2b18      	cmp	r3, #24
 8007be4:	d8f1      	bhi.n	8007bca <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8007be6:	7abb      	ldrb	r3, [r7, #10]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4619      	mov	r1, r3
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7ff ff8d 	bl	8007b0c <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8007bf2:	4b16      	ldr	r3, [pc, #88]	; (8007c4c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	701a      	strb	r2, [r3, #0]
      break;
 8007bf8:	e022      	b.n	8007c40 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c00:	2bff      	cmp	r3, #255	; 0xff
 8007c02:	d103      	bne.n	8007c0c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2278      	movs	r2, #120	; 0x78
 8007c08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	691c      	ldr	r4, [r3, #16]
 8007c10:	7aba      	ldrb	r2, [r7, #10]
 8007c12:	7af9      	ldrb	r1, [r7, #11]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	47a0      	blx	r4
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	e011      	b.n	8007c42 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8007c1e:	4b0b      	ldr	r3, [pc, #44]	; (8007c4c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	701a      	strb	r2, [r3, #0]
      break;
 8007c24:	e00c      	b.n	8007c40 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8007c26:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff feb7 	bl	80079a2 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
      break;
 8007c3a:	e001      	b.n	8007c40 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e000      	b.n	8007c42 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8007c40:	2301      	movs	r3, #1
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd90      	pop	{r4, r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20000624 	.word	0x20000624

08007c50 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	607b      	str	r3, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	72fb      	strb	r3, [r7, #11]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8007c62:	7afb      	ldrb	r3, [r7, #11]
 8007c64:	3b0b      	subs	r3, #11
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	f200 808a 	bhi.w	8007d80 <u8x8_d_ssd1306_sh1106_generic+0x130>
 8007c6c:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <u8x8_d_ssd1306_sh1106_generic+0x24>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007c89 	.word	0x08007c89
 8007c78:	08007d81 	.word	0x08007d81
 8007c7c:	08007ca3 	.word	0x08007ca3
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007cf5 	.word	0x08007cf5
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8007c88:	7abb      	ldrb	r3, [r7, #10]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <u8x8_d_ssd1306_sh1106_generic+0x48>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8007c8e:	4940      	ldr	r1, [pc, #256]	; (8007d90 <u8x8_d_ssd1306_sh1106_generic+0x140>)
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f7ff feed 	bl	8007a70 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
 8007c96:	e075      	b.n	8007d84 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8007c98:	493e      	ldr	r1, [pc, #248]	; (8007d94 <u8x8_d_ssd1306_sh1106_generic+0x144>)
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff fee8 	bl	8007a70 <u8x8_cad_SendSequence>
      break;
 8007ca0:	e070      	b.n	8007d84 <u8x8_d_ssd1306_sh1106_generic+0x134>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8007ca2:	7abb      	ldrb	r3, [r7, #10]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10a      	bne.n	8007cbe <u8x8_d_ssd1306_sh1106_generic+0x6e>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8007ca8:	493b      	ldr	r1, [pc, #236]	; (8007d98 <u8x8_d_ssd1306_sh1106_generic+0x148>)
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f7ff fee0 	bl	8007a70 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	7c9a      	ldrb	r2, [r3, #18]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8007cbc:	e062      	b.n	8007d84 <u8x8_d_ssd1306_sh1106_generic+0x134>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8007cbe:	4937      	ldr	r1, [pc, #220]	; (8007d9c <u8x8_d_ssd1306_sh1106_generic+0x14c>)
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7ff fed5 	bl	8007a70 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	7cda      	ldrb	r2, [r3, #19]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8007cd2:	e057      	b.n	8007d84 <u8x8_d_ssd1306_sh1106_generic+0x134>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff feab 	bl	8007a30 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8007cda:	2181      	movs	r1, #129	; 0x81
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff fe70 	bl	80079c2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8007ce2:	7abb      	ldrb	r3, [r7, #10]
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff fe7d 	bl	80079e6 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff feaf 	bl	8007a50 <u8x8_cad_EndTransfer>
      break;
 8007cf2:	e047      	b.n	8007d84 <u8x8_d_ssd1306_sh1106_generic+0x134>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8007cf4:	68f8      	ldr	r0, [r7, #12]
 8007cf6:	f7ff fe9b 	bl	8007a30 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	795b      	ldrb	r3, [r3, #5]
 8007cfe:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8007d0c:	7dfb      	ldrb	r3, [r7, #23]
 8007d0e:	4413      	add	r3, r2
 8007d10:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8007d12:	2140      	movs	r1, #64	; 0x40
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff fe54 	bl	80079c2 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	091b      	lsrs	r3, r3, #4
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f043 0310 	orr.w	r3, r3, #16
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	4619      	mov	r1, r3
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f7ff fe4a 	bl	80079c2 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	4619      	mov	r1, r3
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff fe54 	bl	80079e6 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	799b      	ldrb	r3, [r3, #6]
 8007d42:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	4619      	mov	r1, r3
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff fe4b 	bl	80079e6 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	791b      	ldrb	r3, [r3, #4]
 8007d54:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8007d5c:	7dbb      	ldrb	r3, [r7, #22]
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4619      	mov	r1, r3
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f7ff fe4f 	bl	8007a0a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8007d6c:	7abb      	ldrb	r3, [r7, #10]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8007d72:	7abb      	ldrb	r3, [r7, #10]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1eb      	bne.n	8007d50 <u8x8_d_ssd1306_sh1106_generic+0x100>
      
      u8x8_cad_EndTransfer(u8x8);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fe69 	bl	8007a50 <u8x8_cad_EndTransfer>
      break;
 8007d7e:	e001      	b.n	8007d84 <u8x8_d_ssd1306_sh1106_generic+0x134>
    default:
      return 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <u8x8_d_ssd1306_sh1106_generic+0x136>
  }
  return 1;
 8007d84:	2301      	movs	r3, #1
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3718      	adds	r7, #24
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	0800d348 	.word	0x0800d348
 8007d94:	0800d350 	.word	0x0800d350
 8007d98:	0800d358 	.word	0x0800d358
 8007d9c:	0800d360 	.word	0x0800d360

08007da0 <u8x8_d_ssd1306_128x64_vcomh0>:
  }
  return 1;
}

uint8_t u8x8_d_ssd1306_128x64_vcomh0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	460b      	mov	r3, r1
 8007dac:	72fb      	strb	r3, [r7, #11]
 8007dae:	4613      	mov	r3, r2
 8007db0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8007db2:	7aba      	ldrb	r2, [r7, #10]
 8007db4:	7af9      	ldrb	r1, [r7, #11]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f7ff ff49 	bl	8007c50 <u8x8_d_ssd1306_sh1106_generic>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <u8x8_d_ssd1306_128x64_vcomh0+0x28>
    return 1;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e014      	b.n	8007df2 <u8x8_d_ssd1306_128x64_vcomh0+0x52>
  
  switch(msg)
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	2b09      	cmp	r3, #9
 8007dcc:	d009      	beq.n	8007de2 <u8x8_d_ssd1306_128x64_vcomh0+0x42>
 8007dce:	2b0a      	cmp	r3, #10
 8007dd0:	d10c      	bne.n	8007dec <u8x8_d_ssd1306_128x64_vcomh0+0x4c>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f829 	bl	8007e2a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_vcomh0_init_seq);    
 8007dd8:	4908      	ldr	r1, [pc, #32]	; (8007dfc <u8x8_d_ssd1306_128x64_vcomh0+0x5c>)
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff fe48 	bl	8007a70 <u8x8_cad_SendSequence>
      break;
 8007de0:	e006      	b.n	8007df0 <u8x8_d_ssd1306_128x64_vcomh0+0x50>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8007de2:	4907      	ldr	r1, [pc, #28]	; (8007e00 <u8x8_d_ssd1306_128x64_vcomh0+0x60>)
 8007de4:	68f8      	ldr	r0, [r7, #12]
 8007de6:	f000 f80d 	bl	8007e04 <u8x8_d_helper_display_setup_memory>
      break;
 8007dea:	e001      	b.n	8007df0 <u8x8_d_ssd1306_128x64_vcomh0+0x50>
    default:
      return 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	e000      	b.n	8007df2 <u8x8_d_ssd1306_128x64_vcomh0+0x52>
  }
  return 1;
 8007df0:	2301      	movs	r3, #1
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	0800d310 	.word	0x0800d310
 8007e00:	0800d368 	.word	0x0800d368

08007e04 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	7c9a      	ldrb	r2, [r3, #18]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8007e20:	bf00      	nop
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr

08007e2a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8007e2a:	b590      	push	{r4, r7, lr}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	695c      	ldr	r4, [r3, #20]
 8007e36:	2300      	movs	r3, #0
 8007e38:	2200      	movs	r2, #0
 8007e3a:	2128      	movs	r1, #40	; 0x28
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68dc      	ldr	r4, [r3, #12]
 8007e44:	2300      	movs	r3, #0
 8007e46:	2200      	movs	r2, #0
 8007e48:	2114      	movs	r1, #20
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8007e4e:	2201      	movs	r2, #1
 8007e50:	214b      	movs	r1, #75	; 0x4b
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f886 	bl	8007f64 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	2129      	movs	r1, #41	; 0x29
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f87e 	bl	8007f64 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8007e68:	2200      	movs	r2, #0
 8007e6a:	214b      	movs	r1, #75	; 0x4b
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f879 	bl	8007f64 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	791b      	ldrb	r3, [r3, #4]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	2129      	movs	r1, #41	; 0x29
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 f871 	bl	8007f64 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8007e82:	2201      	movs	r2, #1
 8007e84:	214b      	movs	r1, #75	; 0x4b
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f86c 	bl	8007f64 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	795b      	ldrb	r3, [r3, #5]
 8007e92:	461a      	mov	r2, r3
 8007e94:	2129      	movs	r1, #41	; 0x29
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f864 	bl	8007f64 <u8x8_gpio_call>
}    
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd90      	pop	{r4, r7, pc}

08007ea4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8007ea4:	b590      	push	{r4, r7, lr}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	4608      	mov	r0, r1
 8007eae:	4611      	mov	r1, r2
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	70fb      	strb	r3, [r7, #3]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	70bb      	strb	r3, [r7, #2]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8007ec2:	78bb      	ldrb	r3, [r7, #2]
 8007ec4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8007ec6:	787b      	ldrb	r3, [r7, #1]
 8007ec8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	689c      	ldr	r4, [r3, #8]
 8007ed2:	f107 0308 	add.w	r3, r7, #8
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	210f      	movs	r1, #15
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	47a0      	blx	r4
 8007ede:	4603      	mov	r3, r0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd90      	pop	{r4, r7, pc}

08007ee8 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689c      	ldr	r4, [r3, #8]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2109      	movs	r1, #9
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	47a0      	blx	r4
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd90      	pop	{r4, r7, pc}

08007f06 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8007f06:	b590      	push	{r4, r7, lr}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689c      	ldr	r4, [r3, #8]
 8007f12:	2300      	movs	r3, #0
 8007f14:	2200      	movs	r2, #0
 8007f16:	210a      	movs	r1, #10
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	47a0      	blx	r4
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd90      	pop	{r4, r7, pc}

08007f24 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	689c      	ldr	r4, [r3, #8]
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	2300      	movs	r3, #0
 8007f38:	210b      	movs	r1, #11
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	47a0      	blx	r4
}
 8007f3e:	bf00      	nop
 8007f40:	370c      	adds	r7, #12
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd90      	pop	{r4, r7, pc}

08007f46 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8007f46:	b590      	push	{r4, r7, lr}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689c      	ldr	r4, [r3, #8]
 8007f52:	2300      	movs	r3, #0
 8007f54:	2200      	movs	r2, #0
 8007f56:	2110      	movs	r1, #16
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	47a0      	blx	r4
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd90      	pop	{r4, r7, pc}

08007f64 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
 8007f70:	4613      	mov	r3, r2
 8007f72:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	695c      	ldr	r4, [r3, #20]
 8007f78:	78ba      	ldrb	r2, [r7, #2]
 8007f7a:	78f9      	ldrb	r1, [r7, #3]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	47a0      	blx	r4
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd90      	pop	{r4, r7, pc}

08007f8a <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	607b      	str	r3, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	72fb      	strb	r3, [r7, #11]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bc80      	pop	{r7}
 8007fa6:	4770      	bx	lr

08007fa8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a13      	ldr	r2, [pc, #76]	; (8008008 <u8x8_SetupDefaults+0x60>)
 8007fba:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a12      	ldr	r2, [pc, #72]	; (8008008 <u8x8_SetupDefaults+0x60>)
 8007fc0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a10      	ldr	r2, [pc, #64]	; (8008008 <u8x8_SetupDefaults+0x60>)
 8007fc6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a0f      	ldr	r2, [pc, #60]	; (8008008 <u8x8_SetupDefaults+0x60>)
 8007fcc:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	22ff      	movs	r2, #255	; 0xff
 8007ff0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	22ff      	movs	r2, #255	; 0xff
 8007ff8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	08007f8b 	.word	0x08007f8b

0800800c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
 8008018:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff ffc4 	bl	8007fa8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7ff ff55 	bl	8007ee8 <u8x8_SetupMemory>
}
 800803e:	bf00      	nop
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <__errno>:
 8008048:	4b01      	ldr	r3, [pc, #4]	; (8008050 <__errno+0x8>)
 800804a:	6818      	ldr	r0, [r3, #0]
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	2000000c 	.word	0x2000000c

08008054 <__libc_init_array>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	2500      	movs	r5, #0
 8008058:	4e0c      	ldr	r6, [pc, #48]	; (800808c <__libc_init_array+0x38>)
 800805a:	4c0d      	ldr	r4, [pc, #52]	; (8008090 <__libc_init_array+0x3c>)
 800805c:	1ba4      	subs	r4, r4, r6
 800805e:	10a4      	asrs	r4, r4, #2
 8008060:	42a5      	cmp	r5, r4
 8008062:	d109      	bne.n	8008078 <__libc_init_array+0x24>
 8008064:	f002 f85e 	bl	800a124 <_init>
 8008068:	2500      	movs	r5, #0
 800806a:	4e0a      	ldr	r6, [pc, #40]	; (8008094 <__libc_init_array+0x40>)
 800806c:	4c0a      	ldr	r4, [pc, #40]	; (8008098 <__libc_init_array+0x44>)
 800806e:	1ba4      	subs	r4, r4, r6
 8008070:	10a4      	asrs	r4, r4, #2
 8008072:	42a5      	cmp	r5, r4
 8008074:	d105      	bne.n	8008082 <__libc_init_array+0x2e>
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800807c:	4798      	blx	r3
 800807e:	3501      	adds	r5, #1
 8008080:	e7ee      	b.n	8008060 <__libc_init_array+0xc>
 8008082:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008086:	4798      	blx	r3
 8008088:	3501      	adds	r5, #1
 800808a:	e7f2      	b.n	8008072 <__libc_init_array+0x1e>
 800808c:	0800d640 	.word	0x0800d640
 8008090:	0800d640 	.word	0x0800d640
 8008094:	0800d640 	.word	0x0800d640
 8008098:	0800d648 	.word	0x0800d648

0800809c <memset>:
 800809c:	4603      	mov	r3, r0
 800809e:	4402      	add	r2, r0
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d100      	bne.n	80080a6 <memset+0xa>
 80080a4:	4770      	bx	lr
 80080a6:	f803 1b01 	strb.w	r1, [r3], #1
 80080aa:	e7f9      	b.n	80080a0 <memset+0x4>

080080ac <__cvt>:
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b2:	461e      	mov	r6, r3
 80080b4:	bfbb      	ittet	lt
 80080b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80080ba:	461e      	movlt	r6, r3
 80080bc:	2300      	movge	r3, #0
 80080be:	232d      	movlt	r3, #45	; 0x2d
 80080c0:	b088      	sub	sp, #32
 80080c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80080c4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80080c8:	f027 0720 	bic.w	r7, r7, #32
 80080cc:	2f46      	cmp	r7, #70	; 0x46
 80080ce:	4614      	mov	r4, r2
 80080d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80080d2:	700b      	strb	r3, [r1, #0]
 80080d4:	d004      	beq.n	80080e0 <__cvt+0x34>
 80080d6:	2f45      	cmp	r7, #69	; 0x45
 80080d8:	d100      	bne.n	80080dc <__cvt+0x30>
 80080da:	3501      	adds	r5, #1
 80080dc:	2302      	movs	r3, #2
 80080de:	e000      	b.n	80080e2 <__cvt+0x36>
 80080e0:	2303      	movs	r3, #3
 80080e2:	aa07      	add	r2, sp, #28
 80080e4:	9204      	str	r2, [sp, #16]
 80080e6:	aa06      	add	r2, sp, #24
 80080e8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80080ec:	e9cd 3500 	strd	r3, r5, [sp]
 80080f0:	4622      	mov	r2, r4
 80080f2:	4633      	mov	r3, r6
 80080f4:	f000 fcd8 	bl	8008aa8 <_dtoa_r>
 80080f8:	2f47      	cmp	r7, #71	; 0x47
 80080fa:	4680      	mov	r8, r0
 80080fc:	d102      	bne.n	8008104 <__cvt+0x58>
 80080fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008100:	07db      	lsls	r3, r3, #31
 8008102:	d526      	bpl.n	8008152 <__cvt+0xa6>
 8008104:	2f46      	cmp	r7, #70	; 0x46
 8008106:	eb08 0905 	add.w	r9, r8, r5
 800810a:	d111      	bne.n	8008130 <__cvt+0x84>
 800810c:	f898 3000 	ldrb.w	r3, [r8]
 8008110:	2b30      	cmp	r3, #48	; 0x30
 8008112:	d10a      	bne.n	800812a <__cvt+0x7e>
 8008114:	2200      	movs	r2, #0
 8008116:	2300      	movs	r3, #0
 8008118:	4620      	mov	r0, r4
 800811a:	4631      	mov	r1, r6
 800811c:	f7f8 fc44 	bl	80009a8 <__aeabi_dcmpeq>
 8008120:	b918      	cbnz	r0, 800812a <__cvt+0x7e>
 8008122:	f1c5 0501 	rsb	r5, r5, #1
 8008126:	f8ca 5000 	str.w	r5, [sl]
 800812a:	f8da 3000 	ldr.w	r3, [sl]
 800812e:	4499      	add	r9, r3
 8008130:	2200      	movs	r2, #0
 8008132:	2300      	movs	r3, #0
 8008134:	4620      	mov	r0, r4
 8008136:	4631      	mov	r1, r6
 8008138:	f7f8 fc36 	bl	80009a8 <__aeabi_dcmpeq>
 800813c:	b938      	cbnz	r0, 800814e <__cvt+0xa2>
 800813e:	2230      	movs	r2, #48	; 0x30
 8008140:	9b07      	ldr	r3, [sp, #28]
 8008142:	454b      	cmp	r3, r9
 8008144:	d205      	bcs.n	8008152 <__cvt+0xa6>
 8008146:	1c59      	adds	r1, r3, #1
 8008148:	9107      	str	r1, [sp, #28]
 800814a:	701a      	strb	r2, [r3, #0]
 800814c:	e7f8      	b.n	8008140 <__cvt+0x94>
 800814e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008152:	4640      	mov	r0, r8
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008158:	eba3 0308 	sub.w	r3, r3, r8
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	b008      	add	sp, #32
 8008160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008164 <__exponent>:
 8008164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008166:	2900      	cmp	r1, #0
 8008168:	bfb4      	ite	lt
 800816a:	232d      	movlt	r3, #45	; 0x2d
 800816c:	232b      	movge	r3, #43	; 0x2b
 800816e:	4604      	mov	r4, r0
 8008170:	bfb8      	it	lt
 8008172:	4249      	neglt	r1, r1
 8008174:	2909      	cmp	r1, #9
 8008176:	f804 2b02 	strb.w	r2, [r4], #2
 800817a:	7043      	strb	r3, [r0, #1]
 800817c:	dd21      	ble.n	80081c2 <__exponent+0x5e>
 800817e:	f10d 0307 	add.w	r3, sp, #7
 8008182:	461f      	mov	r7, r3
 8008184:	260a      	movs	r6, #10
 8008186:	fb91 f5f6 	sdiv	r5, r1, r6
 800818a:	fb06 1115 	mls	r1, r6, r5, r1
 800818e:	2d09      	cmp	r5, #9
 8008190:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8008194:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008198:	f103 32ff 	add.w	r2, r3, #4294967295
 800819c:	4629      	mov	r1, r5
 800819e:	dc09      	bgt.n	80081b4 <__exponent+0x50>
 80081a0:	3130      	adds	r1, #48	; 0x30
 80081a2:	3b02      	subs	r3, #2
 80081a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80081a8:	42bb      	cmp	r3, r7
 80081aa:	4622      	mov	r2, r4
 80081ac:	d304      	bcc.n	80081b8 <__exponent+0x54>
 80081ae:	1a10      	subs	r0, r2, r0
 80081b0:	b003      	add	sp, #12
 80081b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b4:	4613      	mov	r3, r2
 80081b6:	e7e6      	b.n	8008186 <__exponent+0x22>
 80081b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081bc:	f804 2b01 	strb.w	r2, [r4], #1
 80081c0:	e7f2      	b.n	80081a8 <__exponent+0x44>
 80081c2:	2330      	movs	r3, #48	; 0x30
 80081c4:	4419      	add	r1, r3
 80081c6:	7083      	strb	r3, [r0, #2]
 80081c8:	1d02      	adds	r2, r0, #4
 80081ca:	70c1      	strb	r1, [r0, #3]
 80081cc:	e7ef      	b.n	80081ae <__exponent+0x4a>
	...

080081d0 <_printf_float>:
 80081d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d4:	b091      	sub	sp, #68	; 0x44
 80081d6:	460c      	mov	r4, r1
 80081d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80081da:	4693      	mov	fp, r2
 80081dc:	461e      	mov	r6, r3
 80081de:	4605      	mov	r5, r0
 80081e0:	f001 fa16 	bl	8009610 <_localeconv_r>
 80081e4:	6803      	ldr	r3, [r0, #0]
 80081e6:	4618      	mov	r0, r3
 80081e8:	9309      	str	r3, [sp, #36]	; 0x24
 80081ea:	f7f7 ffb1 	bl	8000150 <strlen>
 80081ee:	2300      	movs	r3, #0
 80081f0:	930e      	str	r3, [sp, #56]	; 0x38
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	900a      	str	r0, [sp, #40]	; 0x28
 80081f6:	3307      	adds	r3, #7
 80081f8:	f023 0307 	bic.w	r3, r3, #7
 80081fc:	f103 0208 	add.w	r2, r3, #8
 8008200:	f894 8018 	ldrb.w	r8, [r4, #24]
 8008204:	f8d4 a000 	ldr.w	sl, [r4]
 8008208:	603a      	str	r2, [r7, #0]
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008212:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8008216:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800821a:	930b      	str	r3, [sp, #44]	; 0x2c
 800821c:	f04f 32ff 	mov.w	r2, #4294967295
 8008220:	4ba6      	ldr	r3, [pc, #664]	; (80084bc <_printf_float+0x2ec>)
 8008222:	4638      	mov	r0, r7
 8008224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008226:	f7f8 fbf1 	bl	8000a0c <__aeabi_dcmpun>
 800822a:	bb68      	cbnz	r0, 8008288 <_printf_float+0xb8>
 800822c:	f04f 32ff 	mov.w	r2, #4294967295
 8008230:	4ba2      	ldr	r3, [pc, #648]	; (80084bc <_printf_float+0x2ec>)
 8008232:	4638      	mov	r0, r7
 8008234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008236:	f7f8 fbcb 	bl	80009d0 <__aeabi_dcmple>
 800823a:	bb28      	cbnz	r0, 8008288 <_printf_float+0xb8>
 800823c:	2200      	movs	r2, #0
 800823e:	2300      	movs	r3, #0
 8008240:	4638      	mov	r0, r7
 8008242:	4649      	mov	r1, r9
 8008244:	f7f8 fbba 	bl	80009bc <__aeabi_dcmplt>
 8008248:	b110      	cbz	r0, 8008250 <_printf_float+0x80>
 800824a:	232d      	movs	r3, #45	; 0x2d
 800824c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008250:	4f9b      	ldr	r7, [pc, #620]	; (80084c0 <_printf_float+0x2f0>)
 8008252:	4b9c      	ldr	r3, [pc, #624]	; (80084c4 <_printf_float+0x2f4>)
 8008254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008258:	bf98      	it	ls
 800825a:	461f      	movls	r7, r3
 800825c:	2303      	movs	r3, #3
 800825e:	f04f 0900 	mov.w	r9, #0
 8008262:	6123      	str	r3, [r4, #16]
 8008264:	f02a 0304 	bic.w	r3, sl, #4
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	9600      	str	r6, [sp, #0]
 800826c:	465b      	mov	r3, fp
 800826e:	aa0f      	add	r2, sp, #60	; 0x3c
 8008270:	4621      	mov	r1, r4
 8008272:	4628      	mov	r0, r5
 8008274:	f000 f9e2 	bl	800863c <_printf_common>
 8008278:	3001      	adds	r0, #1
 800827a:	f040 8090 	bne.w	800839e <_printf_float+0x1ce>
 800827e:	f04f 30ff 	mov.w	r0, #4294967295
 8008282:	b011      	add	sp, #68	; 0x44
 8008284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008288:	463a      	mov	r2, r7
 800828a:	464b      	mov	r3, r9
 800828c:	4638      	mov	r0, r7
 800828e:	4649      	mov	r1, r9
 8008290:	f7f8 fbbc 	bl	8000a0c <__aeabi_dcmpun>
 8008294:	b110      	cbz	r0, 800829c <_printf_float+0xcc>
 8008296:	4f8c      	ldr	r7, [pc, #560]	; (80084c8 <_printf_float+0x2f8>)
 8008298:	4b8c      	ldr	r3, [pc, #560]	; (80084cc <_printf_float+0x2fc>)
 800829a:	e7db      	b.n	8008254 <_printf_float+0x84>
 800829c:	6863      	ldr	r3, [r4, #4]
 800829e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80082a2:	1c59      	adds	r1, r3, #1
 80082a4:	a80d      	add	r0, sp, #52	; 0x34
 80082a6:	a90e      	add	r1, sp, #56	; 0x38
 80082a8:	d140      	bne.n	800832c <_printf_float+0x15c>
 80082aa:	2306      	movs	r3, #6
 80082ac:	6063      	str	r3, [r4, #4]
 80082ae:	f04f 0c00 	mov.w	ip, #0
 80082b2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80082b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80082ba:	6863      	ldr	r3, [r4, #4]
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	463a      	mov	r2, r7
 80082c6:	464b      	mov	r3, r9
 80082c8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80082cc:	4628      	mov	r0, r5
 80082ce:	f7ff feed 	bl	80080ac <__cvt>
 80082d2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80082d6:	2b47      	cmp	r3, #71	; 0x47
 80082d8:	4607      	mov	r7, r0
 80082da:	d109      	bne.n	80082f0 <_printf_float+0x120>
 80082dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082de:	1cd8      	adds	r0, r3, #3
 80082e0:	db02      	blt.n	80082e8 <_printf_float+0x118>
 80082e2:	6862      	ldr	r2, [r4, #4]
 80082e4:	4293      	cmp	r3, r2
 80082e6:	dd47      	ble.n	8008378 <_printf_float+0x1a8>
 80082e8:	f1a8 0802 	sub.w	r8, r8, #2
 80082ec:	fa5f f888 	uxtb.w	r8, r8
 80082f0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80082f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80082f6:	d824      	bhi.n	8008342 <_printf_float+0x172>
 80082f8:	3901      	subs	r1, #1
 80082fa:	4642      	mov	r2, r8
 80082fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008300:	910d      	str	r1, [sp, #52]	; 0x34
 8008302:	f7ff ff2f 	bl	8008164 <__exponent>
 8008306:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008308:	4681      	mov	r9, r0
 800830a:	1813      	adds	r3, r2, r0
 800830c:	2a01      	cmp	r2, #1
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	dc02      	bgt.n	8008318 <_printf_float+0x148>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	07d1      	lsls	r1, r2, #31
 8008316:	d501      	bpl.n	800831c <_printf_float+0x14c>
 8008318:	3301      	adds	r3, #1
 800831a:	6123      	str	r3, [r4, #16]
 800831c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008320:	2b00      	cmp	r3, #0
 8008322:	d0a2      	beq.n	800826a <_printf_float+0x9a>
 8008324:	232d      	movs	r3, #45	; 0x2d
 8008326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832a:	e79e      	b.n	800826a <_printf_float+0x9a>
 800832c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8008330:	f000 816e 	beq.w	8008610 <_printf_float+0x440>
 8008334:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008338:	d1b9      	bne.n	80082ae <_printf_float+0xde>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1b7      	bne.n	80082ae <_printf_float+0xde>
 800833e:	2301      	movs	r3, #1
 8008340:	e7b4      	b.n	80082ac <_printf_float+0xdc>
 8008342:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8008346:	d119      	bne.n	800837c <_printf_float+0x1ac>
 8008348:	2900      	cmp	r1, #0
 800834a:	6863      	ldr	r3, [r4, #4]
 800834c:	dd0c      	ble.n	8008368 <_printf_float+0x198>
 800834e:	6121      	str	r1, [r4, #16]
 8008350:	b913      	cbnz	r3, 8008358 <_printf_float+0x188>
 8008352:	6822      	ldr	r2, [r4, #0]
 8008354:	07d2      	lsls	r2, r2, #31
 8008356:	d502      	bpl.n	800835e <_printf_float+0x18e>
 8008358:	3301      	adds	r3, #1
 800835a:	440b      	add	r3, r1
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008360:	f04f 0900 	mov.w	r9, #0
 8008364:	65a3      	str	r3, [r4, #88]	; 0x58
 8008366:	e7d9      	b.n	800831c <_printf_float+0x14c>
 8008368:	b913      	cbnz	r3, 8008370 <_printf_float+0x1a0>
 800836a:	6822      	ldr	r2, [r4, #0]
 800836c:	07d0      	lsls	r0, r2, #31
 800836e:	d501      	bpl.n	8008374 <_printf_float+0x1a4>
 8008370:	3302      	adds	r3, #2
 8008372:	e7f3      	b.n	800835c <_printf_float+0x18c>
 8008374:	2301      	movs	r3, #1
 8008376:	e7f1      	b.n	800835c <_printf_float+0x18c>
 8008378:	f04f 0867 	mov.w	r8, #103	; 0x67
 800837c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008380:	4293      	cmp	r3, r2
 8008382:	db05      	blt.n	8008390 <_printf_float+0x1c0>
 8008384:	6822      	ldr	r2, [r4, #0]
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	07d1      	lsls	r1, r2, #31
 800838a:	d5e8      	bpl.n	800835e <_printf_float+0x18e>
 800838c:	3301      	adds	r3, #1
 800838e:	e7e5      	b.n	800835c <_printf_float+0x18c>
 8008390:	2b00      	cmp	r3, #0
 8008392:	bfcc      	ite	gt
 8008394:	2301      	movgt	r3, #1
 8008396:	f1c3 0302 	rsble	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	e7de      	b.n	800835c <_printf_float+0x18c>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	055a      	lsls	r2, r3, #21
 80083a2:	d407      	bmi.n	80083b4 <_printf_float+0x1e4>
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	463a      	mov	r2, r7
 80083a8:	4659      	mov	r1, fp
 80083aa:	4628      	mov	r0, r5
 80083ac:	47b0      	blx	r6
 80083ae:	3001      	adds	r0, #1
 80083b0:	d129      	bne.n	8008406 <_printf_float+0x236>
 80083b2:	e764      	b.n	800827e <_printf_float+0xae>
 80083b4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80083b8:	f240 80d7 	bls.w	800856a <_printf_float+0x39a>
 80083bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083c0:	2200      	movs	r2, #0
 80083c2:	2300      	movs	r3, #0
 80083c4:	f7f8 faf0 	bl	80009a8 <__aeabi_dcmpeq>
 80083c8:	b388      	cbz	r0, 800842e <_printf_float+0x25e>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4a40      	ldr	r2, [pc, #256]	; (80084d0 <_printf_float+0x300>)
 80083ce:	4659      	mov	r1, fp
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b0      	blx	r6
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f af52 	beq.w	800827e <_printf_float+0xae>
 80083da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083de:	429a      	cmp	r2, r3
 80083e0:	db02      	blt.n	80083e8 <_printf_float+0x218>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	07d8      	lsls	r0, r3, #31
 80083e6:	d50e      	bpl.n	8008406 <_printf_float+0x236>
 80083e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083ec:	4659      	mov	r1, fp
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b0      	blx	r6
 80083f2:	3001      	adds	r0, #1
 80083f4:	f43f af43 	beq.w	800827e <_printf_float+0xae>
 80083f8:	2700      	movs	r7, #0
 80083fa:	f104 081a 	add.w	r8, r4, #26
 80083fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008400:	3b01      	subs	r3, #1
 8008402:	42bb      	cmp	r3, r7
 8008404:	dc09      	bgt.n	800841a <_printf_float+0x24a>
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	079f      	lsls	r7, r3, #30
 800840a:	f100 80fd 	bmi.w	8008608 <_printf_float+0x438>
 800840e:	68e0      	ldr	r0, [r4, #12]
 8008410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008412:	4298      	cmp	r0, r3
 8008414:	bfb8      	it	lt
 8008416:	4618      	movlt	r0, r3
 8008418:	e733      	b.n	8008282 <_printf_float+0xb2>
 800841a:	2301      	movs	r3, #1
 800841c:	4642      	mov	r2, r8
 800841e:	4659      	mov	r1, fp
 8008420:	4628      	mov	r0, r5
 8008422:	47b0      	blx	r6
 8008424:	3001      	adds	r0, #1
 8008426:	f43f af2a 	beq.w	800827e <_printf_float+0xae>
 800842a:	3701      	adds	r7, #1
 800842c:	e7e7      	b.n	80083fe <_printf_float+0x22e>
 800842e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008430:	2b00      	cmp	r3, #0
 8008432:	dc2b      	bgt.n	800848c <_printf_float+0x2bc>
 8008434:	2301      	movs	r3, #1
 8008436:	4a26      	ldr	r2, [pc, #152]	; (80084d0 <_printf_float+0x300>)
 8008438:	4659      	mov	r1, fp
 800843a:	4628      	mov	r0, r5
 800843c:	47b0      	blx	r6
 800843e:	3001      	adds	r0, #1
 8008440:	f43f af1d 	beq.w	800827e <_printf_float+0xae>
 8008444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008446:	b923      	cbnz	r3, 8008452 <_printf_float+0x282>
 8008448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800844a:	b913      	cbnz	r3, 8008452 <_printf_float+0x282>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d5d9      	bpl.n	8008406 <_printf_float+0x236>
 8008452:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008456:	4659      	mov	r1, fp
 8008458:	4628      	mov	r0, r5
 800845a:	47b0      	blx	r6
 800845c:	3001      	adds	r0, #1
 800845e:	f43f af0e 	beq.w	800827e <_printf_float+0xae>
 8008462:	f04f 0800 	mov.w	r8, #0
 8008466:	f104 091a 	add.w	r9, r4, #26
 800846a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800846c:	425b      	negs	r3, r3
 800846e:	4543      	cmp	r3, r8
 8008470:	dc01      	bgt.n	8008476 <_printf_float+0x2a6>
 8008472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008474:	e797      	b.n	80083a6 <_printf_float+0x1d6>
 8008476:	2301      	movs	r3, #1
 8008478:	464a      	mov	r2, r9
 800847a:	4659      	mov	r1, fp
 800847c:	4628      	mov	r0, r5
 800847e:	47b0      	blx	r6
 8008480:	3001      	adds	r0, #1
 8008482:	f43f aefc 	beq.w	800827e <_printf_float+0xae>
 8008486:	f108 0801 	add.w	r8, r8, #1
 800848a:	e7ee      	b.n	800846a <_printf_float+0x29a>
 800848c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800848e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008490:	429a      	cmp	r2, r3
 8008492:	bfa8      	it	ge
 8008494:	461a      	movge	r2, r3
 8008496:	2a00      	cmp	r2, #0
 8008498:	4690      	mov	r8, r2
 800849a:	dd07      	ble.n	80084ac <_printf_float+0x2dc>
 800849c:	4613      	mov	r3, r2
 800849e:	4659      	mov	r1, fp
 80084a0:	463a      	mov	r2, r7
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b0      	blx	r6
 80084a6:	3001      	adds	r0, #1
 80084a8:	f43f aee9 	beq.w	800827e <_printf_float+0xae>
 80084ac:	f104 031a 	add.w	r3, r4, #26
 80084b0:	f04f 0a00 	mov.w	sl, #0
 80084b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80084b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ba:	e015      	b.n	80084e8 <_printf_float+0x318>
 80084bc:	7fefffff 	.word	0x7fefffff
 80084c0:	0800d384 	.word	0x0800d384
 80084c4:	0800d380 	.word	0x0800d380
 80084c8:	0800d38c 	.word	0x0800d38c
 80084cc:	0800d388 	.word	0x0800d388
 80084d0:	0800d390 	.word	0x0800d390
 80084d4:	2301      	movs	r3, #1
 80084d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084d8:	4659      	mov	r1, fp
 80084da:	4628      	mov	r0, r5
 80084dc:	47b0      	blx	r6
 80084de:	3001      	adds	r0, #1
 80084e0:	f43f aecd 	beq.w	800827e <_printf_float+0xae>
 80084e4:	f10a 0a01 	add.w	sl, sl, #1
 80084e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80084ec:	eba9 0308 	sub.w	r3, r9, r8
 80084f0:	4553      	cmp	r3, sl
 80084f2:	dcef      	bgt.n	80084d4 <_printf_float+0x304>
 80084f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80084f8:	429a      	cmp	r2, r3
 80084fa:	444f      	add	r7, r9
 80084fc:	db14      	blt.n	8008528 <_printf_float+0x358>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	07da      	lsls	r2, r3, #31
 8008502:	d411      	bmi.n	8008528 <_printf_float+0x358>
 8008504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008506:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008508:	eba3 0209 	sub.w	r2, r3, r9
 800850c:	eba3 0901 	sub.w	r9, r3, r1
 8008510:	4591      	cmp	r9, r2
 8008512:	bfa8      	it	ge
 8008514:	4691      	movge	r9, r2
 8008516:	f1b9 0f00 	cmp.w	r9, #0
 800851a:	dc0d      	bgt.n	8008538 <_printf_float+0x368>
 800851c:	2700      	movs	r7, #0
 800851e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008522:	f104 081a 	add.w	r8, r4, #26
 8008526:	e018      	b.n	800855a <_printf_float+0x38a>
 8008528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800852c:	4659      	mov	r1, fp
 800852e:	4628      	mov	r0, r5
 8008530:	47b0      	blx	r6
 8008532:	3001      	adds	r0, #1
 8008534:	d1e6      	bne.n	8008504 <_printf_float+0x334>
 8008536:	e6a2      	b.n	800827e <_printf_float+0xae>
 8008538:	464b      	mov	r3, r9
 800853a:	463a      	mov	r2, r7
 800853c:	4659      	mov	r1, fp
 800853e:	4628      	mov	r0, r5
 8008540:	47b0      	blx	r6
 8008542:	3001      	adds	r0, #1
 8008544:	d1ea      	bne.n	800851c <_printf_float+0x34c>
 8008546:	e69a      	b.n	800827e <_printf_float+0xae>
 8008548:	2301      	movs	r3, #1
 800854a:	4642      	mov	r2, r8
 800854c:	4659      	mov	r1, fp
 800854e:	4628      	mov	r0, r5
 8008550:	47b0      	blx	r6
 8008552:	3001      	adds	r0, #1
 8008554:	f43f ae93 	beq.w	800827e <_printf_float+0xae>
 8008558:	3701      	adds	r7, #1
 800855a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800855e:	1a9b      	subs	r3, r3, r2
 8008560:	eba3 0309 	sub.w	r3, r3, r9
 8008564:	42bb      	cmp	r3, r7
 8008566:	dcef      	bgt.n	8008548 <_printf_float+0x378>
 8008568:	e74d      	b.n	8008406 <_printf_float+0x236>
 800856a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800856c:	2a01      	cmp	r2, #1
 800856e:	dc01      	bgt.n	8008574 <_printf_float+0x3a4>
 8008570:	07db      	lsls	r3, r3, #31
 8008572:	d538      	bpl.n	80085e6 <_printf_float+0x416>
 8008574:	2301      	movs	r3, #1
 8008576:	463a      	mov	r2, r7
 8008578:	4659      	mov	r1, fp
 800857a:	4628      	mov	r0, r5
 800857c:	47b0      	blx	r6
 800857e:	3001      	adds	r0, #1
 8008580:	f43f ae7d 	beq.w	800827e <_printf_float+0xae>
 8008584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008588:	4659      	mov	r1, fp
 800858a:	4628      	mov	r0, r5
 800858c:	47b0      	blx	r6
 800858e:	3001      	adds	r0, #1
 8008590:	f107 0701 	add.w	r7, r7, #1
 8008594:	f43f ae73 	beq.w	800827e <_printf_float+0xae>
 8008598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800859c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800859e:	2200      	movs	r2, #0
 80085a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80085a4:	2300      	movs	r3, #0
 80085a6:	f7f8 f9ff 	bl	80009a8 <__aeabi_dcmpeq>
 80085aa:	b9c0      	cbnz	r0, 80085de <_printf_float+0x40e>
 80085ac:	4643      	mov	r3, r8
 80085ae:	463a      	mov	r2, r7
 80085b0:	4659      	mov	r1, fp
 80085b2:	4628      	mov	r0, r5
 80085b4:	47b0      	blx	r6
 80085b6:	3001      	adds	r0, #1
 80085b8:	d10d      	bne.n	80085d6 <_printf_float+0x406>
 80085ba:	e660      	b.n	800827e <_printf_float+0xae>
 80085bc:	2301      	movs	r3, #1
 80085be:	4642      	mov	r2, r8
 80085c0:	4659      	mov	r1, fp
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b0      	blx	r6
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f ae59 	beq.w	800827e <_printf_float+0xae>
 80085cc:	3701      	adds	r7, #1
 80085ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085d0:	3b01      	subs	r3, #1
 80085d2:	42bb      	cmp	r3, r7
 80085d4:	dcf2      	bgt.n	80085bc <_printf_float+0x3ec>
 80085d6:	464b      	mov	r3, r9
 80085d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085dc:	e6e4      	b.n	80083a8 <_printf_float+0x1d8>
 80085de:	2700      	movs	r7, #0
 80085e0:	f104 081a 	add.w	r8, r4, #26
 80085e4:	e7f3      	b.n	80085ce <_printf_float+0x3fe>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e7e1      	b.n	80085ae <_printf_float+0x3de>
 80085ea:	2301      	movs	r3, #1
 80085ec:	4642      	mov	r2, r8
 80085ee:	4659      	mov	r1, fp
 80085f0:	4628      	mov	r0, r5
 80085f2:	47b0      	blx	r6
 80085f4:	3001      	adds	r0, #1
 80085f6:	f43f ae42 	beq.w	800827e <_printf_float+0xae>
 80085fa:	3701      	adds	r7, #1
 80085fc:	68e3      	ldr	r3, [r4, #12]
 80085fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	42bb      	cmp	r3, r7
 8008604:	dcf1      	bgt.n	80085ea <_printf_float+0x41a>
 8008606:	e702      	b.n	800840e <_printf_float+0x23e>
 8008608:	2700      	movs	r7, #0
 800860a:	f104 0819 	add.w	r8, r4, #25
 800860e:	e7f5      	b.n	80085fc <_printf_float+0x42c>
 8008610:	2b00      	cmp	r3, #0
 8008612:	f43f ae94 	beq.w	800833e <_printf_float+0x16e>
 8008616:	f04f 0c00 	mov.w	ip, #0
 800861a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800861e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8008622:	6022      	str	r2, [r4, #0]
 8008624:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8008628:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	463a      	mov	r2, r7
 8008630:	464b      	mov	r3, r9
 8008632:	4628      	mov	r0, r5
 8008634:	f7ff fd3a 	bl	80080ac <__cvt>
 8008638:	4607      	mov	r7, r0
 800863a:	e64f      	b.n	80082dc <_printf_float+0x10c>

0800863c <_printf_common>:
 800863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	4691      	mov	r9, r2
 8008642:	461f      	mov	r7, r3
 8008644:	688a      	ldr	r2, [r1, #8]
 8008646:	690b      	ldr	r3, [r1, #16]
 8008648:	4606      	mov	r6, r0
 800864a:	4293      	cmp	r3, r2
 800864c:	bfb8      	it	lt
 800864e:	4613      	movlt	r3, r2
 8008650:	f8c9 3000 	str.w	r3, [r9]
 8008654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008658:	460c      	mov	r4, r1
 800865a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800865e:	b112      	cbz	r2, 8008666 <_printf_common+0x2a>
 8008660:	3301      	adds	r3, #1
 8008662:	f8c9 3000 	str.w	r3, [r9]
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	0699      	lsls	r1, r3, #26
 800866a:	bf42      	ittt	mi
 800866c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008670:	3302      	addmi	r3, #2
 8008672:	f8c9 3000 	strmi.w	r3, [r9]
 8008676:	6825      	ldr	r5, [r4, #0]
 8008678:	f015 0506 	ands.w	r5, r5, #6
 800867c:	d107      	bne.n	800868e <_printf_common+0x52>
 800867e:	f104 0a19 	add.w	sl, r4, #25
 8008682:	68e3      	ldr	r3, [r4, #12]
 8008684:	f8d9 2000 	ldr.w	r2, [r9]
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	42ab      	cmp	r3, r5
 800868c:	dc29      	bgt.n	80086e2 <_printf_common+0xa6>
 800868e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	3300      	adds	r3, #0
 8008696:	bf18      	it	ne
 8008698:	2301      	movne	r3, #1
 800869a:	0692      	lsls	r2, r2, #26
 800869c:	d42e      	bmi.n	80086fc <_printf_common+0xc0>
 800869e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086a2:	4639      	mov	r1, r7
 80086a4:	4630      	mov	r0, r6
 80086a6:	47c0      	blx	r8
 80086a8:	3001      	adds	r0, #1
 80086aa:	d021      	beq.n	80086f0 <_printf_common+0xb4>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	68e5      	ldr	r5, [r4, #12]
 80086b0:	f003 0306 	and.w	r3, r3, #6
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	bf18      	it	ne
 80086b8:	2500      	movne	r5, #0
 80086ba:	f8d9 2000 	ldr.w	r2, [r9]
 80086be:	f04f 0900 	mov.w	r9, #0
 80086c2:	bf08      	it	eq
 80086c4:	1aad      	subeq	r5, r5, r2
 80086c6:	68a3      	ldr	r3, [r4, #8]
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	bf08      	it	eq
 80086cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086d0:	4293      	cmp	r3, r2
 80086d2:	bfc4      	itt	gt
 80086d4:	1a9b      	subgt	r3, r3, r2
 80086d6:	18ed      	addgt	r5, r5, r3
 80086d8:	341a      	adds	r4, #26
 80086da:	454d      	cmp	r5, r9
 80086dc:	d11a      	bne.n	8008714 <_printf_common+0xd8>
 80086de:	2000      	movs	r0, #0
 80086e0:	e008      	b.n	80086f4 <_printf_common+0xb8>
 80086e2:	2301      	movs	r3, #1
 80086e4:	4652      	mov	r2, sl
 80086e6:	4639      	mov	r1, r7
 80086e8:	4630      	mov	r0, r6
 80086ea:	47c0      	blx	r8
 80086ec:	3001      	adds	r0, #1
 80086ee:	d103      	bne.n	80086f8 <_printf_common+0xbc>
 80086f0:	f04f 30ff 	mov.w	r0, #4294967295
 80086f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f8:	3501      	adds	r5, #1
 80086fa:	e7c2      	b.n	8008682 <_printf_common+0x46>
 80086fc:	2030      	movs	r0, #48	; 0x30
 80086fe:	18e1      	adds	r1, r4, r3
 8008700:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008704:	1c5a      	adds	r2, r3, #1
 8008706:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800870a:	4422      	add	r2, r4
 800870c:	3302      	adds	r3, #2
 800870e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008712:	e7c4      	b.n	800869e <_printf_common+0x62>
 8008714:	2301      	movs	r3, #1
 8008716:	4622      	mov	r2, r4
 8008718:	4639      	mov	r1, r7
 800871a:	4630      	mov	r0, r6
 800871c:	47c0      	blx	r8
 800871e:	3001      	adds	r0, #1
 8008720:	d0e6      	beq.n	80086f0 <_printf_common+0xb4>
 8008722:	f109 0901 	add.w	r9, r9, #1
 8008726:	e7d8      	b.n	80086da <_printf_common+0x9e>

08008728 <_printf_i>:
 8008728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800872c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008730:	460c      	mov	r4, r1
 8008732:	7e09      	ldrb	r1, [r1, #24]
 8008734:	b085      	sub	sp, #20
 8008736:	296e      	cmp	r1, #110	; 0x6e
 8008738:	4617      	mov	r7, r2
 800873a:	4606      	mov	r6, r0
 800873c:	4698      	mov	r8, r3
 800873e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008740:	f000 80b3 	beq.w	80088aa <_printf_i+0x182>
 8008744:	d822      	bhi.n	800878c <_printf_i+0x64>
 8008746:	2963      	cmp	r1, #99	; 0x63
 8008748:	d036      	beq.n	80087b8 <_printf_i+0x90>
 800874a:	d80a      	bhi.n	8008762 <_printf_i+0x3a>
 800874c:	2900      	cmp	r1, #0
 800874e:	f000 80b9 	beq.w	80088c4 <_printf_i+0x19c>
 8008752:	2958      	cmp	r1, #88	; 0x58
 8008754:	f000 8083 	beq.w	800885e <_printf_i+0x136>
 8008758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800875c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008760:	e032      	b.n	80087c8 <_printf_i+0xa0>
 8008762:	2964      	cmp	r1, #100	; 0x64
 8008764:	d001      	beq.n	800876a <_printf_i+0x42>
 8008766:	2969      	cmp	r1, #105	; 0x69
 8008768:	d1f6      	bne.n	8008758 <_printf_i+0x30>
 800876a:	6820      	ldr	r0, [r4, #0]
 800876c:	6813      	ldr	r3, [r2, #0]
 800876e:	0605      	lsls	r5, r0, #24
 8008770:	f103 0104 	add.w	r1, r3, #4
 8008774:	d52a      	bpl.n	80087cc <_printf_i+0xa4>
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6011      	str	r1, [r2, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	da03      	bge.n	8008786 <_printf_i+0x5e>
 800877e:	222d      	movs	r2, #45	; 0x2d
 8008780:	425b      	negs	r3, r3
 8008782:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008786:	486f      	ldr	r0, [pc, #444]	; (8008944 <_printf_i+0x21c>)
 8008788:	220a      	movs	r2, #10
 800878a:	e039      	b.n	8008800 <_printf_i+0xd8>
 800878c:	2973      	cmp	r1, #115	; 0x73
 800878e:	f000 809d 	beq.w	80088cc <_printf_i+0x1a4>
 8008792:	d808      	bhi.n	80087a6 <_printf_i+0x7e>
 8008794:	296f      	cmp	r1, #111	; 0x6f
 8008796:	d020      	beq.n	80087da <_printf_i+0xb2>
 8008798:	2970      	cmp	r1, #112	; 0x70
 800879a:	d1dd      	bne.n	8008758 <_printf_i+0x30>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	f043 0320 	orr.w	r3, r3, #32
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	e003      	b.n	80087ae <_printf_i+0x86>
 80087a6:	2975      	cmp	r1, #117	; 0x75
 80087a8:	d017      	beq.n	80087da <_printf_i+0xb2>
 80087aa:	2978      	cmp	r1, #120	; 0x78
 80087ac:	d1d4      	bne.n	8008758 <_printf_i+0x30>
 80087ae:	2378      	movs	r3, #120	; 0x78
 80087b0:	4865      	ldr	r0, [pc, #404]	; (8008948 <_printf_i+0x220>)
 80087b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087b6:	e055      	b.n	8008864 <_printf_i+0x13c>
 80087b8:	6813      	ldr	r3, [r2, #0]
 80087ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087be:	1d19      	adds	r1, r3, #4
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6011      	str	r1, [r2, #0]
 80087c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c8:	2301      	movs	r3, #1
 80087ca:	e08c      	b.n	80088e6 <_printf_i+0x1be>
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087d2:	6011      	str	r1, [r2, #0]
 80087d4:	bf18      	it	ne
 80087d6:	b21b      	sxthne	r3, r3
 80087d8:	e7cf      	b.n	800877a <_printf_i+0x52>
 80087da:	6813      	ldr	r3, [r2, #0]
 80087dc:	6825      	ldr	r5, [r4, #0]
 80087de:	1d18      	adds	r0, r3, #4
 80087e0:	6010      	str	r0, [r2, #0]
 80087e2:	0628      	lsls	r0, r5, #24
 80087e4:	d501      	bpl.n	80087ea <_printf_i+0xc2>
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	e002      	b.n	80087f0 <_printf_i+0xc8>
 80087ea:	0668      	lsls	r0, r5, #25
 80087ec:	d5fb      	bpl.n	80087e6 <_printf_i+0xbe>
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	296f      	cmp	r1, #111	; 0x6f
 80087f2:	bf14      	ite	ne
 80087f4:	220a      	movne	r2, #10
 80087f6:	2208      	moveq	r2, #8
 80087f8:	4852      	ldr	r0, [pc, #328]	; (8008944 <_printf_i+0x21c>)
 80087fa:	2100      	movs	r1, #0
 80087fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008800:	6865      	ldr	r5, [r4, #4]
 8008802:	2d00      	cmp	r5, #0
 8008804:	60a5      	str	r5, [r4, #8]
 8008806:	f2c0 8095 	blt.w	8008934 <_printf_i+0x20c>
 800880a:	6821      	ldr	r1, [r4, #0]
 800880c:	f021 0104 	bic.w	r1, r1, #4
 8008810:	6021      	str	r1, [r4, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d13d      	bne.n	8008892 <_printf_i+0x16a>
 8008816:	2d00      	cmp	r5, #0
 8008818:	f040 808e 	bne.w	8008938 <_printf_i+0x210>
 800881c:	4665      	mov	r5, ip
 800881e:	2a08      	cmp	r2, #8
 8008820:	d10b      	bne.n	800883a <_printf_i+0x112>
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	07db      	lsls	r3, r3, #31
 8008826:	d508      	bpl.n	800883a <_printf_i+0x112>
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	6862      	ldr	r2, [r4, #4]
 800882c:	429a      	cmp	r2, r3
 800882e:	bfde      	ittt	le
 8008830:	2330      	movle	r3, #48	; 0x30
 8008832:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008836:	f105 35ff 	addle.w	r5, r5, #4294967295
 800883a:	ebac 0305 	sub.w	r3, ip, r5
 800883e:	6123      	str	r3, [r4, #16]
 8008840:	f8cd 8000 	str.w	r8, [sp]
 8008844:	463b      	mov	r3, r7
 8008846:	aa03      	add	r2, sp, #12
 8008848:	4621      	mov	r1, r4
 800884a:	4630      	mov	r0, r6
 800884c:	f7ff fef6 	bl	800863c <_printf_common>
 8008850:	3001      	adds	r0, #1
 8008852:	d14d      	bne.n	80088f0 <_printf_i+0x1c8>
 8008854:	f04f 30ff 	mov.w	r0, #4294967295
 8008858:	b005      	add	sp, #20
 800885a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800885e:	4839      	ldr	r0, [pc, #228]	; (8008944 <_printf_i+0x21c>)
 8008860:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008864:	6813      	ldr	r3, [r2, #0]
 8008866:	6821      	ldr	r1, [r4, #0]
 8008868:	1d1d      	adds	r5, r3, #4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6015      	str	r5, [r2, #0]
 800886e:	060a      	lsls	r2, r1, #24
 8008870:	d50b      	bpl.n	800888a <_printf_i+0x162>
 8008872:	07ca      	lsls	r2, r1, #31
 8008874:	bf44      	itt	mi
 8008876:	f041 0120 	orrmi.w	r1, r1, #32
 800887a:	6021      	strmi	r1, [r4, #0]
 800887c:	b91b      	cbnz	r3, 8008886 <_printf_i+0x15e>
 800887e:	6822      	ldr	r2, [r4, #0]
 8008880:	f022 0220 	bic.w	r2, r2, #32
 8008884:	6022      	str	r2, [r4, #0]
 8008886:	2210      	movs	r2, #16
 8008888:	e7b7      	b.n	80087fa <_printf_i+0xd2>
 800888a:	064d      	lsls	r5, r1, #25
 800888c:	bf48      	it	mi
 800888e:	b29b      	uxthmi	r3, r3
 8008890:	e7ef      	b.n	8008872 <_printf_i+0x14a>
 8008892:	4665      	mov	r5, ip
 8008894:	fbb3 f1f2 	udiv	r1, r3, r2
 8008898:	fb02 3311 	mls	r3, r2, r1, r3
 800889c:	5cc3      	ldrb	r3, [r0, r3]
 800889e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80088a2:	460b      	mov	r3, r1
 80088a4:	2900      	cmp	r1, #0
 80088a6:	d1f5      	bne.n	8008894 <_printf_i+0x16c>
 80088a8:	e7b9      	b.n	800881e <_printf_i+0xf6>
 80088aa:	6813      	ldr	r3, [r2, #0]
 80088ac:	6825      	ldr	r5, [r4, #0]
 80088ae:	1d18      	adds	r0, r3, #4
 80088b0:	6961      	ldr	r1, [r4, #20]
 80088b2:	6010      	str	r0, [r2, #0]
 80088b4:	0628      	lsls	r0, r5, #24
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	d501      	bpl.n	80088be <_printf_i+0x196>
 80088ba:	6019      	str	r1, [r3, #0]
 80088bc:	e002      	b.n	80088c4 <_printf_i+0x19c>
 80088be:	066a      	lsls	r2, r5, #25
 80088c0:	d5fb      	bpl.n	80088ba <_printf_i+0x192>
 80088c2:	8019      	strh	r1, [r3, #0]
 80088c4:	2300      	movs	r3, #0
 80088c6:	4665      	mov	r5, ip
 80088c8:	6123      	str	r3, [r4, #16]
 80088ca:	e7b9      	b.n	8008840 <_printf_i+0x118>
 80088cc:	6813      	ldr	r3, [r2, #0]
 80088ce:	1d19      	adds	r1, r3, #4
 80088d0:	6011      	str	r1, [r2, #0]
 80088d2:	681d      	ldr	r5, [r3, #0]
 80088d4:	6862      	ldr	r2, [r4, #4]
 80088d6:	2100      	movs	r1, #0
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 feaf 	bl	800963c <memchr>
 80088de:	b108      	cbz	r0, 80088e4 <_printf_i+0x1bc>
 80088e0:	1b40      	subs	r0, r0, r5
 80088e2:	6060      	str	r0, [r4, #4]
 80088e4:	6863      	ldr	r3, [r4, #4]
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	2300      	movs	r3, #0
 80088ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ee:	e7a7      	b.n	8008840 <_printf_i+0x118>
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	462a      	mov	r2, r5
 80088f4:	4639      	mov	r1, r7
 80088f6:	4630      	mov	r0, r6
 80088f8:	47c0      	blx	r8
 80088fa:	3001      	adds	r0, #1
 80088fc:	d0aa      	beq.n	8008854 <_printf_i+0x12c>
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	079b      	lsls	r3, r3, #30
 8008902:	d413      	bmi.n	800892c <_printf_i+0x204>
 8008904:	68e0      	ldr	r0, [r4, #12]
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	4298      	cmp	r0, r3
 800890a:	bfb8      	it	lt
 800890c:	4618      	movlt	r0, r3
 800890e:	e7a3      	b.n	8008858 <_printf_i+0x130>
 8008910:	2301      	movs	r3, #1
 8008912:	464a      	mov	r2, r9
 8008914:	4639      	mov	r1, r7
 8008916:	4630      	mov	r0, r6
 8008918:	47c0      	blx	r8
 800891a:	3001      	adds	r0, #1
 800891c:	d09a      	beq.n	8008854 <_printf_i+0x12c>
 800891e:	3501      	adds	r5, #1
 8008920:	68e3      	ldr	r3, [r4, #12]
 8008922:	9a03      	ldr	r2, [sp, #12]
 8008924:	1a9b      	subs	r3, r3, r2
 8008926:	42ab      	cmp	r3, r5
 8008928:	dcf2      	bgt.n	8008910 <_printf_i+0x1e8>
 800892a:	e7eb      	b.n	8008904 <_printf_i+0x1dc>
 800892c:	2500      	movs	r5, #0
 800892e:	f104 0919 	add.w	r9, r4, #25
 8008932:	e7f5      	b.n	8008920 <_printf_i+0x1f8>
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1ac      	bne.n	8008892 <_printf_i+0x16a>
 8008938:	7803      	ldrb	r3, [r0, #0]
 800893a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800893e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008942:	e76c      	b.n	800881e <_printf_i+0xf6>
 8008944:	0800d392 	.word	0x0800d392
 8008948:	0800d3a3 	.word	0x0800d3a3

0800894c <siprintf>:
 800894c:	b40e      	push	{r1, r2, r3}
 800894e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008952:	b500      	push	{lr}
 8008954:	b09c      	sub	sp, #112	; 0x70
 8008956:	ab1d      	add	r3, sp, #116	; 0x74
 8008958:	9002      	str	r0, [sp, #8]
 800895a:	9006      	str	r0, [sp, #24]
 800895c:	9107      	str	r1, [sp, #28]
 800895e:	9104      	str	r1, [sp, #16]
 8008960:	4808      	ldr	r0, [pc, #32]	; (8008984 <siprintf+0x38>)
 8008962:	4909      	ldr	r1, [pc, #36]	; (8008988 <siprintf+0x3c>)
 8008964:	f853 2b04 	ldr.w	r2, [r3], #4
 8008968:	9105      	str	r1, [sp, #20]
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	a902      	add	r1, sp, #8
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	f001 fa68 	bl	8009e44 <_svfiprintf_r>
 8008974:	2200      	movs	r2, #0
 8008976:	9b02      	ldr	r3, [sp, #8]
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	b01c      	add	sp, #112	; 0x70
 800897c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008980:	b003      	add	sp, #12
 8008982:	4770      	bx	lr
 8008984:	2000000c 	.word	0x2000000c
 8008988:	ffff0208 	.word	0xffff0208

0800898c <quorem>:
 800898c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008990:	6903      	ldr	r3, [r0, #16]
 8008992:	690c      	ldr	r4, [r1, #16]
 8008994:	4680      	mov	r8, r0
 8008996:	42a3      	cmp	r3, r4
 8008998:	f2c0 8084 	blt.w	8008aa4 <quorem+0x118>
 800899c:	3c01      	subs	r4, #1
 800899e:	f101 0714 	add.w	r7, r1, #20
 80089a2:	f100 0614 	add.w	r6, r0, #20
 80089a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80089aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80089ae:	3501      	adds	r5, #1
 80089b0:	fbb0 f5f5 	udiv	r5, r0, r5
 80089b4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80089b8:	eb06 030c 	add.w	r3, r6, ip
 80089bc:	eb07 090c 	add.w	r9, r7, ip
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	b39d      	cbz	r5, 8008a2c <quorem+0xa0>
 80089c4:	f04f 0a00 	mov.w	sl, #0
 80089c8:	4638      	mov	r0, r7
 80089ca:	46b6      	mov	lr, r6
 80089cc:	46d3      	mov	fp, sl
 80089ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80089d2:	b293      	uxth	r3, r2
 80089d4:	fb05 a303 	mla	r3, r5, r3, sl
 80089d8:	0c12      	lsrs	r2, r2, #16
 80089da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089de:	fb05 a202 	mla	r2, r5, r2, sl
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	ebab 0303 	sub.w	r3, fp, r3
 80089e8:	f8de b000 	ldr.w	fp, [lr]
 80089ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80089f0:	fa1f fb8b 	uxth.w	fp, fp
 80089f4:	445b      	add	r3, fp
 80089f6:	fa1f fb82 	uxth.w	fp, r2
 80089fa:	f8de 2000 	ldr.w	r2, [lr]
 80089fe:	4581      	cmp	r9, r0
 8008a00:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008a04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a0e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008a12:	f84e 3b04 	str.w	r3, [lr], #4
 8008a16:	d2da      	bcs.n	80089ce <quorem+0x42>
 8008a18:	f856 300c 	ldr.w	r3, [r6, ip]
 8008a1c:	b933      	cbnz	r3, 8008a2c <quorem+0xa0>
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	3b04      	subs	r3, #4
 8008a22:	429e      	cmp	r6, r3
 8008a24:	461a      	mov	r2, r3
 8008a26:	d331      	bcc.n	8008a8c <quorem+0x100>
 8008a28:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a2c:	4640      	mov	r0, r8
 8008a2e:	f001 f833 	bl	8009a98 <__mcmp>
 8008a32:	2800      	cmp	r0, #0
 8008a34:	db26      	blt.n	8008a84 <quorem+0xf8>
 8008a36:	4630      	mov	r0, r6
 8008a38:	f04f 0c00 	mov.w	ip, #0
 8008a3c:	3501      	adds	r5, #1
 8008a3e:	f857 1b04 	ldr.w	r1, [r7], #4
 8008a42:	f8d0 e000 	ldr.w	lr, [r0]
 8008a46:	b28b      	uxth	r3, r1
 8008a48:	ebac 0303 	sub.w	r3, ip, r3
 8008a4c:	fa1f f28e 	uxth.w	r2, lr
 8008a50:	4413      	add	r3, r2
 8008a52:	0c0a      	lsrs	r2, r1, #16
 8008a54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a62:	45b9      	cmp	r9, r7
 8008a64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a68:	f840 3b04 	str.w	r3, [r0], #4
 8008a6c:	d2e7      	bcs.n	8008a3e <quorem+0xb2>
 8008a6e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008a72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008a76:	b92a      	cbnz	r2, 8008a84 <quorem+0xf8>
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	429e      	cmp	r6, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	d30b      	bcc.n	8008a98 <quorem+0x10c>
 8008a80:	f8c8 4010 	str.w	r4, [r8, #16]
 8008a84:	4628      	mov	r0, r5
 8008a86:	b003      	add	sp, #12
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	3b04      	subs	r3, #4
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	d1c9      	bne.n	8008a28 <quorem+0x9c>
 8008a94:	3c01      	subs	r4, #1
 8008a96:	e7c4      	b.n	8008a22 <quorem+0x96>
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	3b04      	subs	r3, #4
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	d1ef      	bne.n	8008a80 <quorem+0xf4>
 8008aa0:	3c01      	subs	r4, #1
 8008aa2:	e7ea      	b.n	8008a7a <quorem+0xee>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e7ee      	b.n	8008a86 <quorem+0xfa>

08008aa8 <_dtoa_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	4616      	mov	r6, r2
 8008aae:	461f      	mov	r7, r3
 8008ab0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ab2:	b095      	sub	sp, #84	; 0x54
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8008aba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008abe:	b93d      	cbnz	r5, 8008ad0 <_dtoa_r+0x28>
 8008ac0:	2010      	movs	r0, #16
 8008ac2:	f000 fdb3 	bl	800962c <malloc>
 8008ac6:	6260      	str	r0, [r4, #36]	; 0x24
 8008ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008acc:	6005      	str	r5, [r0, #0]
 8008ace:	60c5      	str	r5, [r0, #12]
 8008ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	b151      	cbz	r1, 8008aec <_dtoa_r+0x44>
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	2301      	movs	r3, #1
 8008ada:	4093      	lsls	r3, r2
 8008adc:	604a      	str	r2, [r1, #4]
 8008ade:	608b      	str	r3, [r1, #8]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fdf8 	bl	80096d6 <_Bfree>
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	1e3b      	subs	r3, r7, #0
 8008aee:	bfaf      	iteee	ge
 8008af0:	2300      	movge	r3, #0
 8008af2:	2201      	movlt	r2, #1
 8008af4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008af8:	9303      	strlt	r3, [sp, #12]
 8008afa:	bfac      	ite	ge
 8008afc:	f8c8 3000 	strge.w	r3, [r8]
 8008b00:	f8c8 2000 	strlt.w	r2, [r8]
 8008b04:	4bae      	ldr	r3, [pc, #696]	; (8008dc0 <_dtoa_r+0x318>)
 8008b06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b0a:	ea33 0308 	bics.w	r3, r3, r8
 8008b0e:	d11b      	bne.n	8008b48 <_dtoa_r+0xa0>
 8008b10:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	b923      	cbnz	r3, 8008b26 <_dtoa_r+0x7e>
 8008b1c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f000 8545 	beq.w	80095b0 <_dtoa_r+0xb08>
 8008b26:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b28:	b953      	cbnz	r3, 8008b40 <_dtoa_r+0x98>
 8008b2a:	4ba6      	ldr	r3, [pc, #664]	; (8008dc4 <_dtoa_r+0x31c>)
 8008b2c:	e021      	b.n	8008b72 <_dtoa_r+0xca>
 8008b2e:	4ba6      	ldr	r3, [pc, #664]	; (8008dc8 <_dtoa_r+0x320>)
 8008b30:	9306      	str	r3, [sp, #24]
 8008b32:	3308      	adds	r3, #8
 8008b34:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	9806      	ldr	r0, [sp, #24]
 8008b3a:	b015      	add	sp, #84	; 0x54
 8008b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b40:	4ba0      	ldr	r3, [pc, #640]	; (8008dc4 <_dtoa_r+0x31c>)
 8008b42:	9306      	str	r3, [sp, #24]
 8008b44:	3303      	adds	r3, #3
 8008b46:	e7f5      	b.n	8008b34 <_dtoa_r+0x8c>
 8008b48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	2300      	movs	r3, #0
 8008b50:	4630      	mov	r0, r6
 8008b52:	4639      	mov	r1, r7
 8008b54:	f7f7 ff28 	bl	80009a8 <__aeabi_dcmpeq>
 8008b58:	4682      	mov	sl, r0
 8008b5a:	b160      	cbz	r0, 8008b76 <_dtoa_r+0xce>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 8520 	beq.w	80095aa <_dtoa_r+0xb02>
 8008b6a:	4b98      	ldr	r3, [pc, #608]	; (8008dcc <_dtoa_r+0x324>)
 8008b6c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b6e:	6013      	str	r3, [r2, #0]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	9306      	str	r3, [sp, #24]
 8008b74:	e7e0      	b.n	8008b38 <_dtoa_r+0x90>
 8008b76:	ab12      	add	r3, sp, #72	; 0x48
 8008b78:	9301      	str	r3, [sp, #4]
 8008b7a:	ab13      	add	r3, sp, #76	; 0x4c
 8008b7c:	9300      	str	r3, [sp, #0]
 8008b7e:	4632      	mov	r2, r6
 8008b80:	463b      	mov	r3, r7
 8008b82:	4620      	mov	r0, r4
 8008b84:	f001 f800 	bl	8009b88 <__d2b>
 8008b88:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008b8c:	4683      	mov	fp, r0
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	d07d      	beq.n	8008c8e <_dtoa_r+0x1e6>
 8008b92:	46b0      	mov	r8, r6
 8008b94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b98:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8008b9c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008ba0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ba4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008ba8:	2200      	movs	r2, #0
 8008baa:	4b89      	ldr	r3, [pc, #548]	; (8008dd0 <_dtoa_r+0x328>)
 8008bac:	4640      	mov	r0, r8
 8008bae:	4649      	mov	r1, r9
 8008bb0:	f7f7 fada 	bl	8000168 <__aeabi_dsub>
 8008bb4:	a37c      	add	r3, pc, #496	; (adr r3, 8008da8 <_dtoa_r+0x300>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fc8d 	bl	80004d8 <__aeabi_dmul>
 8008bbe:	a37c      	add	r3, pc, #496	; (adr r3, 8008db0 <_dtoa_r+0x308>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fad2 	bl	800016c <__adddf3>
 8008bc8:	4606      	mov	r6, r0
 8008bca:	4628      	mov	r0, r5
 8008bcc:	460f      	mov	r7, r1
 8008bce:	f7f7 fc19 	bl	8000404 <__aeabi_i2d>
 8008bd2:	a379      	add	r3, pc, #484	; (adr r3, 8008db8 <_dtoa_r+0x310>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fc7e 	bl	80004d8 <__aeabi_dmul>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4630      	mov	r0, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	f7f7 fac2 	bl	800016c <__adddf3>
 8008be8:	4606      	mov	r6, r0
 8008bea:	460f      	mov	r7, r1
 8008bec:	f7f7 ff24 	bl	8000a38 <__aeabi_d2iz>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4682      	mov	sl, r0
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	f7f7 fedf 	bl	80009bc <__aeabi_dcmplt>
 8008bfe:	b148      	cbz	r0, 8008c14 <_dtoa_r+0x16c>
 8008c00:	4650      	mov	r0, sl
 8008c02:	f7f7 fbff 	bl	8000404 <__aeabi_i2d>
 8008c06:	4632      	mov	r2, r6
 8008c08:	463b      	mov	r3, r7
 8008c0a:	f7f7 fecd 	bl	80009a8 <__aeabi_dcmpeq>
 8008c0e:	b908      	cbnz	r0, 8008c14 <_dtoa_r+0x16c>
 8008c10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c14:	f1ba 0f16 	cmp.w	sl, #22
 8008c18:	d85a      	bhi.n	8008cd0 <_dtoa_r+0x228>
 8008c1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1e:	496d      	ldr	r1, [pc, #436]	; (8008dd4 <_dtoa_r+0x32c>)
 8008c20:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c28:	f7f7 fee6 	bl	80009f8 <__aeabi_dcmpgt>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	d051      	beq.n	8008cd4 <_dtoa_r+0x22c>
 8008c30:	2300      	movs	r3, #0
 8008c32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c36:	930d      	str	r3, [sp, #52]	; 0x34
 8008c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c3a:	1b5d      	subs	r5, r3, r5
 8008c3c:	1e6b      	subs	r3, r5, #1
 8008c3e:	9307      	str	r3, [sp, #28]
 8008c40:	bf43      	ittte	mi
 8008c42:	2300      	movmi	r3, #0
 8008c44:	f1c5 0901 	rsbmi	r9, r5, #1
 8008c48:	9307      	strmi	r3, [sp, #28]
 8008c4a:	f04f 0900 	movpl.w	r9, #0
 8008c4e:	f1ba 0f00 	cmp.w	sl, #0
 8008c52:	db41      	blt.n	8008cd8 <_dtoa_r+0x230>
 8008c54:	9b07      	ldr	r3, [sp, #28]
 8008c56:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8008c5a:	4453      	add	r3, sl
 8008c5c:	9307      	str	r3, [sp, #28]
 8008c5e:	2300      	movs	r3, #0
 8008c60:	9308      	str	r3, [sp, #32]
 8008c62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c64:	2b09      	cmp	r3, #9
 8008c66:	f200 808f 	bhi.w	8008d88 <_dtoa_r+0x2e0>
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	bfc4      	itt	gt
 8008c6e:	3b04      	subgt	r3, #4
 8008c70:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008c72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008c74:	bfc8      	it	gt
 8008c76:	2500      	movgt	r5, #0
 8008c78:	f1a3 0302 	sub.w	r3, r3, #2
 8008c7c:	bfd8      	it	le
 8008c7e:	2501      	movle	r5, #1
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	f200 808d 	bhi.w	8008da0 <_dtoa_r+0x2f8>
 8008c86:	e8df f003 	tbb	[pc, r3]
 8008c8a:	7d7b      	.short	0x7d7b
 8008c8c:	6f2f      	.short	0x6f2f
 8008c8e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008c92:	441d      	add	r5, r3
 8008c94:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008c98:	2820      	cmp	r0, #32
 8008c9a:	dd13      	ble.n	8008cc4 <_dtoa_r+0x21c>
 8008c9c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	fa08 f800 	lsl.w	r8, r8, r0
 8008ca6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008caa:	fa23 f000 	lsr.w	r0, r3, r0
 8008cae:	ea48 0000 	orr.w	r0, r8, r0
 8008cb2:	f7f7 fb97 	bl	80003e4 <__aeabi_ui2d>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	4680      	mov	r8, r0
 8008cba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8008cbe:	3d01      	subs	r5, #1
 8008cc0:	9310      	str	r3, [sp, #64]	; 0x40
 8008cc2:	e771      	b.n	8008ba8 <_dtoa_r+0x100>
 8008cc4:	9b02      	ldr	r3, [sp, #8]
 8008cc6:	f1c0 0020 	rsb	r0, r0, #32
 8008cca:	fa03 f000 	lsl.w	r0, r3, r0
 8008cce:	e7f0      	b.n	8008cb2 <_dtoa_r+0x20a>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e7b0      	b.n	8008c36 <_dtoa_r+0x18e>
 8008cd4:	900d      	str	r0, [sp, #52]	; 0x34
 8008cd6:	e7af      	b.n	8008c38 <_dtoa_r+0x190>
 8008cd8:	f1ca 0300 	rsb	r3, sl, #0
 8008cdc:	9308      	str	r3, [sp, #32]
 8008cde:	2300      	movs	r3, #0
 8008ce0:	eba9 090a 	sub.w	r9, r9, sl
 8008ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8008ce6:	e7bc      	b.n	8008c62 <_dtoa_r+0x1ba>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	9309      	str	r3, [sp, #36]	; 0x24
 8008cec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	dd74      	ble.n	8008ddc <_dtoa_r+0x334>
 8008cf2:	4698      	mov	r8, r3
 8008cf4:	9304      	str	r3, [sp, #16]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cfa:	6072      	str	r2, [r6, #4]
 8008cfc:	2204      	movs	r2, #4
 8008cfe:	f102 0014 	add.w	r0, r2, #20
 8008d02:	4298      	cmp	r0, r3
 8008d04:	6871      	ldr	r1, [r6, #4]
 8008d06:	d96e      	bls.n	8008de6 <_dtoa_r+0x33e>
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 fcb0 	bl	800966e <_Balloc>
 8008d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d10:	6030      	str	r0, [r6, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f1b8 0f0e 	cmp.w	r8, #14
 8008d18:	9306      	str	r3, [sp, #24]
 8008d1a:	f200 80ed 	bhi.w	8008ef8 <_dtoa_r+0x450>
 8008d1e:	2d00      	cmp	r5, #0
 8008d20:	f000 80ea 	beq.w	8008ef8 <_dtoa_r+0x450>
 8008d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d28:	f1ba 0f00 	cmp.w	sl, #0
 8008d2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d30:	dd77      	ble.n	8008e22 <_dtoa_r+0x37a>
 8008d32:	4a28      	ldr	r2, [pc, #160]	; (8008dd4 <_dtoa_r+0x32c>)
 8008d34:	f00a 030f 	and.w	r3, sl, #15
 8008d38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008d3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d40:	06f0      	lsls	r0, r6, #27
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008d4a:	d568      	bpl.n	8008e1e <_dtoa_r+0x376>
 8008d4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008d50:	4b21      	ldr	r3, [pc, #132]	; (8008dd8 <_dtoa_r+0x330>)
 8008d52:	2503      	movs	r5, #3
 8008d54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d58:	f7f7 fce8 	bl	800072c <__aeabi_ddiv>
 8008d5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d60:	f006 060f 	and.w	r6, r6, #15
 8008d64:	4f1c      	ldr	r7, [pc, #112]	; (8008dd8 <_dtoa_r+0x330>)
 8008d66:	e04f      	b.n	8008e08 <_dtoa_r+0x360>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008d6e:	4453      	add	r3, sl
 8008d70:	f103 0801 	add.w	r8, r3, #1
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	4643      	mov	r3, r8
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	bfb8      	it	lt
 8008d7c:	2301      	movlt	r3, #1
 8008d7e:	e7ba      	b.n	8008cf6 <_dtoa_r+0x24e>
 8008d80:	2300      	movs	r3, #0
 8008d82:	e7b2      	b.n	8008cea <_dtoa_r+0x242>
 8008d84:	2300      	movs	r3, #0
 8008d86:	e7f0      	b.n	8008d6a <_dtoa_r+0x2c2>
 8008d88:	2501      	movs	r5, #1
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	9509      	str	r5, [sp, #36]	; 0x24
 8008d8e:	931e      	str	r3, [sp, #120]	; 0x78
 8008d90:	f04f 33ff 	mov.w	r3, #4294967295
 8008d94:	2200      	movs	r2, #0
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	4698      	mov	r8, r3
 8008d9a:	2312      	movs	r3, #18
 8008d9c:	921f      	str	r2, [sp, #124]	; 0x7c
 8008d9e:	e7aa      	b.n	8008cf6 <_dtoa_r+0x24e>
 8008da0:	2301      	movs	r3, #1
 8008da2:	9309      	str	r3, [sp, #36]	; 0x24
 8008da4:	e7f4      	b.n	8008d90 <_dtoa_r+0x2e8>
 8008da6:	bf00      	nop
 8008da8:	636f4361 	.word	0x636f4361
 8008dac:	3fd287a7 	.word	0x3fd287a7
 8008db0:	8b60c8b3 	.word	0x8b60c8b3
 8008db4:	3fc68a28 	.word	0x3fc68a28
 8008db8:	509f79fb 	.word	0x509f79fb
 8008dbc:	3fd34413 	.word	0x3fd34413
 8008dc0:	7ff00000 	.word	0x7ff00000
 8008dc4:	0800d3bd 	.word	0x0800d3bd
 8008dc8:	0800d3b4 	.word	0x0800d3b4
 8008dcc:	0800d391 	.word	0x0800d391
 8008dd0:	3ff80000 	.word	0x3ff80000
 8008dd4:	0800d450 	.word	0x0800d450
 8008dd8:	0800d428 	.word	0x0800d428
 8008ddc:	2301      	movs	r3, #1
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	4698      	mov	r8, r3
 8008de2:	461a      	mov	r2, r3
 8008de4:	e7da      	b.n	8008d9c <_dtoa_r+0x2f4>
 8008de6:	3101      	adds	r1, #1
 8008de8:	6071      	str	r1, [r6, #4]
 8008dea:	0052      	lsls	r2, r2, #1
 8008dec:	e787      	b.n	8008cfe <_dtoa_r+0x256>
 8008dee:	07f1      	lsls	r1, r6, #31
 8008df0:	d508      	bpl.n	8008e04 <_dtoa_r+0x35c>
 8008df2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dfa:	f7f7 fb6d 	bl	80004d8 <__aeabi_dmul>
 8008dfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008e02:	3501      	adds	r5, #1
 8008e04:	1076      	asrs	r6, r6, #1
 8008e06:	3708      	adds	r7, #8
 8008e08:	2e00      	cmp	r6, #0
 8008e0a:	d1f0      	bne.n	8008dee <_dtoa_r+0x346>
 8008e0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e14:	f7f7 fc8a 	bl	800072c <__aeabi_ddiv>
 8008e18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e1c:	e01b      	b.n	8008e56 <_dtoa_r+0x3ae>
 8008e1e:	2502      	movs	r5, #2
 8008e20:	e7a0      	b.n	8008d64 <_dtoa_r+0x2bc>
 8008e22:	f000 80a4 	beq.w	8008f6e <_dtoa_r+0x4c6>
 8008e26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008e2a:	f1ca 0600 	rsb	r6, sl, #0
 8008e2e:	4ba0      	ldr	r3, [pc, #640]	; (80090b0 <_dtoa_r+0x608>)
 8008e30:	f006 020f 	and.w	r2, r6, #15
 8008e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	f7f7 fb4c 	bl	80004d8 <__aeabi_dmul>
 8008e40:	2502      	movs	r5, #2
 8008e42:	2300      	movs	r3, #0
 8008e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e48:	4f9a      	ldr	r7, [pc, #616]	; (80090b4 <_dtoa_r+0x60c>)
 8008e4a:	1136      	asrs	r6, r6, #4
 8008e4c:	2e00      	cmp	r6, #0
 8008e4e:	f040 8083 	bne.w	8008f58 <_dtoa_r+0x4b0>
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e0      	bne.n	8008e18 <_dtoa_r+0x370>
 8008e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 808a 	beq.w	8008f72 <_dtoa_r+0x4ca>
 8008e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008e66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	4b92      	ldr	r3, [pc, #584]	; (80090b8 <_dtoa_r+0x610>)
 8008e6e:	f7f7 fda5 	bl	80009bc <__aeabi_dcmplt>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d07d      	beq.n	8008f72 <_dtoa_r+0x4ca>
 8008e76:	f1b8 0f00 	cmp.w	r8, #0
 8008e7a:	d07a      	beq.n	8008f72 <_dtoa_r+0x4ca>
 8008e7c:	9b04      	ldr	r3, [sp, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dd36      	ble.n	8008ef0 <_dtoa_r+0x448>
 8008e82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e86:	2200      	movs	r2, #0
 8008e88:	4b8c      	ldr	r3, [pc, #560]	; (80090bc <_dtoa_r+0x614>)
 8008e8a:	f7f7 fb25 	bl	80004d8 <__aeabi_dmul>
 8008e8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e92:	9e04      	ldr	r6, [sp, #16]
 8008e94:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008e98:	3501      	adds	r5, #1
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	f7f7 fab2 	bl	8000404 <__aeabi_i2d>
 8008ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ea4:	f7f7 fb18 	bl	80004d8 <__aeabi_dmul>
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	4b85      	ldr	r3, [pc, #532]	; (80090c0 <_dtoa_r+0x618>)
 8008eac:	f7f7 f95e 	bl	800016c <__adddf3>
 8008eb0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008eb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008eb8:	950b      	str	r5, [sp, #44]	; 0x2c
 8008eba:	2e00      	cmp	r6, #0
 8008ebc:	d15c      	bne.n	8008f78 <_dtoa_r+0x4d0>
 8008ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4b7f      	ldr	r3, [pc, #508]	; (80090c4 <_dtoa_r+0x61c>)
 8008ec6:	f7f7 f94f 	bl	8000168 <__aeabi_dsub>
 8008eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ecc:	462b      	mov	r3, r5
 8008ece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed2:	f7f7 fd91 	bl	80009f8 <__aeabi_dcmpgt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f040 8281 	bne.w	80093de <_dtoa_r+0x936>
 8008edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ee2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008ee6:	f7f7 fd69 	bl	80009bc <__aeabi_dcmplt>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f040 8275 	bne.w	80093da <_dtoa_r+0x932>
 8008ef0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008ef4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ef8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f2c0 814b 	blt.w	8009196 <_dtoa_r+0x6ee>
 8008f00:	f1ba 0f0e 	cmp.w	sl, #14
 8008f04:	f300 8147 	bgt.w	8009196 <_dtoa_r+0x6ee>
 8008f08:	4b69      	ldr	r3, [pc, #420]	; (80090b0 <_dtoa_r+0x608>)
 8008f0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f280 80d7 	bge.w	80090cc <_dtoa_r+0x624>
 8008f1e:	f1b8 0f00 	cmp.w	r8, #0
 8008f22:	f300 80d3 	bgt.w	80090cc <_dtoa_r+0x624>
 8008f26:	f040 8257 	bne.w	80093d8 <_dtoa_r+0x930>
 8008f2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	4b64      	ldr	r3, [pc, #400]	; (80090c4 <_dtoa_r+0x61c>)
 8008f32:	f7f7 fad1 	bl	80004d8 <__aeabi_dmul>
 8008f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f3a:	f7f7 fd53 	bl	80009e4 <__aeabi_dcmpge>
 8008f3e:	4646      	mov	r6, r8
 8008f40:	4647      	mov	r7, r8
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f040 822d 	bne.w	80093a2 <_dtoa_r+0x8fa>
 8008f48:	9b06      	ldr	r3, [sp, #24]
 8008f4a:	9a06      	ldr	r2, [sp, #24]
 8008f4c:	1c5d      	adds	r5, r3, #1
 8008f4e:	2331      	movs	r3, #49	; 0x31
 8008f50:	f10a 0a01 	add.w	sl, sl, #1
 8008f54:	7013      	strb	r3, [r2, #0]
 8008f56:	e228      	b.n	80093aa <_dtoa_r+0x902>
 8008f58:	07f2      	lsls	r2, r6, #31
 8008f5a:	d505      	bpl.n	8008f68 <_dtoa_r+0x4c0>
 8008f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f60:	f7f7 faba 	bl	80004d8 <__aeabi_dmul>
 8008f64:	2301      	movs	r3, #1
 8008f66:	3501      	adds	r5, #1
 8008f68:	1076      	asrs	r6, r6, #1
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	e76e      	b.n	8008e4c <_dtoa_r+0x3a4>
 8008f6e:	2502      	movs	r5, #2
 8008f70:	e771      	b.n	8008e56 <_dtoa_r+0x3ae>
 8008f72:	4657      	mov	r7, sl
 8008f74:	4646      	mov	r6, r8
 8008f76:	e790      	b.n	8008e9a <_dtoa_r+0x3f2>
 8008f78:	4b4d      	ldr	r3, [pc, #308]	; (80090b0 <_dtoa_r+0x608>)
 8008f7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f7e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d048      	beq.n	800901a <_dtoa_r+0x572>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	494e      	ldr	r1, [pc, #312]	; (80090c8 <_dtoa_r+0x620>)
 8008f90:	f7f7 fbcc 	bl	800072c <__aeabi_ddiv>
 8008f94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f98:	f7f7 f8e6 	bl	8000168 <__aeabi_dsub>
 8008f9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008fa0:	9d06      	ldr	r5, [sp, #24]
 8008fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa6:	f7f7 fd47 	bl	8000a38 <__aeabi_d2iz>
 8008faa:	9011      	str	r0, [sp, #68]	; 0x44
 8008fac:	f7f7 fa2a 	bl	8000404 <__aeabi_i2d>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fb8:	f7f7 f8d6 	bl	8000168 <__aeabi_dsub>
 8008fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc2:	3330      	adds	r3, #48	; 0x30
 8008fc4:	f805 3b01 	strb.w	r3, [r5], #1
 8008fc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fcc:	f7f7 fcf6 	bl	80009bc <__aeabi_dcmplt>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d163      	bne.n	800909c <_dtoa_r+0x5f4>
 8008fd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fd8:	2000      	movs	r0, #0
 8008fda:	4937      	ldr	r1, [pc, #220]	; (80090b8 <_dtoa_r+0x610>)
 8008fdc:	f7f7 f8c4 	bl	8000168 <__aeabi_dsub>
 8008fe0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008fe4:	f7f7 fcea 	bl	80009bc <__aeabi_dcmplt>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f040 80b5 	bne.w	8009158 <_dtoa_r+0x6b0>
 8008fee:	9b06      	ldr	r3, [sp, #24]
 8008ff0:	1aeb      	subs	r3, r5, r3
 8008ff2:	429e      	cmp	r6, r3
 8008ff4:	f77f af7c 	ble.w	8008ef0 <_dtoa_r+0x448>
 8008ff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	4b2f      	ldr	r3, [pc, #188]	; (80090bc <_dtoa_r+0x614>)
 8009000:	f7f7 fa6a 	bl	80004d8 <__aeabi_dmul>
 8009004:	2200      	movs	r2, #0
 8009006:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800900a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800900e:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <_dtoa_r+0x614>)
 8009010:	f7f7 fa62 	bl	80004d8 <__aeabi_dmul>
 8009014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009018:	e7c3      	b.n	8008fa2 <_dtoa_r+0x4fa>
 800901a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800901e:	f7f7 fa5b 	bl	80004d8 <__aeabi_dmul>
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009028:	199d      	adds	r5, r3, r6
 800902a:	461e      	mov	r6, r3
 800902c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009030:	f7f7 fd02 	bl	8000a38 <__aeabi_d2iz>
 8009034:	9011      	str	r0, [sp, #68]	; 0x44
 8009036:	f7f7 f9e5 	bl	8000404 <__aeabi_i2d>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009042:	f7f7 f891 	bl	8000168 <__aeabi_dsub>
 8009046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800904c:	3330      	adds	r3, #48	; 0x30
 800904e:	f806 3b01 	strb.w	r3, [r6], #1
 8009052:	42ae      	cmp	r6, r5
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	d124      	bne.n	80090a4 <_dtoa_r+0x5fc>
 800905a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800905e:	4b1a      	ldr	r3, [pc, #104]	; (80090c8 <_dtoa_r+0x620>)
 8009060:	f7f7 f884 	bl	800016c <__adddf3>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800906c:	f7f7 fcc4 	bl	80009f8 <__aeabi_dcmpgt>
 8009070:	2800      	cmp	r0, #0
 8009072:	d171      	bne.n	8009158 <_dtoa_r+0x6b0>
 8009074:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009078:	2000      	movs	r0, #0
 800907a:	4913      	ldr	r1, [pc, #76]	; (80090c8 <_dtoa_r+0x620>)
 800907c:	f7f7 f874 	bl	8000168 <__aeabi_dsub>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009088:	f7f7 fc98 	bl	80009bc <__aeabi_dcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	f43f af2f 	beq.w	8008ef0 <_dtoa_r+0x448>
 8009092:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009096:	1e6a      	subs	r2, r5, #1
 8009098:	2b30      	cmp	r3, #48	; 0x30
 800909a:	d001      	beq.n	80090a0 <_dtoa_r+0x5f8>
 800909c:	46ba      	mov	sl, r7
 800909e:	e04a      	b.n	8009136 <_dtoa_r+0x68e>
 80090a0:	4615      	mov	r5, r2
 80090a2:	e7f6      	b.n	8009092 <_dtoa_r+0x5ea>
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <_dtoa_r+0x614>)
 80090a6:	f7f7 fa17 	bl	80004d8 <__aeabi_dmul>
 80090aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090ae:	e7bd      	b.n	800902c <_dtoa_r+0x584>
 80090b0:	0800d450 	.word	0x0800d450
 80090b4:	0800d428 	.word	0x0800d428
 80090b8:	3ff00000 	.word	0x3ff00000
 80090bc:	40240000 	.word	0x40240000
 80090c0:	401c0000 	.word	0x401c0000
 80090c4:	40140000 	.word	0x40140000
 80090c8:	3fe00000 	.word	0x3fe00000
 80090cc:	9d06      	ldr	r5, [sp, #24]
 80090ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80090d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090d6:	4630      	mov	r0, r6
 80090d8:	4639      	mov	r1, r7
 80090da:	f7f7 fb27 	bl	800072c <__aeabi_ddiv>
 80090de:	f7f7 fcab 	bl	8000a38 <__aeabi_d2iz>
 80090e2:	4681      	mov	r9, r0
 80090e4:	f7f7 f98e 	bl	8000404 <__aeabi_i2d>
 80090e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ec:	f7f7 f9f4 	bl	80004d8 <__aeabi_dmul>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4630      	mov	r0, r6
 80090f6:	4639      	mov	r1, r7
 80090f8:	f7f7 f836 	bl	8000168 <__aeabi_dsub>
 80090fc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009100:	f805 6b01 	strb.w	r6, [r5], #1
 8009104:	9e06      	ldr	r6, [sp, #24]
 8009106:	4602      	mov	r2, r0
 8009108:	1bae      	subs	r6, r5, r6
 800910a:	45b0      	cmp	r8, r6
 800910c:	460b      	mov	r3, r1
 800910e:	d135      	bne.n	800917c <_dtoa_r+0x6d4>
 8009110:	f7f7 f82c 	bl	800016c <__adddf3>
 8009114:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009118:	4606      	mov	r6, r0
 800911a:	460f      	mov	r7, r1
 800911c:	f7f7 fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 8009120:	b9c8      	cbnz	r0, 8009156 <_dtoa_r+0x6ae>
 8009122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009126:	4630      	mov	r0, r6
 8009128:	4639      	mov	r1, r7
 800912a:	f7f7 fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800912e:	b110      	cbz	r0, 8009136 <_dtoa_r+0x68e>
 8009130:	f019 0f01 	tst.w	r9, #1
 8009134:	d10f      	bne.n	8009156 <_dtoa_r+0x6ae>
 8009136:	4659      	mov	r1, fp
 8009138:	4620      	mov	r0, r4
 800913a:	f000 facc 	bl	80096d6 <_Bfree>
 800913e:	2300      	movs	r3, #0
 8009140:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009142:	702b      	strb	r3, [r5, #0]
 8009144:	f10a 0301 	add.w	r3, sl, #1
 8009148:	6013      	str	r3, [r2, #0]
 800914a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800914c:	2b00      	cmp	r3, #0
 800914e:	f43f acf3 	beq.w	8008b38 <_dtoa_r+0x90>
 8009152:	601d      	str	r5, [r3, #0]
 8009154:	e4f0      	b.n	8008b38 <_dtoa_r+0x90>
 8009156:	4657      	mov	r7, sl
 8009158:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800915c:	1e6b      	subs	r3, r5, #1
 800915e:	2a39      	cmp	r2, #57	; 0x39
 8009160:	d106      	bne.n	8009170 <_dtoa_r+0x6c8>
 8009162:	9a06      	ldr	r2, [sp, #24]
 8009164:	429a      	cmp	r2, r3
 8009166:	d107      	bne.n	8009178 <_dtoa_r+0x6d0>
 8009168:	2330      	movs	r3, #48	; 0x30
 800916a:	7013      	strb	r3, [r2, #0]
 800916c:	4613      	mov	r3, r2
 800916e:	3701      	adds	r7, #1
 8009170:	781a      	ldrb	r2, [r3, #0]
 8009172:	3201      	adds	r2, #1
 8009174:	701a      	strb	r2, [r3, #0]
 8009176:	e791      	b.n	800909c <_dtoa_r+0x5f4>
 8009178:	461d      	mov	r5, r3
 800917a:	e7ed      	b.n	8009158 <_dtoa_r+0x6b0>
 800917c:	2200      	movs	r2, #0
 800917e:	4b99      	ldr	r3, [pc, #612]	; (80093e4 <_dtoa_r+0x93c>)
 8009180:	f7f7 f9aa 	bl	80004d8 <__aeabi_dmul>
 8009184:	2200      	movs	r2, #0
 8009186:	2300      	movs	r3, #0
 8009188:	4606      	mov	r6, r0
 800918a:	460f      	mov	r7, r1
 800918c:	f7f7 fc0c 	bl	80009a8 <__aeabi_dcmpeq>
 8009190:	2800      	cmp	r0, #0
 8009192:	d09e      	beq.n	80090d2 <_dtoa_r+0x62a>
 8009194:	e7cf      	b.n	8009136 <_dtoa_r+0x68e>
 8009196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009198:	2a00      	cmp	r2, #0
 800919a:	f000 8088 	beq.w	80092ae <_dtoa_r+0x806>
 800919e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80091a0:	2a01      	cmp	r2, #1
 80091a2:	dc6d      	bgt.n	8009280 <_dtoa_r+0x7d8>
 80091a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091a6:	2a00      	cmp	r2, #0
 80091a8:	d066      	beq.n	8009278 <_dtoa_r+0x7d0>
 80091aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80091ae:	464d      	mov	r5, r9
 80091b0:	9e08      	ldr	r6, [sp, #32]
 80091b2:	9a07      	ldr	r2, [sp, #28]
 80091b4:	2101      	movs	r1, #1
 80091b6:	441a      	add	r2, r3
 80091b8:	4620      	mov	r0, r4
 80091ba:	4499      	add	r9, r3
 80091bc:	9207      	str	r2, [sp, #28]
 80091be:	f000 fb2a 	bl	8009816 <__i2b>
 80091c2:	4607      	mov	r7, r0
 80091c4:	2d00      	cmp	r5, #0
 80091c6:	dd0b      	ble.n	80091e0 <_dtoa_r+0x738>
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dd08      	ble.n	80091e0 <_dtoa_r+0x738>
 80091ce:	42ab      	cmp	r3, r5
 80091d0:	bfa8      	it	ge
 80091d2:	462b      	movge	r3, r5
 80091d4:	9a07      	ldr	r2, [sp, #28]
 80091d6:	eba9 0903 	sub.w	r9, r9, r3
 80091da:	1aed      	subs	r5, r5, r3
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	9b08      	ldr	r3, [sp, #32]
 80091e2:	b1eb      	cbz	r3, 8009220 <_dtoa_r+0x778>
 80091e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d065      	beq.n	80092b6 <_dtoa_r+0x80e>
 80091ea:	b18e      	cbz	r6, 8009210 <_dtoa_r+0x768>
 80091ec:	4639      	mov	r1, r7
 80091ee:	4632      	mov	r2, r6
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 fbaf 	bl	8009954 <__pow5mult>
 80091f6:	465a      	mov	r2, fp
 80091f8:	4601      	mov	r1, r0
 80091fa:	4607      	mov	r7, r0
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 fb13 	bl	8009828 <__multiply>
 8009202:	4659      	mov	r1, fp
 8009204:	900a      	str	r0, [sp, #40]	; 0x28
 8009206:	4620      	mov	r0, r4
 8009208:	f000 fa65 	bl	80096d6 <_Bfree>
 800920c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800920e:	469b      	mov	fp, r3
 8009210:	9b08      	ldr	r3, [sp, #32]
 8009212:	1b9a      	subs	r2, r3, r6
 8009214:	d004      	beq.n	8009220 <_dtoa_r+0x778>
 8009216:	4659      	mov	r1, fp
 8009218:	4620      	mov	r0, r4
 800921a:	f000 fb9b 	bl	8009954 <__pow5mult>
 800921e:	4683      	mov	fp, r0
 8009220:	2101      	movs	r1, #1
 8009222:	4620      	mov	r0, r4
 8009224:	f000 faf7 	bl	8009816 <__i2b>
 8009228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800922a:	4606      	mov	r6, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 81c6 	beq.w	80095be <_dtoa_r+0xb16>
 8009232:	461a      	mov	r2, r3
 8009234:	4601      	mov	r1, r0
 8009236:	4620      	mov	r0, r4
 8009238:	f000 fb8c 	bl	8009954 <__pow5mult>
 800923c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800923e:	4606      	mov	r6, r0
 8009240:	2b01      	cmp	r3, #1
 8009242:	dc3e      	bgt.n	80092c2 <_dtoa_r+0x81a>
 8009244:	9b02      	ldr	r3, [sp, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d137      	bne.n	80092ba <_dtoa_r+0x812>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009250:	2b00      	cmp	r3, #0
 8009252:	d134      	bne.n	80092be <_dtoa_r+0x816>
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800925a:	0d1b      	lsrs	r3, r3, #20
 800925c:	051b      	lsls	r3, r3, #20
 800925e:	b12b      	cbz	r3, 800926c <_dtoa_r+0x7c4>
 8009260:	9b07      	ldr	r3, [sp, #28]
 8009262:	f109 0901 	add.w	r9, r9, #1
 8009266:	3301      	adds	r3, #1
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	2301      	movs	r3, #1
 800926c:	9308      	str	r3, [sp, #32]
 800926e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009270:	2b00      	cmp	r3, #0
 8009272:	d128      	bne.n	80092c6 <_dtoa_r+0x81e>
 8009274:	2001      	movs	r0, #1
 8009276:	e02e      	b.n	80092d6 <_dtoa_r+0x82e>
 8009278:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800927a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800927e:	e796      	b.n	80091ae <_dtoa_r+0x706>
 8009280:	9b08      	ldr	r3, [sp, #32]
 8009282:	f108 36ff 	add.w	r6, r8, #4294967295
 8009286:	42b3      	cmp	r3, r6
 8009288:	bfb7      	itett	lt
 800928a:	9b08      	ldrlt	r3, [sp, #32]
 800928c:	1b9e      	subge	r6, r3, r6
 800928e:	1af2      	sublt	r2, r6, r3
 8009290:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8009292:	bfbf      	itttt	lt
 8009294:	9608      	strlt	r6, [sp, #32]
 8009296:	189b      	addlt	r3, r3, r2
 8009298:	930c      	strlt	r3, [sp, #48]	; 0x30
 800929a:	2600      	movlt	r6, #0
 800929c:	f1b8 0f00 	cmp.w	r8, #0
 80092a0:	bfb9      	ittee	lt
 80092a2:	eba9 0508 	sublt.w	r5, r9, r8
 80092a6:	2300      	movlt	r3, #0
 80092a8:	464d      	movge	r5, r9
 80092aa:	4643      	movge	r3, r8
 80092ac:	e781      	b.n	80091b2 <_dtoa_r+0x70a>
 80092ae:	9e08      	ldr	r6, [sp, #32]
 80092b0:	464d      	mov	r5, r9
 80092b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092b4:	e786      	b.n	80091c4 <_dtoa_r+0x71c>
 80092b6:	9a08      	ldr	r2, [sp, #32]
 80092b8:	e7ad      	b.n	8009216 <_dtoa_r+0x76e>
 80092ba:	2300      	movs	r3, #0
 80092bc:	e7d6      	b.n	800926c <_dtoa_r+0x7c4>
 80092be:	9b02      	ldr	r3, [sp, #8]
 80092c0:	e7d4      	b.n	800926c <_dtoa_r+0x7c4>
 80092c2:	2300      	movs	r3, #0
 80092c4:	9308      	str	r3, [sp, #32]
 80092c6:	6933      	ldr	r3, [r6, #16]
 80092c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092cc:	6918      	ldr	r0, [r3, #16]
 80092ce:	f000 fa54 	bl	800977a <__hi0bits>
 80092d2:	f1c0 0020 	rsb	r0, r0, #32
 80092d6:	9b07      	ldr	r3, [sp, #28]
 80092d8:	4418      	add	r0, r3
 80092da:	f010 001f 	ands.w	r0, r0, #31
 80092de:	d047      	beq.n	8009370 <_dtoa_r+0x8c8>
 80092e0:	f1c0 0320 	rsb	r3, r0, #32
 80092e4:	2b04      	cmp	r3, #4
 80092e6:	dd3b      	ble.n	8009360 <_dtoa_r+0x8b8>
 80092e8:	9b07      	ldr	r3, [sp, #28]
 80092ea:	f1c0 001c 	rsb	r0, r0, #28
 80092ee:	4481      	add	r9, r0
 80092f0:	4405      	add	r5, r0
 80092f2:	4403      	add	r3, r0
 80092f4:	9307      	str	r3, [sp, #28]
 80092f6:	f1b9 0f00 	cmp.w	r9, #0
 80092fa:	dd05      	ble.n	8009308 <_dtoa_r+0x860>
 80092fc:	4659      	mov	r1, fp
 80092fe:	464a      	mov	r2, r9
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fb75 	bl	80099f0 <__lshift>
 8009306:	4683      	mov	fp, r0
 8009308:	9b07      	ldr	r3, [sp, #28]
 800930a:	2b00      	cmp	r3, #0
 800930c:	dd05      	ble.n	800931a <_dtoa_r+0x872>
 800930e:	4631      	mov	r1, r6
 8009310:	461a      	mov	r2, r3
 8009312:	4620      	mov	r0, r4
 8009314:	f000 fb6c 	bl	80099f0 <__lshift>
 8009318:	4606      	mov	r6, r0
 800931a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931c:	b353      	cbz	r3, 8009374 <_dtoa_r+0x8cc>
 800931e:	4631      	mov	r1, r6
 8009320:	4658      	mov	r0, fp
 8009322:	f000 fbb9 	bl	8009a98 <__mcmp>
 8009326:	2800      	cmp	r0, #0
 8009328:	da24      	bge.n	8009374 <_dtoa_r+0x8cc>
 800932a:	2300      	movs	r3, #0
 800932c:	4659      	mov	r1, fp
 800932e:	220a      	movs	r2, #10
 8009330:	4620      	mov	r0, r4
 8009332:	f000 f9e7 	bl	8009704 <__multadd>
 8009336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009338:	f10a 3aff 	add.w	sl, sl, #4294967295
 800933c:	4683      	mov	fp, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 8144 	beq.w	80095cc <_dtoa_r+0xb24>
 8009344:	2300      	movs	r3, #0
 8009346:	4639      	mov	r1, r7
 8009348:	220a      	movs	r2, #10
 800934a:	4620      	mov	r0, r4
 800934c:	f000 f9da 	bl	8009704 <__multadd>
 8009350:	9b04      	ldr	r3, [sp, #16]
 8009352:	4607      	mov	r7, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	dc4d      	bgt.n	80093f4 <_dtoa_r+0x94c>
 8009358:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800935a:	2b02      	cmp	r3, #2
 800935c:	dd4a      	ble.n	80093f4 <_dtoa_r+0x94c>
 800935e:	e011      	b.n	8009384 <_dtoa_r+0x8dc>
 8009360:	d0c9      	beq.n	80092f6 <_dtoa_r+0x84e>
 8009362:	9a07      	ldr	r2, [sp, #28]
 8009364:	331c      	adds	r3, #28
 8009366:	441a      	add	r2, r3
 8009368:	4499      	add	r9, r3
 800936a:	441d      	add	r5, r3
 800936c:	4613      	mov	r3, r2
 800936e:	e7c1      	b.n	80092f4 <_dtoa_r+0x84c>
 8009370:	4603      	mov	r3, r0
 8009372:	e7f6      	b.n	8009362 <_dtoa_r+0x8ba>
 8009374:	f1b8 0f00 	cmp.w	r8, #0
 8009378:	dc36      	bgt.n	80093e8 <_dtoa_r+0x940>
 800937a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800937c:	2b02      	cmp	r3, #2
 800937e:	dd33      	ble.n	80093e8 <_dtoa_r+0x940>
 8009380:	f8cd 8010 	str.w	r8, [sp, #16]
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	b963      	cbnz	r3, 80093a2 <_dtoa_r+0x8fa>
 8009388:	4631      	mov	r1, r6
 800938a:	2205      	movs	r2, #5
 800938c:	4620      	mov	r0, r4
 800938e:	f000 f9b9 	bl	8009704 <__multadd>
 8009392:	4601      	mov	r1, r0
 8009394:	4606      	mov	r6, r0
 8009396:	4658      	mov	r0, fp
 8009398:	f000 fb7e 	bl	8009a98 <__mcmp>
 800939c:	2800      	cmp	r0, #0
 800939e:	f73f add3 	bgt.w	8008f48 <_dtoa_r+0x4a0>
 80093a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093a4:	9d06      	ldr	r5, [sp, #24]
 80093a6:	ea6f 0a03 	mvn.w	sl, r3
 80093aa:	f04f 0900 	mov.w	r9, #0
 80093ae:	4631      	mov	r1, r6
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 f990 	bl	80096d6 <_Bfree>
 80093b6:	2f00      	cmp	r7, #0
 80093b8:	f43f aebd 	beq.w	8009136 <_dtoa_r+0x68e>
 80093bc:	f1b9 0f00 	cmp.w	r9, #0
 80093c0:	d005      	beq.n	80093ce <_dtoa_r+0x926>
 80093c2:	45b9      	cmp	r9, r7
 80093c4:	d003      	beq.n	80093ce <_dtoa_r+0x926>
 80093c6:	4649      	mov	r1, r9
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 f984 	bl	80096d6 <_Bfree>
 80093ce:	4639      	mov	r1, r7
 80093d0:	4620      	mov	r0, r4
 80093d2:	f000 f980 	bl	80096d6 <_Bfree>
 80093d6:	e6ae      	b.n	8009136 <_dtoa_r+0x68e>
 80093d8:	2600      	movs	r6, #0
 80093da:	4637      	mov	r7, r6
 80093dc:	e7e1      	b.n	80093a2 <_dtoa_r+0x8fa>
 80093de:	46ba      	mov	sl, r7
 80093e0:	4637      	mov	r7, r6
 80093e2:	e5b1      	b.n	8008f48 <_dtoa_r+0x4a0>
 80093e4:	40240000 	.word	0x40240000
 80093e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 80f3 	beq.w	80095da <_dtoa_r+0xb32>
 80093f4:	2d00      	cmp	r5, #0
 80093f6:	dd05      	ble.n	8009404 <_dtoa_r+0x95c>
 80093f8:	4639      	mov	r1, r7
 80093fa:	462a      	mov	r2, r5
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 faf7 	bl	80099f0 <__lshift>
 8009402:	4607      	mov	r7, r0
 8009404:	9b08      	ldr	r3, [sp, #32]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d04c      	beq.n	80094a4 <_dtoa_r+0x9fc>
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4620      	mov	r0, r4
 800940e:	f000 f92e 	bl	800966e <_Balloc>
 8009412:	4605      	mov	r5, r0
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	f107 010c 	add.w	r1, r7, #12
 800941a:	3202      	adds	r2, #2
 800941c:	0092      	lsls	r2, r2, #2
 800941e:	300c      	adds	r0, #12
 8009420:	f000 f91a 	bl	8009658 <memcpy>
 8009424:	2201      	movs	r2, #1
 8009426:	4629      	mov	r1, r5
 8009428:	4620      	mov	r0, r4
 800942a:	f000 fae1 	bl	80099f0 <__lshift>
 800942e:	46b9      	mov	r9, r7
 8009430:	4607      	mov	r7, r0
 8009432:	9b06      	ldr	r3, [sp, #24]
 8009434:	9307      	str	r3, [sp, #28]
 8009436:	9b02      	ldr	r3, [sp, #8]
 8009438:	f003 0301 	and.w	r3, r3, #1
 800943c:	9308      	str	r3, [sp, #32]
 800943e:	4631      	mov	r1, r6
 8009440:	4658      	mov	r0, fp
 8009442:	f7ff faa3 	bl	800898c <quorem>
 8009446:	4649      	mov	r1, r9
 8009448:	4605      	mov	r5, r0
 800944a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800944e:	4658      	mov	r0, fp
 8009450:	f000 fb22 	bl	8009a98 <__mcmp>
 8009454:	463a      	mov	r2, r7
 8009456:	9002      	str	r0, [sp, #8]
 8009458:	4631      	mov	r1, r6
 800945a:	4620      	mov	r0, r4
 800945c:	f000 fb36 	bl	8009acc <__mdiff>
 8009460:	68c3      	ldr	r3, [r0, #12]
 8009462:	4602      	mov	r2, r0
 8009464:	bb03      	cbnz	r3, 80094a8 <_dtoa_r+0xa00>
 8009466:	4601      	mov	r1, r0
 8009468:	9009      	str	r0, [sp, #36]	; 0x24
 800946a:	4658      	mov	r0, fp
 800946c:	f000 fb14 	bl	8009a98 <__mcmp>
 8009470:	4603      	mov	r3, r0
 8009472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009474:	4611      	mov	r1, r2
 8009476:	4620      	mov	r0, r4
 8009478:	9309      	str	r3, [sp, #36]	; 0x24
 800947a:	f000 f92c 	bl	80096d6 <_Bfree>
 800947e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009480:	b9a3      	cbnz	r3, 80094ac <_dtoa_r+0xa04>
 8009482:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009484:	b992      	cbnz	r2, 80094ac <_dtoa_r+0xa04>
 8009486:	9a08      	ldr	r2, [sp, #32]
 8009488:	b982      	cbnz	r2, 80094ac <_dtoa_r+0xa04>
 800948a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800948e:	d029      	beq.n	80094e4 <_dtoa_r+0xa3c>
 8009490:	9b02      	ldr	r3, [sp, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	dd01      	ble.n	800949a <_dtoa_r+0x9f2>
 8009496:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800949a:	9b07      	ldr	r3, [sp, #28]
 800949c:	1c5d      	adds	r5, r3, #1
 800949e:	f883 8000 	strb.w	r8, [r3]
 80094a2:	e784      	b.n	80093ae <_dtoa_r+0x906>
 80094a4:	4638      	mov	r0, r7
 80094a6:	e7c2      	b.n	800942e <_dtoa_r+0x986>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e7e3      	b.n	8009474 <_dtoa_r+0x9cc>
 80094ac:	9a02      	ldr	r2, [sp, #8]
 80094ae:	2a00      	cmp	r2, #0
 80094b0:	db04      	blt.n	80094bc <_dtoa_r+0xa14>
 80094b2:	d123      	bne.n	80094fc <_dtoa_r+0xa54>
 80094b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80094b6:	bb0a      	cbnz	r2, 80094fc <_dtoa_r+0xa54>
 80094b8:	9a08      	ldr	r2, [sp, #32]
 80094ba:	b9fa      	cbnz	r2, 80094fc <_dtoa_r+0xa54>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	ddec      	ble.n	800949a <_dtoa_r+0x9f2>
 80094c0:	4659      	mov	r1, fp
 80094c2:	2201      	movs	r2, #1
 80094c4:	4620      	mov	r0, r4
 80094c6:	f000 fa93 	bl	80099f0 <__lshift>
 80094ca:	4631      	mov	r1, r6
 80094cc:	4683      	mov	fp, r0
 80094ce:	f000 fae3 	bl	8009a98 <__mcmp>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	dc03      	bgt.n	80094de <_dtoa_r+0xa36>
 80094d6:	d1e0      	bne.n	800949a <_dtoa_r+0x9f2>
 80094d8:	f018 0f01 	tst.w	r8, #1
 80094dc:	d0dd      	beq.n	800949a <_dtoa_r+0x9f2>
 80094de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80094e2:	d1d8      	bne.n	8009496 <_dtoa_r+0x9ee>
 80094e4:	9b07      	ldr	r3, [sp, #28]
 80094e6:	9a07      	ldr	r2, [sp, #28]
 80094e8:	1c5d      	adds	r5, r3, #1
 80094ea:	2339      	movs	r3, #57	; 0x39
 80094ec:	7013      	strb	r3, [r2, #0]
 80094ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094f2:	1e6a      	subs	r2, r5, #1
 80094f4:	2b39      	cmp	r3, #57	; 0x39
 80094f6:	d04d      	beq.n	8009594 <_dtoa_r+0xaec>
 80094f8:	3301      	adds	r3, #1
 80094fa:	e052      	b.n	80095a2 <_dtoa_r+0xafa>
 80094fc:	9a07      	ldr	r2, [sp, #28]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f102 0501 	add.w	r5, r2, #1
 8009504:	dd06      	ble.n	8009514 <_dtoa_r+0xa6c>
 8009506:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800950a:	d0eb      	beq.n	80094e4 <_dtoa_r+0xa3c>
 800950c:	f108 0801 	add.w	r8, r8, #1
 8009510:	9b07      	ldr	r3, [sp, #28]
 8009512:	e7c4      	b.n	800949e <_dtoa_r+0x9f6>
 8009514:	9b06      	ldr	r3, [sp, #24]
 8009516:	9a04      	ldr	r2, [sp, #16]
 8009518:	1aeb      	subs	r3, r5, r3
 800951a:	4293      	cmp	r3, r2
 800951c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009520:	d021      	beq.n	8009566 <_dtoa_r+0xabe>
 8009522:	4659      	mov	r1, fp
 8009524:	2300      	movs	r3, #0
 8009526:	220a      	movs	r2, #10
 8009528:	4620      	mov	r0, r4
 800952a:	f000 f8eb 	bl	8009704 <__multadd>
 800952e:	45b9      	cmp	r9, r7
 8009530:	4683      	mov	fp, r0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	f04f 020a 	mov.w	r2, #10
 800953a:	4649      	mov	r1, r9
 800953c:	4620      	mov	r0, r4
 800953e:	d105      	bne.n	800954c <_dtoa_r+0xaa4>
 8009540:	f000 f8e0 	bl	8009704 <__multadd>
 8009544:	4681      	mov	r9, r0
 8009546:	4607      	mov	r7, r0
 8009548:	9507      	str	r5, [sp, #28]
 800954a:	e778      	b.n	800943e <_dtoa_r+0x996>
 800954c:	f000 f8da 	bl	8009704 <__multadd>
 8009550:	4639      	mov	r1, r7
 8009552:	4681      	mov	r9, r0
 8009554:	2300      	movs	r3, #0
 8009556:	220a      	movs	r2, #10
 8009558:	4620      	mov	r0, r4
 800955a:	f000 f8d3 	bl	8009704 <__multadd>
 800955e:	4607      	mov	r7, r0
 8009560:	e7f2      	b.n	8009548 <_dtoa_r+0xaa0>
 8009562:	f04f 0900 	mov.w	r9, #0
 8009566:	4659      	mov	r1, fp
 8009568:	2201      	movs	r2, #1
 800956a:	4620      	mov	r0, r4
 800956c:	f000 fa40 	bl	80099f0 <__lshift>
 8009570:	4631      	mov	r1, r6
 8009572:	4683      	mov	fp, r0
 8009574:	f000 fa90 	bl	8009a98 <__mcmp>
 8009578:	2800      	cmp	r0, #0
 800957a:	dcb8      	bgt.n	80094ee <_dtoa_r+0xa46>
 800957c:	d102      	bne.n	8009584 <_dtoa_r+0xadc>
 800957e:	f018 0f01 	tst.w	r8, #1
 8009582:	d1b4      	bne.n	80094ee <_dtoa_r+0xa46>
 8009584:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009588:	1e6a      	subs	r2, r5, #1
 800958a:	2b30      	cmp	r3, #48	; 0x30
 800958c:	f47f af0f 	bne.w	80093ae <_dtoa_r+0x906>
 8009590:	4615      	mov	r5, r2
 8009592:	e7f7      	b.n	8009584 <_dtoa_r+0xadc>
 8009594:	9b06      	ldr	r3, [sp, #24]
 8009596:	4293      	cmp	r3, r2
 8009598:	d105      	bne.n	80095a6 <_dtoa_r+0xafe>
 800959a:	2331      	movs	r3, #49	; 0x31
 800959c:	9a06      	ldr	r2, [sp, #24]
 800959e:	f10a 0a01 	add.w	sl, sl, #1
 80095a2:	7013      	strb	r3, [r2, #0]
 80095a4:	e703      	b.n	80093ae <_dtoa_r+0x906>
 80095a6:	4615      	mov	r5, r2
 80095a8:	e7a1      	b.n	80094ee <_dtoa_r+0xa46>
 80095aa:	4b17      	ldr	r3, [pc, #92]	; (8009608 <_dtoa_r+0xb60>)
 80095ac:	f7ff bae1 	b.w	8008b72 <_dtoa_r+0xca>
 80095b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f47f aabb 	bne.w	8008b2e <_dtoa_r+0x86>
 80095b8:	4b14      	ldr	r3, [pc, #80]	; (800960c <_dtoa_r+0xb64>)
 80095ba:	f7ff bada 	b.w	8008b72 <_dtoa_r+0xca>
 80095be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	f77f ae3f 	ble.w	8009244 <_dtoa_r+0x79c>
 80095c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095c8:	9308      	str	r3, [sp, #32]
 80095ca:	e653      	b.n	8009274 <_dtoa_r+0x7cc>
 80095cc:	9b04      	ldr	r3, [sp, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	dc03      	bgt.n	80095da <_dtoa_r+0xb32>
 80095d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	f73f aed5 	bgt.w	8009384 <_dtoa_r+0x8dc>
 80095da:	9d06      	ldr	r5, [sp, #24]
 80095dc:	4631      	mov	r1, r6
 80095de:	4658      	mov	r0, fp
 80095e0:	f7ff f9d4 	bl	800898c <quorem>
 80095e4:	9b06      	ldr	r3, [sp, #24]
 80095e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80095ea:	f805 8b01 	strb.w	r8, [r5], #1
 80095ee:	9a04      	ldr	r2, [sp, #16]
 80095f0:	1aeb      	subs	r3, r5, r3
 80095f2:	429a      	cmp	r2, r3
 80095f4:	ddb5      	ble.n	8009562 <_dtoa_r+0xaba>
 80095f6:	4659      	mov	r1, fp
 80095f8:	2300      	movs	r3, #0
 80095fa:	220a      	movs	r2, #10
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 f881 	bl	8009704 <__multadd>
 8009602:	4683      	mov	fp, r0
 8009604:	e7ea      	b.n	80095dc <_dtoa_r+0xb34>
 8009606:	bf00      	nop
 8009608:	0800d390 	.word	0x0800d390
 800960c:	0800d3b4 	.word	0x0800d3b4

08009610 <_localeconv_r>:
 8009610:	4b04      	ldr	r3, [pc, #16]	; (8009624 <_localeconv_r+0x14>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6a18      	ldr	r0, [r3, #32]
 8009616:	4b04      	ldr	r3, [pc, #16]	; (8009628 <_localeconv_r+0x18>)
 8009618:	2800      	cmp	r0, #0
 800961a:	bf08      	it	eq
 800961c:	4618      	moveq	r0, r3
 800961e:	30f0      	adds	r0, #240	; 0xf0
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	2000000c 	.word	0x2000000c
 8009628:	20000070 	.word	0x20000070

0800962c <malloc>:
 800962c:	4b02      	ldr	r3, [pc, #8]	; (8009638 <malloc+0xc>)
 800962e:	4601      	mov	r1, r0
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f000 bb53 	b.w	8009cdc <_malloc_r>
 8009636:	bf00      	nop
 8009638:	2000000c 	.word	0x2000000c

0800963c <memchr>:
 800963c:	b510      	push	{r4, lr}
 800963e:	b2c9      	uxtb	r1, r1
 8009640:	4402      	add	r2, r0
 8009642:	4290      	cmp	r0, r2
 8009644:	4603      	mov	r3, r0
 8009646:	d101      	bne.n	800964c <memchr+0x10>
 8009648:	2300      	movs	r3, #0
 800964a:	e003      	b.n	8009654 <memchr+0x18>
 800964c:	781c      	ldrb	r4, [r3, #0]
 800964e:	3001      	adds	r0, #1
 8009650:	428c      	cmp	r4, r1
 8009652:	d1f6      	bne.n	8009642 <memchr+0x6>
 8009654:	4618      	mov	r0, r3
 8009656:	bd10      	pop	{r4, pc}

08009658 <memcpy>:
 8009658:	b510      	push	{r4, lr}
 800965a:	1e43      	subs	r3, r0, #1
 800965c:	440a      	add	r2, r1
 800965e:	4291      	cmp	r1, r2
 8009660:	d100      	bne.n	8009664 <memcpy+0xc>
 8009662:	bd10      	pop	{r4, pc}
 8009664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009668:	f803 4f01 	strb.w	r4, [r3, #1]!
 800966c:	e7f7      	b.n	800965e <memcpy+0x6>

0800966e <_Balloc>:
 800966e:	b570      	push	{r4, r5, r6, lr}
 8009670:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009672:	4604      	mov	r4, r0
 8009674:	460e      	mov	r6, r1
 8009676:	b93d      	cbnz	r5, 8009688 <_Balloc+0x1a>
 8009678:	2010      	movs	r0, #16
 800967a:	f7ff ffd7 	bl	800962c <malloc>
 800967e:	6260      	str	r0, [r4, #36]	; 0x24
 8009680:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009684:	6005      	str	r5, [r0, #0]
 8009686:	60c5      	str	r5, [r0, #12]
 8009688:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800968a:	68eb      	ldr	r3, [r5, #12]
 800968c:	b183      	cbz	r3, 80096b0 <_Balloc+0x42>
 800968e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009690:	68db      	ldr	r3, [r3, #12]
 8009692:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009696:	b9b8      	cbnz	r0, 80096c8 <_Balloc+0x5a>
 8009698:	2101      	movs	r1, #1
 800969a:	fa01 f506 	lsl.w	r5, r1, r6
 800969e:	1d6a      	adds	r2, r5, #5
 80096a0:	0092      	lsls	r2, r2, #2
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 fabf 	bl	8009c26 <_calloc_r>
 80096a8:	b160      	cbz	r0, 80096c4 <_Balloc+0x56>
 80096aa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80096ae:	e00e      	b.n	80096ce <_Balloc+0x60>
 80096b0:	2221      	movs	r2, #33	; 0x21
 80096b2:	2104      	movs	r1, #4
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fab6 	bl	8009c26 <_calloc_r>
 80096ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096bc:	60e8      	str	r0, [r5, #12]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e4      	bne.n	800968e <_Balloc+0x20>
 80096c4:	2000      	movs	r0, #0
 80096c6:	bd70      	pop	{r4, r5, r6, pc}
 80096c8:	6802      	ldr	r2, [r0, #0]
 80096ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80096ce:	2300      	movs	r3, #0
 80096d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096d4:	e7f7      	b.n	80096c6 <_Balloc+0x58>

080096d6 <_Bfree>:
 80096d6:	b570      	push	{r4, r5, r6, lr}
 80096d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80096da:	4606      	mov	r6, r0
 80096dc:	460d      	mov	r5, r1
 80096de:	b93c      	cbnz	r4, 80096f0 <_Bfree+0x1a>
 80096e0:	2010      	movs	r0, #16
 80096e2:	f7ff ffa3 	bl	800962c <malloc>
 80096e6:	6270      	str	r0, [r6, #36]	; 0x24
 80096e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096ec:	6004      	str	r4, [r0, #0]
 80096ee:	60c4      	str	r4, [r0, #12]
 80096f0:	b13d      	cbz	r5, 8009702 <_Bfree+0x2c>
 80096f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80096f4:	686a      	ldr	r2, [r5, #4]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096fc:	6029      	str	r1, [r5, #0]
 80096fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009702:	bd70      	pop	{r4, r5, r6, pc}

08009704 <__multadd>:
 8009704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009708:	461f      	mov	r7, r3
 800970a:	4606      	mov	r6, r0
 800970c:	460c      	mov	r4, r1
 800970e:	2300      	movs	r3, #0
 8009710:	690d      	ldr	r5, [r1, #16]
 8009712:	f101 0c14 	add.w	ip, r1, #20
 8009716:	f8dc 0000 	ldr.w	r0, [ip]
 800971a:	3301      	adds	r3, #1
 800971c:	b281      	uxth	r1, r0
 800971e:	fb02 7101 	mla	r1, r2, r1, r7
 8009722:	0c00      	lsrs	r0, r0, #16
 8009724:	0c0f      	lsrs	r7, r1, #16
 8009726:	fb02 7000 	mla	r0, r2, r0, r7
 800972a:	b289      	uxth	r1, r1
 800972c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009730:	429d      	cmp	r5, r3
 8009732:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009736:	f84c 1b04 	str.w	r1, [ip], #4
 800973a:	dcec      	bgt.n	8009716 <__multadd+0x12>
 800973c:	b1d7      	cbz	r7, 8009774 <__multadd+0x70>
 800973e:	68a3      	ldr	r3, [r4, #8]
 8009740:	42ab      	cmp	r3, r5
 8009742:	dc12      	bgt.n	800976a <__multadd+0x66>
 8009744:	6861      	ldr	r1, [r4, #4]
 8009746:	4630      	mov	r0, r6
 8009748:	3101      	adds	r1, #1
 800974a:	f7ff ff90 	bl	800966e <_Balloc>
 800974e:	4680      	mov	r8, r0
 8009750:	6922      	ldr	r2, [r4, #16]
 8009752:	f104 010c 	add.w	r1, r4, #12
 8009756:	3202      	adds	r2, #2
 8009758:	0092      	lsls	r2, r2, #2
 800975a:	300c      	adds	r0, #12
 800975c:	f7ff ff7c 	bl	8009658 <memcpy>
 8009760:	4621      	mov	r1, r4
 8009762:	4630      	mov	r0, r6
 8009764:	f7ff ffb7 	bl	80096d6 <_Bfree>
 8009768:	4644      	mov	r4, r8
 800976a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800976e:	3501      	adds	r5, #1
 8009770:	615f      	str	r7, [r3, #20]
 8009772:	6125      	str	r5, [r4, #16]
 8009774:	4620      	mov	r0, r4
 8009776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800977a <__hi0bits>:
 800977a:	0c02      	lsrs	r2, r0, #16
 800977c:	0412      	lsls	r2, r2, #16
 800977e:	4603      	mov	r3, r0
 8009780:	b9b2      	cbnz	r2, 80097b0 <__hi0bits+0x36>
 8009782:	0403      	lsls	r3, r0, #16
 8009784:	2010      	movs	r0, #16
 8009786:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800978a:	bf04      	itt	eq
 800978c:	021b      	lsleq	r3, r3, #8
 800978e:	3008      	addeq	r0, #8
 8009790:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009794:	bf04      	itt	eq
 8009796:	011b      	lsleq	r3, r3, #4
 8009798:	3004      	addeq	r0, #4
 800979a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800979e:	bf04      	itt	eq
 80097a0:	009b      	lsleq	r3, r3, #2
 80097a2:	3002      	addeq	r0, #2
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	db06      	blt.n	80097b6 <__hi0bits+0x3c>
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	d503      	bpl.n	80097b4 <__hi0bits+0x3a>
 80097ac:	3001      	adds	r0, #1
 80097ae:	4770      	bx	lr
 80097b0:	2000      	movs	r0, #0
 80097b2:	e7e8      	b.n	8009786 <__hi0bits+0xc>
 80097b4:	2020      	movs	r0, #32
 80097b6:	4770      	bx	lr

080097b8 <__lo0bits>:
 80097b8:	6803      	ldr	r3, [r0, #0]
 80097ba:	4601      	mov	r1, r0
 80097bc:	f013 0207 	ands.w	r2, r3, #7
 80097c0:	d00b      	beq.n	80097da <__lo0bits+0x22>
 80097c2:	07da      	lsls	r2, r3, #31
 80097c4:	d423      	bmi.n	800980e <__lo0bits+0x56>
 80097c6:	0798      	lsls	r0, r3, #30
 80097c8:	bf49      	itett	mi
 80097ca:	085b      	lsrmi	r3, r3, #1
 80097cc:	089b      	lsrpl	r3, r3, #2
 80097ce:	2001      	movmi	r0, #1
 80097d0:	600b      	strmi	r3, [r1, #0]
 80097d2:	bf5c      	itt	pl
 80097d4:	600b      	strpl	r3, [r1, #0]
 80097d6:	2002      	movpl	r0, #2
 80097d8:	4770      	bx	lr
 80097da:	b298      	uxth	r0, r3
 80097dc:	b9a8      	cbnz	r0, 800980a <__lo0bits+0x52>
 80097de:	2010      	movs	r0, #16
 80097e0:	0c1b      	lsrs	r3, r3, #16
 80097e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80097e6:	bf04      	itt	eq
 80097e8:	0a1b      	lsreq	r3, r3, #8
 80097ea:	3008      	addeq	r0, #8
 80097ec:	071a      	lsls	r2, r3, #28
 80097ee:	bf04      	itt	eq
 80097f0:	091b      	lsreq	r3, r3, #4
 80097f2:	3004      	addeq	r0, #4
 80097f4:	079a      	lsls	r2, r3, #30
 80097f6:	bf04      	itt	eq
 80097f8:	089b      	lsreq	r3, r3, #2
 80097fa:	3002      	addeq	r0, #2
 80097fc:	07da      	lsls	r2, r3, #31
 80097fe:	d402      	bmi.n	8009806 <__lo0bits+0x4e>
 8009800:	085b      	lsrs	r3, r3, #1
 8009802:	d006      	beq.n	8009812 <__lo0bits+0x5a>
 8009804:	3001      	adds	r0, #1
 8009806:	600b      	str	r3, [r1, #0]
 8009808:	4770      	bx	lr
 800980a:	4610      	mov	r0, r2
 800980c:	e7e9      	b.n	80097e2 <__lo0bits+0x2a>
 800980e:	2000      	movs	r0, #0
 8009810:	4770      	bx	lr
 8009812:	2020      	movs	r0, #32
 8009814:	4770      	bx	lr

08009816 <__i2b>:
 8009816:	b510      	push	{r4, lr}
 8009818:	460c      	mov	r4, r1
 800981a:	2101      	movs	r1, #1
 800981c:	f7ff ff27 	bl	800966e <_Balloc>
 8009820:	2201      	movs	r2, #1
 8009822:	6144      	str	r4, [r0, #20]
 8009824:	6102      	str	r2, [r0, #16]
 8009826:	bd10      	pop	{r4, pc}

08009828 <__multiply>:
 8009828:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	4614      	mov	r4, r2
 800982e:	690a      	ldr	r2, [r1, #16]
 8009830:	6923      	ldr	r3, [r4, #16]
 8009832:	4688      	mov	r8, r1
 8009834:	429a      	cmp	r2, r3
 8009836:	bfbe      	ittt	lt
 8009838:	460b      	movlt	r3, r1
 800983a:	46a0      	movlt	r8, r4
 800983c:	461c      	movlt	r4, r3
 800983e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009842:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800984a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800984e:	eb07 0609 	add.w	r6, r7, r9
 8009852:	42b3      	cmp	r3, r6
 8009854:	bfb8      	it	lt
 8009856:	3101      	addlt	r1, #1
 8009858:	f7ff ff09 	bl	800966e <_Balloc>
 800985c:	f100 0514 	add.w	r5, r0, #20
 8009860:	462b      	mov	r3, r5
 8009862:	2200      	movs	r2, #0
 8009864:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009868:	4573      	cmp	r3, lr
 800986a:	d316      	bcc.n	800989a <__multiply+0x72>
 800986c:	f104 0214 	add.w	r2, r4, #20
 8009870:	f108 0114 	add.w	r1, r8, #20
 8009874:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009878:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	9b00      	ldr	r3, [sp, #0]
 8009880:	9201      	str	r2, [sp, #4]
 8009882:	4293      	cmp	r3, r2
 8009884:	d80c      	bhi.n	80098a0 <__multiply+0x78>
 8009886:	2e00      	cmp	r6, #0
 8009888:	dd03      	ble.n	8009892 <__multiply+0x6a>
 800988a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800988e:	2b00      	cmp	r3, #0
 8009890:	d05d      	beq.n	800994e <__multiply+0x126>
 8009892:	6106      	str	r6, [r0, #16]
 8009894:	b003      	add	sp, #12
 8009896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989a:	f843 2b04 	str.w	r2, [r3], #4
 800989e:	e7e3      	b.n	8009868 <__multiply+0x40>
 80098a0:	f8b2 b000 	ldrh.w	fp, [r2]
 80098a4:	f1bb 0f00 	cmp.w	fp, #0
 80098a8:	d023      	beq.n	80098f2 <__multiply+0xca>
 80098aa:	4689      	mov	r9, r1
 80098ac:	46ac      	mov	ip, r5
 80098ae:	f04f 0800 	mov.w	r8, #0
 80098b2:	f859 4b04 	ldr.w	r4, [r9], #4
 80098b6:	f8dc a000 	ldr.w	sl, [ip]
 80098ba:	b2a3      	uxth	r3, r4
 80098bc:	fa1f fa8a 	uxth.w	sl, sl
 80098c0:	fb0b a303 	mla	r3, fp, r3, sl
 80098c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098c8:	f8dc 4000 	ldr.w	r4, [ip]
 80098cc:	4443      	add	r3, r8
 80098ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098d2:	fb0b 840a 	mla	r4, fp, sl, r8
 80098d6:	46e2      	mov	sl, ip
 80098d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80098dc:	b29b      	uxth	r3, r3
 80098de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80098e2:	454f      	cmp	r7, r9
 80098e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80098e8:	f84a 3b04 	str.w	r3, [sl], #4
 80098ec:	d82b      	bhi.n	8009946 <__multiply+0x11e>
 80098ee:	f8cc 8004 	str.w	r8, [ip, #4]
 80098f2:	9b01      	ldr	r3, [sp, #4]
 80098f4:	3204      	adds	r2, #4
 80098f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80098fa:	f1ba 0f00 	cmp.w	sl, #0
 80098fe:	d020      	beq.n	8009942 <__multiply+0x11a>
 8009900:	4689      	mov	r9, r1
 8009902:	46a8      	mov	r8, r5
 8009904:	f04f 0b00 	mov.w	fp, #0
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	f8b9 c000 	ldrh.w	ip, [r9]
 800990e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009912:	b29b      	uxth	r3, r3
 8009914:	fb0a 440c 	mla	r4, sl, ip, r4
 8009918:	46c4      	mov	ip, r8
 800991a:	445c      	add	r4, fp
 800991c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009920:	f84c 3b04 	str.w	r3, [ip], #4
 8009924:	f859 3b04 	ldr.w	r3, [r9], #4
 8009928:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800992c:	0c1b      	lsrs	r3, r3, #16
 800992e:	fb0a b303 	mla	r3, sl, r3, fp
 8009932:	454f      	cmp	r7, r9
 8009934:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009938:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800993c:	d805      	bhi.n	800994a <__multiply+0x122>
 800993e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009942:	3504      	adds	r5, #4
 8009944:	e79b      	b.n	800987e <__multiply+0x56>
 8009946:	46d4      	mov	ip, sl
 8009948:	e7b3      	b.n	80098b2 <__multiply+0x8a>
 800994a:	46e0      	mov	r8, ip
 800994c:	e7dd      	b.n	800990a <__multiply+0xe2>
 800994e:	3e01      	subs	r6, #1
 8009950:	e799      	b.n	8009886 <__multiply+0x5e>
	...

08009954 <__pow5mult>:
 8009954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009958:	4615      	mov	r5, r2
 800995a:	f012 0203 	ands.w	r2, r2, #3
 800995e:	4606      	mov	r6, r0
 8009960:	460f      	mov	r7, r1
 8009962:	d007      	beq.n	8009974 <__pow5mult+0x20>
 8009964:	4c21      	ldr	r4, [pc, #132]	; (80099ec <__pow5mult+0x98>)
 8009966:	3a01      	subs	r2, #1
 8009968:	2300      	movs	r3, #0
 800996a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800996e:	f7ff fec9 	bl	8009704 <__multadd>
 8009972:	4607      	mov	r7, r0
 8009974:	10ad      	asrs	r5, r5, #2
 8009976:	d035      	beq.n	80099e4 <__pow5mult+0x90>
 8009978:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800997a:	b93c      	cbnz	r4, 800998c <__pow5mult+0x38>
 800997c:	2010      	movs	r0, #16
 800997e:	f7ff fe55 	bl	800962c <malloc>
 8009982:	6270      	str	r0, [r6, #36]	; 0x24
 8009984:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009988:	6004      	str	r4, [r0, #0]
 800998a:	60c4      	str	r4, [r0, #12]
 800998c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009990:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009994:	b94c      	cbnz	r4, 80099aa <__pow5mult+0x56>
 8009996:	f240 2171 	movw	r1, #625	; 0x271
 800999a:	4630      	mov	r0, r6
 800999c:	f7ff ff3b 	bl	8009816 <__i2b>
 80099a0:	2300      	movs	r3, #0
 80099a2:	4604      	mov	r4, r0
 80099a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80099a8:	6003      	str	r3, [r0, #0]
 80099aa:	f04f 0800 	mov.w	r8, #0
 80099ae:	07eb      	lsls	r3, r5, #31
 80099b0:	d50a      	bpl.n	80099c8 <__pow5mult+0x74>
 80099b2:	4639      	mov	r1, r7
 80099b4:	4622      	mov	r2, r4
 80099b6:	4630      	mov	r0, r6
 80099b8:	f7ff ff36 	bl	8009828 <__multiply>
 80099bc:	4681      	mov	r9, r0
 80099be:	4639      	mov	r1, r7
 80099c0:	4630      	mov	r0, r6
 80099c2:	f7ff fe88 	bl	80096d6 <_Bfree>
 80099c6:	464f      	mov	r7, r9
 80099c8:	106d      	asrs	r5, r5, #1
 80099ca:	d00b      	beq.n	80099e4 <__pow5mult+0x90>
 80099cc:	6820      	ldr	r0, [r4, #0]
 80099ce:	b938      	cbnz	r0, 80099e0 <__pow5mult+0x8c>
 80099d0:	4622      	mov	r2, r4
 80099d2:	4621      	mov	r1, r4
 80099d4:	4630      	mov	r0, r6
 80099d6:	f7ff ff27 	bl	8009828 <__multiply>
 80099da:	6020      	str	r0, [r4, #0]
 80099dc:	f8c0 8000 	str.w	r8, [r0]
 80099e0:	4604      	mov	r4, r0
 80099e2:	e7e4      	b.n	80099ae <__pow5mult+0x5a>
 80099e4:	4638      	mov	r0, r7
 80099e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ea:	bf00      	nop
 80099ec:	0800d518 	.word	0x0800d518

080099f0 <__lshift>:
 80099f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f4:	460c      	mov	r4, r1
 80099f6:	4607      	mov	r7, r0
 80099f8:	4616      	mov	r6, r2
 80099fa:	6923      	ldr	r3, [r4, #16]
 80099fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a00:	eb0a 0903 	add.w	r9, sl, r3
 8009a04:	6849      	ldr	r1, [r1, #4]
 8009a06:	68a3      	ldr	r3, [r4, #8]
 8009a08:	f109 0501 	add.w	r5, r9, #1
 8009a0c:	42ab      	cmp	r3, r5
 8009a0e:	db32      	blt.n	8009a76 <__lshift+0x86>
 8009a10:	4638      	mov	r0, r7
 8009a12:	f7ff fe2c 	bl	800966e <_Balloc>
 8009a16:	2300      	movs	r3, #0
 8009a18:	4680      	mov	r8, r0
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f100 0114 	add.w	r1, r0, #20
 8009a20:	4553      	cmp	r3, sl
 8009a22:	db2b      	blt.n	8009a7c <__lshift+0x8c>
 8009a24:	6920      	ldr	r0, [r4, #16]
 8009a26:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a2a:	f104 0314 	add.w	r3, r4, #20
 8009a2e:	f016 021f 	ands.w	r2, r6, #31
 8009a32:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a36:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a3a:	d025      	beq.n	8009a88 <__lshift+0x98>
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	f1c2 0e20 	rsb	lr, r2, #32
 8009a42:	468a      	mov	sl, r1
 8009a44:	681e      	ldr	r6, [r3, #0]
 8009a46:	4096      	lsls	r6, r2
 8009a48:	4330      	orrs	r0, r6
 8009a4a:	f84a 0b04 	str.w	r0, [sl], #4
 8009a4e:	f853 0b04 	ldr.w	r0, [r3], #4
 8009a52:	459c      	cmp	ip, r3
 8009a54:	fa20 f00e 	lsr.w	r0, r0, lr
 8009a58:	d814      	bhi.n	8009a84 <__lshift+0x94>
 8009a5a:	6048      	str	r0, [r1, #4]
 8009a5c:	b108      	cbz	r0, 8009a62 <__lshift+0x72>
 8009a5e:	f109 0502 	add.w	r5, r9, #2
 8009a62:	3d01      	subs	r5, #1
 8009a64:	4638      	mov	r0, r7
 8009a66:	f8c8 5010 	str.w	r5, [r8, #16]
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	f7ff fe33 	bl	80096d6 <_Bfree>
 8009a70:	4640      	mov	r0, r8
 8009a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a76:	3101      	adds	r1, #1
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	e7c7      	b.n	8009a0c <__lshift+0x1c>
 8009a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009a80:	3301      	adds	r3, #1
 8009a82:	e7cd      	b.n	8009a20 <__lshift+0x30>
 8009a84:	4651      	mov	r1, sl
 8009a86:	e7dc      	b.n	8009a42 <__lshift+0x52>
 8009a88:	3904      	subs	r1, #4
 8009a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a8e:	459c      	cmp	ip, r3
 8009a90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a94:	d8f9      	bhi.n	8009a8a <__lshift+0x9a>
 8009a96:	e7e4      	b.n	8009a62 <__lshift+0x72>

08009a98 <__mcmp>:
 8009a98:	6903      	ldr	r3, [r0, #16]
 8009a9a:	690a      	ldr	r2, [r1, #16]
 8009a9c:	b530      	push	{r4, r5, lr}
 8009a9e:	1a9b      	subs	r3, r3, r2
 8009aa0:	d10c      	bne.n	8009abc <__mcmp+0x24>
 8009aa2:	0092      	lsls	r2, r2, #2
 8009aa4:	3014      	adds	r0, #20
 8009aa6:	3114      	adds	r1, #20
 8009aa8:	1884      	adds	r4, r0, r2
 8009aaa:	4411      	add	r1, r2
 8009aac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ab0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ab4:	4295      	cmp	r5, r2
 8009ab6:	d003      	beq.n	8009ac0 <__mcmp+0x28>
 8009ab8:	d305      	bcc.n	8009ac6 <__mcmp+0x2e>
 8009aba:	2301      	movs	r3, #1
 8009abc:	4618      	mov	r0, r3
 8009abe:	bd30      	pop	{r4, r5, pc}
 8009ac0:	42a0      	cmp	r0, r4
 8009ac2:	d3f3      	bcc.n	8009aac <__mcmp+0x14>
 8009ac4:	e7fa      	b.n	8009abc <__mcmp+0x24>
 8009ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8009aca:	e7f7      	b.n	8009abc <__mcmp+0x24>

08009acc <__mdiff>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	4614      	mov	r4, r2
 8009ada:	f7ff ffdd 	bl	8009a98 <__mcmp>
 8009ade:	1e06      	subs	r6, r0, #0
 8009ae0:	d108      	bne.n	8009af4 <__mdiff+0x28>
 8009ae2:	4631      	mov	r1, r6
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f7ff fdc2 	bl	800966e <_Balloc>
 8009aea:	2301      	movs	r3, #1
 8009aec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af4:	bfa4      	itt	ge
 8009af6:	4623      	movge	r3, r4
 8009af8:	462c      	movge	r4, r5
 8009afa:	4638      	mov	r0, r7
 8009afc:	6861      	ldr	r1, [r4, #4]
 8009afe:	bfa6      	itte	ge
 8009b00:	461d      	movge	r5, r3
 8009b02:	2600      	movge	r6, #0
 8009b04:	2601      	movlt	r6, #1
 8009b06:	f7ff fdb2 	bl	800966e <_Balloc>
 8009b0a:	f04f 0e00 	mov.w	lr, #0
 8009b0e:	60c6      	str	r6, [r0, #12]
 8009b10:	692b      	ldr	r3, [r5, #16]
 8009b12:	6926      	ldr	r6, [r4, #16]
 8009b14:	f104 0214 	add.w	r2, r4, #20
 8009b18:	f105 0914 	add.w	r9, r5, #20
 8009b1c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009b20:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009b24:	f100 0114 	add.w	r1, r0, #20
 8009b28:	f852 ab04 	ldr.w	sl, [r2], #4
 8009b2c:	f859 5b04 	ldr.w	r5, [r9], #4
 8009b30:	fa1f f38a 	uxth.w	r3, sl
 8009b34:	4473      	add	r3, lr
 8009b36:	b2ac      	uxth	r4, r5
 8009b38:	1b1b      	subs	r3, r3, r4
 8009b3a:	0c2c      	lsrs	r4, r5, #16
 8009b3c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009b40:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009b4a:	45c8      	cmp	r8, r9
 8009b4c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009b50:	4694      	mov	ip, r2
 8009b52:	f841 4b04 	str.w	r4, [r1], #4
 8009b56:	d8e7      	bhi.n	8009b28 <__mdiff+0x5c>
 8009b58:	45bc      	cmp	ip, r7
 8009b5a:	d304      	bcc.n	8009b66 <__mdiff+0x9a>
 8009b5c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009b60:	b183      	cbz	r3, 8009b84 <__mdiff+0xb8>
 8009b62:	6106      	str	r6, [r0, #16]
 8009b64:	e7c4      	b.n	8009af0 <__mdiff+0x24>
 8009b66:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009b6a:	b2a2      	uxth	r2, r4
 8009b6c:	4472      	add	r2, lr
 8009b6e:	1413      	asrs	r3, r2, #16
 8009b70:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009b74:	b292      	uxth	r2, r2
 8009b76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009b7a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009b7e:	f841 2b04 	str.w	r2, [r1], #4
 8009b82:	e7e9      	b.n	8009b58 <__mdiff+0x8c>
 8009b84:	3e01      	subs	r6, #1
 8009b86:	e7e9      	b.n	8009b5c <__mdiff+0x90>

08009b88 <__d2b>:
 8009b88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b8c:	461c      	mov	r4, r3
 8009b8e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009b92:	2101      	movs	r1, #1
 8009b94:	4690      	mov	r8, r2
 8009b96:	f7ff fd6a 	bl	800966e <_Balloc>
 8009b9a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009b9e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009ba2:	4607      	mov	r7, r0
 8009ba4:	bb34      	cbnz	r4, 8009bf4 <__d2b+0x6c>
 8009ba6:	9201      	str	r2, [sp, #4]
 8009ba8:	f1b8 0200 	subs.w	r2, r8, #0
 8009bac:	d027      	beq.n	8009bfe <__d2b+0x76>
 8009bae:	a802      	add	r0, sp, #8
 8009bb0:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009bb4:	f7ff fe00 	bl	80097b8 <__lo0bits>
 8009bb8:	9900      	ldr	r1, [sp, #0]
 8009bba:	b1f0      	cbz	r0, 8009bfa <__d2b+0x72>
 8009bbc:	9a01      	ldr	r2, [sp, #4]
 8009bbe:	f1c0 0320 	rsb	r3, r0, #32
 8009bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc6:	430b      	orrs	r3, r1
 8009bc8:	40c2      	lsrs	r2, r0
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	9201      	str	r2, [sp, #4]
 8009bce:	9b01      	ldr	r3, [sp, #4]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bf14      	ite	ne
 8009bd4:	2102      	movne	r1, #2
 8009bd6:	2101      	moveq	r1, #1
 8009bd8:	61bb      	str	r3, [r7, #24]
 8009bda:	6139      	str	r1, [r7, #16]
 8009bdc:	b1c4      	cbz	r4, 8009c10 <__d2b+0x88>
 8009bde:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009be2:	4404      	add	r4, r0
 8009be4:	6034      	str	r4, [r6, #0]
 8009be6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009bea:	6028      	str	r0, [r5, #0]
 8009bec:	4638      	mov	r0, r7
 8009bee:	b002      	add	sp, #8
 8009bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8009bf8:	e7d5      	b.n	8009ba6 <__d2b+0x1e>
 8009bfa:	6179      	str	r1, [r7, #20]
 8009bfc:	e7e7      	b.n	8009bce <__d2b+0x46>
 8009bfe:	a801      	add	r0, sp, #4
 8009c00:	f7ff fdda 	bl	80097b8 <__lo0bits>
 8009c04:	2101      	movs	r1, #1
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	6139      	str	r1, [r7, #16]
 8009c0a:	617b      	str	r3, [r7, #20]
 8009c0c:	3020      	adds	r0, #32
 8009c0e:	e7e5      	b.n	8009bdc <__d2b+0x54>
 8009c10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009c18:	6030      	str	r0, [r6, #0]
 8009c1a:	6918      	ldr	r0, [r3, #16]
 8009c1c:	f7ff fdad 	bl	800977a <__hi0bits>
 8009c20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009c24:	e7e1      	b.n	8009bea <__d2b+0x62>

08009c26 <_calloc_r>:
 8009c26:	b538      	push	{r3, r4, r5, lr}
 8009c28:	fb02 f401 	mul.w	r4, r2, r1
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	f000 f855 	bl	8009cdc <_malloc_r>
 8009c32:	4605      	mov	r5, r0
 8009c34:	b118      	cbz	r0, 8009c3e <_calloc_r+0x18>
 8009c36:	4622      	mov	r2, r4
 8009c38:	2100      	movs	r1, #0
 8009c3a:	f7fe fa2f 	bl	800809c <memset>
 8009c3e:	4628      	mov	r0, r5
 8009c40:	bd38      	pop	{r3, r4, r5, pc}
	...

08009c44 <_free_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4605      	mov	r5, r0
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	d043      	beq.n	8009cd4 <_free_r+0x90>
 8009c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c50:	1f0c      	subs	r4, r1, #4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bfb8      	it	lt
 8009c56:	18e4      	addlt	r4, r4, r3
 8009c58:	f000 fa27 	bl	800a0aa <__malloc_lock>
 8009c5c:	4a1e      	ldr	r2, [pc, #120]	; (8009cd8 <_free_r+0x94>)
 8009c5e:	6813      	ldr	r3, [r2, #0]
 8009c60:	4610      	mov	r0, r2
 8009c62:	b933      	cbnz	r3, 8009c72 <_free_r+0x2e>
 8009c64:	6063      	str	r3, [r4, #4]
 8009c66:	6014      	str	r4, [r2, #0]
 8009c68:	4628      	mov	r0, r5
 8009c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c6e:	f000 ba1d 	b.w	800a0ac <__malloc_unlock>
 8009c72:	42a3      	cmp	r3, r4
 8009c74:	d90b      	bls.n	8009c8e <_free_r+0x4a>
 8009c76:	6821      	ldr	r1, [r4, #0]
 8009c78:	1862      	adds	r2, r4, r1
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	bf01      	itttt	eq
 8009c7e:	681a      	ldreq	r2, [r3, #0]
 8009c80:	685b      	ldreq	r3, [r3, #4]
 8009c82:	1852      	addeq	r2, r2, r1
 8009c84:	6022      	streq	r2, [r4, #0]
 8009c86:	6063      	str	r3, [r4, #4]
 8009c88:	6004      	str	r4, [r0, #0]
 8009c8a:	e7ed      	b.n	8009c68 <_free_r+0x24>
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	b10a      	cbz	r2, 8009c96 <_free_r+0x52>
 8009c92:	42a2      	cmp	r2, r4
 8009c94:	d9fa      	bls.n	8009c8c <_free_r+0x48>
 8009c96:	6819      	ldr	r1, [r3, #0]
 8009c98:	1858      	adds	r0, r3, r1
 8009c9a:	42a0      	cmp	r0, r4
 8009c9c:	d10b      	bne.n	8009cb6 <_free_r+0x72>
 8009c9e:	6820      	ldr	r0, [r4, #0]
 8009ca0:	4401      	add	r1, r0
 8009ca2:	1858      	adds	r0, r3, r1
 8009ca4:	4282      	cmp	r2, r0
 8009ca6:	6019      	str	r1, [r3, #0]
 8009ca8:	d1de      	bne.n	8009c68 <_free_r+0x24>
 8009caa:	6810      	ldr	r0, [r2, #0]
 8009cac:	6852      	ldr	r2, [r2, #4]
 8009cae:	4401      	add	r1, r0
 8009cb0:	6019      	str	r1, [r3, #0]
 8009cb2:	605a      	str	r2, [r3, #4]
 8009cb4:	e7d8      	b.n	8009c68 <_free_r+0x24>
 8009cb6:	d902      	bls.n	8009cbe <_free_r+0x7a>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	602b      	str	r3, [r5, #0]
 8009cbc:	e7d4      	b.n	8009c68 <_free_r+0x24>
 8009cbe:	6820      	ldr	r0, [r4, #0]
 8009cc0:	1821      	adds	r1, r4, r0
 8009cc2:	428a      	cmp	r2, r1
 8009cc4:	bf01      	itttt	eq
 8009cc6:	6811      	ldreq	r1, [r2, #0]
 8009cc8:	6852      	ldreq	r2, [r2, #4]
 8009cca:	1809      	addeq	r1, r1, r0
 8009ccc:	6021      	streq	r1, [r4, #0]
 8009cce:	6062      	str	r2, [r4, #4]
 8009cd0:	605c      	str	r4, [r3, #4]
 8009cd2:	e7c9      	b.n	8009c68 <_free_r+0x24>
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000628 	.word	0x20000628

08009cdc <_malloc_r>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	1ccd      	adds	r5, r1, #3
 8009ce0:	f025 0503 	bic.w	r5, r5, #3
 8009ce4:	3508      	adds	r5, #8
 8009ce6:	2d0c      	cmp	r5, #12
 8009ce8:	bf38      	it	cc
 8009cea:	250c      	movcc	r5, #12
 8009cec:	2d00      	cmp	r5, #0
 8009cee:	4606      	mov	r6, r0
 8009cf0:	db01      	blt.n	8009cf6 <_malloc_r+0x1a>
 8009cf2:	42a9      	cmp	r1, r5
 8009cf4:	d903      	bls.n	8009cfe <_malloc_r+0x22>
 8009cf6:	230c      	movs	r3, #12
 8009cf8:	6033      	str	r3, [r6, #0]
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}
 8009cfe:	f000 f9d4 	bl	800a0aa <__malloc_lock>
 8009d02:	4a21      	ldr	r2, [pc, #132]	; (8009d88 <_malloc_r+0xac>)
 8009d04:	6814      	ldr	r4, [r2, #0]
 8009d06:	4621      	mov	r1, r4
 8009d08:	b991      	cbnz	r1, 8009d30 <_malloc_r+0x54>
 8009d0a:	4c20      	ldr	r4, [pc, #128]	; (8009d8c <_malloc_r+0xb0>)
 8009d0c:	6823      	ldr	r3, [r4, #0]
 8009d0e:	b91b      	cbnz	r3, 8009d18 <_malloc_r+0x3c>
 8009d10:	4630      	mov	r0, r6
 8009d12:	f000 f98f 	bl	800a034 <_sbrk_r>
 8009d16:	6020      	str	r0, [r4, #0]
 8009d18:	4629      	mov	r1, r5
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	f000 f98a 	bl	800a034 <_sbrk_r>
 8009d20:	1c43      	adds	r3, r0, #1
 8009d22:	d124      	bne.n	8009d6e <_malloc_r+0x92>
 8009d24:	230c      	movs	r3, #12
 8009d26:	4630      	mov	r0, r6
 8009d28:	6033      	str	r3, [r6, #0]
 8009d2a:	f000 f9bf 	bl	800a0ac <__malloc_unlock>
 8009d2e:	e7e4      	b.n	8009cfa <_malloc_r+0x1e>
 8009d30:	680b      	ldr	r3, [r1, #0]
 8009d32:	1b5b      	subs	r3, r3, r5
 8009d34:	d418      	bmi.n	8009d68 <_malloc_r+0x8c>
 8009d36:	2b0b      	cmp	r3, #11
 8009d38:	d90f      	bls.n	8009d5a <_malloc_r+0x7e>
 8009d3a:	600b      	str	r3, [r1, #0]
 8009d3c:	18cc      	adds	r4, r1, r3
 8009d3e:	50cd      	str	r5, [r1, r3]
 8009d40:	4630      	mov	r0, r6
 8009d42:	f000 f9b3 	bl	800a0ac <__malloc_unlock>
 8009d46:	f104 000b 	add.w	r0, r4, #11
 8009d4a:	1d23      	adds	r3, r4, #4
 8009d4c:	f020 0007 	bic.w	r0, r0, #7
 8009d50:	1ac3      	subs	r3, r0, r3
 8009d52:	d0d3      	beq.n	8009cfc <_malloc_r+0x20>
 8009d54:	425a      	negs	r2, r3
 8009d56:	50e2      	str	r2, [r4, r3]
 8009d58:	e7d0      	b.n	8009cfc <_malloc_r+0x20>
 8009d5a:	684b      	ldr	r3, [r1, #4]
 8009d5c:	428c      	cmp	r4, r1
 8009d5e:	bf16      	itet	ne
 8009d60:	6063      	strne	r3, [r4, #4]
 8009d62:	6013      	streq	r3, [r2, #0]
 8009d64:	460c      	movne	r4, r1
 8009d66:	e7eb      	b.n	8009d40 <_malloc_r+0x64>
 8009d68:	460c      	mov	r4, r1
 8009d6a:	6849      	ldr	r1, [r1, #4]
 8009d6c:	e7cc      	b.n	8009d08 <_malloc_r+0x2c>
 8009d6e:	1cc4      	adds	r4, r0, #3
 8009d70:	f024 0403 	bic.w	r4, r4, #3
 8009d74:	42a0      	cmp	r0, r4
 8009d76:	d005      	beq.n	8009d84 <_malloc_r+0xa8>
 8009d78:	1a21      	subs	r1, r4, r0
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f000 f95a 	bl	800a034 <_sbrk_r>
 8009d80:	3001      	adds	r0, #1
 8009d82:	d0cf      	beq.n	8009d24 <_malloc_r+0x48>
 8009d84:	6025      	str	r5, [r4, #0]
 8009d86:	e7db      	b.n	8009d40 <_malloc_r+0x64>
 8009d88:	20000628 	.word	0x20000628
 8009d8c:	2000062c 	.word	0x2000062c

08009d90 <__ssputs_r>:
 8009d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d94:	688e      	ldr	r6, [r1, #8]
 8009d96:	4682      	mov	sl, r0
 8009d98:	429e      	cmp	r6, r3
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	4690      	mov	r8, r2
 8009d9e:	4699      	mov	r9, r3
 8009da0:	d837      	bhi.n	8009e12 <__ssputs_r+0x82>
 8009da2:	898a      	ldrh	r2, [r1, #12]
 8009da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009da8:	d031      	beq.n	8009e0e <__ssputs_r+0x7e>
 8009daa:	2302      	movs	r3, #2
 8009dac:	6825      	ldr	r5, [r4, #0]
 8009dae:	6909      	ldr	r1, [r1, #16]
 8009db0:	1a6f      	subs	r7, r5, r1
 8009db2:	6965      	ldr	r5, [r4, #20]
 8009db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009db8:	fb95 f5f3 	sdiv	r5, r5, r3
 8009dbc:	f109 0301 	add.w	r3, r9, #1
 8009dc0:	443b      	add	r3, r7
 8009dc2:	429d      	cmp	r5, r3
 8009dc4:	bf38      	it	cc
 8009dc6:	461d      	movcc	r5, r3
 8009dc8:	0553      	lsls	r3, r2, #21
 8009dca:	d530      	bpl.n	8009e2e <__ssputs_r+0x9e>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7ff ff85 	bl	8009cdc <_malloc_r>
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	b950      	cbnz	r0, 8009dec <__ssputs_r+0x5c>
 8009dd6:	230c      	movs	r3, #12
 8009dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ddc:	f8ca 3000 	str.w	r3, [sl]
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de6:	81a3      	strh	r3, [r4, #12]
 8009de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dec:	463a      	mov	r2, r7
 8009dee:	6921      	ldr	r1, [r4, #16]
 8009df0:	f7ff fc32 	bl	8009658 <memcpy>
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	6126      	str	r6, [r4, #16]
 8009e02:	443e      	add	r6, r7
 8009e04:	6026      	str	r6, [r4, #0]
 8009e06:	464e      	mov	r6, r9
 8009e08:	6165      	str	r5, [r4, #20]
 8009e0a:	1bed      	subs	r5, r5, r7
 8009e0c:	60a5      	str	r5, [r4, #8]
 8009e0e:	454e      	cmp	r6, r9
 8009e10:	d900      	bls.n	8009e14 <__ssputs_r+0x84>
 8009e12:	464e      	mov	r6, r9
 8009e14:	4632      	mov	r2, r6
 8009e16:	4641      	mov	r1, r8
 8009e18:	6820      	ldr	r0, [r4, #0]
 8009e1a:	f000 f92d 	bl	800a078 <memmove>
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	2000      	movs	r0, #0
 8009e22:	1b9b      	subs	r3, r3, r6
 8009e24:	60a3      	str	r3, [r4, #8]
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	441e      	add	r6, r3
 8009e2a:	6026      	str	r6, [r4, #0]
 8009e2c:	e7dc      	b.n	8009de8 <__ssputs_r+0x58>
 8009e2e:	462a      	mov	r2, r5
 8009e30:	f000 f93d 	bl	800a0ae <_realloc_r>
 8009e34:	4606      	mov	r6, r0
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d1e2      	bne.n	8009e00 <__ssputs_r+0x70>
 8009e3a:	6921      	ldr	r1, [r4, #16]
 8009e3c:	4650      	mov	r0, sl
 8009e3e:	f7ff ff01 	bl	8009c44 <_free_r>
 8009e42:	e7c8      	b.n	8009dd6 <__ssputs_r+0x46>

08009e44 <_svfiprintf_r>:
 8009e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e48:	461d      	mov	r5, r3
 8009e4a:	898b      	ldrh	r3, [r1, #12]
 8009e4c:	b09d      	sub	sp, #116	; 0x74
 8009e4e:	061f      	lsls	r7, r3, #24
 8009e50:	4680      	mov	r8, r0
 8009e52:	460c      	mov	r4, r1
 8009e54:	4616      	mov	r6, r2
 8009e56:	d50f      	bpl.n	8009e78 <_svfiprintf_r+0x34>
 8009e58:	690b      	ldr	r3, [r1, #16]
 8009e5a:	b96b      	cbnz	r3, 8009e78 <_svfiprintf_r+0x34>
 8009e5c:	2140      	movs	r1, #64	; 0x40
 8009e5e:	f7ff ff3d 	bl	8009cdc <_malloc_r>
 8009e62:	6020      	str	r0, [r4, #0]
 8009e64:	6120      	str	r0, [r4, #16]
 8009e66:	b928      	cbnz	r0, 8009e74 <_svfiprintf_r+0x30>
 8009e68:	230c      	movs	r3, #12
 8009e6a:	f8c8 3000 	str.w	r3, [r8]
 8009e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e72:	e0c8      	b.n	800a006 <_svfiprintf_r+0x1c2>
 8009e74:	2340      	movs	r3, #64	; 0x40
 8009e76:	6163      	str	r3, [r4, #20]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e7c:	2320      	movs	r3, #32
 8009e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e82:	2330      	movs	r3, #48	; 0x30
 8009e84:	f04f 0b01 	mov.w	fp, #1
 8009e88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e8c:	9503      	str	r5, [sp, #12]
 8009e8e:	4637      	mov	r7, r6
 8009e90:	463d      	mov	r5, r7
 8009e92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e96:	b10b      	cbz	r3, 8009e9c <_svfiprintf_r+0x58>
 8009e98:	2b25      	cmp	r3, #37	; 0x25
 8009e9a:	d13e      	bne.n	8009f1a <_svfiprintf_r+0xd6>
 8009e9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009ea0:	d00b      	beq.n	8009eba <_svfiprintf_r+0x76>
 8009ea2:	4653      	mov	r3, sl
 8009ea4:	4632      	mov	r2, r6
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	f7ff ff71 	bl	8009d90 <__ssputs_r>
 8009eae:	3001      	adds	r0, #1
 8009eb0:	f000 80a4 	beq.w	8009ffc <_svfiprintf_r+0x1b8>
 8009eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb6:	4453      	add	r3, sl
 8009eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eba:	783b      	ldrb	r3, [r7, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 809d 	beq.w	8009ffc <_svfiprintf_r+0x1b8>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ecc:	9304      	str	r3, [sp, #16]
 8009ece:	9307      	str	r3, [sp, #28]
 8009ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ed6:	462f      	mov	r7, r5
 8009ed8:	2205      	movs	r2, #5
 8009eda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009ede:	4850      	ldr	r0, [pc, #320]	; (800a020 <_svfiprintf_r+0x1dc>)
 8009ee0:	f7ff fbac 	bl	800963c <memchr>
 8009ee4:	9b04      	ldr	r3, [sp, #16]
 8009ee6:	b9d0      	cbnz	r0, 8009f1e <_svfiprintf_r+0xda>
 8009ee8:	06d9      	lsls	r1, r3, #27
 8009eea:	bf44      	itt	mi
 8009eec:	2220      	movmi	r2, #32
 8009eee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ef2:	071a      	lsls	r2, r3, #28
 8009ef4:	bf44      	itt	mi
 8009ef6:	222b      	movmi	r2, #43	; 0x2b
 8009ef8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009efc:	782a      	ldrb	r2, [r5, #0]
 8009efe:	2a2a      	cmp	r2, #42	; 0x2a
 8009f00:	d015      	beq.n	8009f2e <_svfiprintf_r+0xea>
 8009f02:	462f      	mov	r7, r5
 8009f04:	2000      	movs	r0, #0
 8009f06:	250a      	movs	r5, #10
 8009f08:	9a07      	ldr	r2, [sp, #28]
 8009f0a:	4639      	mov	r1, r7
 8009f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f10:	3b30      	subs	r3, #48	; 0x30
 8009f12:	2b09      	cmp	r3, #9
 8009f14:	d94d      	bls.n	8009fb2 <_svfiprintf_r+0x16e>
 8009f16:	b1b8      	cbz	r0, 8009f48 <_svfiprintf_r+0x104>
 8009f18:	e00f      	b.n	8009f3a <_svfiprintf_r+0xf6>
 8009f1a:	462f      	mov	r7, r5
 8009f1c:	e7b8      	b.n	8009e90 <_svfiprintf_r+0x4c>
 8009f1e:	4a40      	ldr	r2, [pc, #256]	; (800a020 <_svfiprintf_r+0x1dc>)
 8009f20:	463d      	mov	r5, r7
 8009f22:	1a80      	subs	r0, r0, r2
 8009f24:	fa0b f000 	lsl.w	r0, fp, r0
 8009f28:	4318      	orrs	r0, r3
 8009f2a:	9004      	str	r0, [sp, #16]
 8009f2c:	e7d3      	b.n	8009ed6 <_svfiprintf_r+0x92>
 8009f2e:	9a03      	ldr	r2, [sp, #12]
 8009f30:	1d11      	adds	r1, r2, #4
 8009f32:	6812      	ldr	r2, [r2, #0]
 8009f34:	9103      	str	r1, [sp, #12]
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	db01      	blt.n	8009f3e <_svfiprintf_r+0xfa>
 8009f3a:	9207      	str	r2, [sp, #28]
 8009f3c:	e004      	b.n	8009f48 <_svfiprintf_r+0x104>
 8009f3e:	4252      	negs	r2, r2
 8009f40:	f043 0302 	orr.w	r3, r3, #2
 8009f44:	9207      	str	r2, [sp, #28]
 8009f46:	9304      	str	r3, [sp, #16]
 8009f48:	783b      	ldrb	r3, [r7, #0]
 8009f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f4c:	d10c      	bne.n	8009f68 <_svfiprintf_r+0x124>
 8009f4e:	787b      	ldrb	r3, [r7, #1]
 8009f50:	2b2a      	cmp	r3, #42	; 0x2a
 8009f52:	d133      	bne.n	8009fbc <_svfiprintf_r+0x178>
 8009f54:	9b03      	ldr	r3, [sp, #12]
 8009f56:	3702      	adds	r7, #2
 8009f58:	1d1a      	adds	r2, r3, #4
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	9203      	str	r2, [sp, #12]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bfb8      	it	lt
 8009f62:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f66:	9305      	str	r3, [sp, #20]
 8009f68:	4d2e      	ldr	r5, [pc, #184]	; (800a024 <_svfiprintf_r+0x1e0>)
 8009f6a:	2203      	movs	r2, #3
 8009f6c:	7839      	ldrb	r1, [r7, #0]
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f7ff fb64 	bl	800963c <memchr>
 8009f74:	b138      	cbz	r0, 8009f86 <_svfiprintf_r+0x142>
 8009f76:	2340      	movs	r3, #64	; 0x40
 8009f78:	1b40      	subs	r0, r0, r5
 8009f7a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f7e:	9b04      	ldr	r3, [sp, #16]
 8009f80:	3701      	adds	r7, #1
 8009f82:	4303      	orrs	r3, r0
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	7839      	ldrb	r1, [r7, #0]
 8009f88:	2206      	movs	r2, #6
 8009f8a:	4827      	ldr	r0, [pc, #156]	; (800a028 <_svfiprintf_r+0x1e4>)
 8009f8c:	1c7e      	adds	r6, r7, #1
 8009f8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f92:	f7ff fb53 	bl	800963c <memchr>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d038      	beq.n	800a00c <_svfiprintf_r+0x1c8>
 8009f9a:	4b24      	ldr	r3, [pc, #144]	; (800a02c <_svfiprintf_r+0x1e8>)
 8009f9c:	bb13      	cbnz	r3, 8009fe4 <_svfiprintf_r+0x1a0>
 8009f9e:	9b03      	ldr	r3, [sp, #12]
 8009fa0:	3307      	adds	r3, #7
 8009fa2:	f023 0307 	bic.w	r3, r3, #7
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	9303      	str	r3, [sp, #12]
 8009faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fac:	444b      	add	r3, r9
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	e76d      	b.n	8009e8e <_svfiprintf_r+0x4a>
 8009fb2:	fb05 3202 	mla	r2, r5, r2, r3
 8009fb6:	2001      	movs	r0, #1
 8009fb8:	460f      	mov	r7, r1
 8009fba:	e7a6      	b.n	8009f0a <_svfiprintf_r+0xc6>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	250a      	movs	r5, #10
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	3701      	adds	r7, #1
 8009fc4:	9305      	str	r3, [sp, #20]
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fcc:	3a30      	subs	r2, #48	; 0x30
 8009fce:	2a09      	cmp	r2, #9
 8009fd0:	d903      	bls.n	8009fda <_svfiprintf_r+0x196>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0c8      	beq.n	8009f68 <_svfiprintf_r+0x124>
 8009fd6:	9105      	str	r1, [sp, #20]
 8009fd8:	e7c6      	b.n	8009f68 <_svfiprintf_r+0x124>
 8009fda:	fb05 2101 	mla	r1, r5, r1, r2
 8009fde:	2301      	movs	r3, #1
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	e7f0      	b.n	8009fc6 <_svfiprintf_r+0x182>
 8009fe4:	ab03      	add	r3, sp, #12
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	4622      	mov	r2, r4
 8009fea:	4b11      	ldr	r3, [pc, #68]	; (800a030 <_svfiprintf_r+0x1ec>)
 8009fec:	a904      	add	r1, sp, #16
 8009fee:	4640      	mov	r0, r8
 8009ff0:	f7fe f8ee 	bl	80081d0 <_printf_float>
 8009ff4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009ff8:	4681      	mov	r9, r0
 8009ffa:	d1d6      	bne.n	8009faa <_svfiprintf_r+0x166>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	065b      	lsls	r3, r3, #25
 800a000:	f53f af35 	bmi.w	8009e6e <_svfiprintf_r+0x2a>
 800a004:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a006:	b01d      	add	sp, #116	; 0x74
 800a008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00c:	ab03      	add	r3, sp, #12
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	4622      	mov	r2, r4
 800a012:	4b07      	ldr	r3, [pc, #28]	; (800a030 <_svfiprintf_r+0x1ec>)
 800a014:	a904      	add	r1, sp, #16
 800a016:	4640      	mov	r0, r8
 800a018:	f7fe fb86 	bl	8008728 <_printf_i>
 800a01c:	e7ea      	b.n	8009ff4 <_svfiprintf_r+0x1b0>
 800a01e:	bf00      	nop
 800a020:	0800d524 	.word	0x0800d524
 800a024:	0800d52a 	.word	0x0800d52a
 800a028:	0800d52e 	.word	0x0800d52e
 800a02c:	080081d1 	.word	0x080081d1
 800a030:	08009d91 	.word	0x08009d91

0800a034 <_sbrk_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	2300      	movs	r3, #0
 800a038:	4c05      	ldr	r4, [pc, #20]	; (800a050 <_sbrk_r+0x1c>)
 800a03a:	4605      	mov	r5, r0
 800a03c:	4608      	mov	r0, r1
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	f7f7 fc3c 	bl	80018bc <_sbrk>
 800a044:	1c43      	adds	r3, r0, #1
 800a046:	d102      	bne.n	800a04e <_sbrk_r+0x1a>
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	b103      	cbz	r3, 800a04e <_sbrk_r+0x1a>
 800a04c:	602b      	str	r3, [r5, #0]
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	20000a64 	.word	0x20000a64

0800a054 <__ascii_mbtowc>:
 800a054:	b082      	sub	sp, #8
 800a056:	b901      	cbnz	r1, 800a05a <__ascii_mbtowc+0x6>
 800a058:	a901      	add	r1, sp, #4
 800a05a:	b142      	cbz	r2, 800a06e <__ascii_mbtowc+0x1a>
 800a05c:	b14b      	cbz	r3, 800a072 <__ascii_mbtowc+0x1e>
 800a05e:	7813      	ldrb	r3, [r2, #0]
 800a060:	600b      	str	r3, [r1, #0]
 800a062:	7812      	ldrb	r2, [r2, #0]
 800a064:	1c10      	adds	r0, r2, #0
 800a066:	bf18      	it	ne
 800a068:	2001      	movne	r0, #1
 800a06a:	b002      	add	sp, #8
 800a06c:	4770      	bx	lr
 800a06e:	4610      	mov	r0, r2
 800a070:	e7fb      	b.n	800a06a <__ascii_mbtowc+0x16>
 800a072:	f06f 0001 	mvn.w	r0, #1
 800a076:	e7f8      	b.n	800a06a <__ascii_mbtowc+0x16>

0800a078 <memmove>:
 800a078:	4288      	cmp	r0, r1
 800a07a:	b510      	push	{r4, lr}
 800a07c:	eb01 0302 	add.w	r3, r1, r2
 800a080:	d807      	bhi.n	800a092 <memmove+0x1a>
 800a082:	1e42      	subs	r2, r0, #1
 800a084:	4299      	cmp	r1, r3
 800a086:	d00a      	beq.n	800a09e <memmove+0x26>
 800a088:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a08c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a090:	e7f8      	b.n	800a084 <memmove+0xc>
 800a092:	4283      	cmp	r3, r0
 800a094:	d9f5      	bls.n	800a082 <memmove+0xa>
 800a096:	1881      	adds	r1, r0, r2
 800a098:	1ad2      	subs	r2, r2, r3
 800a09a:	42d3      	cmn	r3, r2
 800a09c:	d100      	bne.n	800a0a0 <memmove+0x28>
 800a09e:	bd10      	pop	{r4, pc}
 800a0a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0a4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a0a8:	e7f7      	b.n	800a09a <memmove+0x22>

0800a0aa <__malloc_lock>:
 800a0aa:	4770      	bx	lr

0800a0ac <__malloc_unlock>:
 800a0ac:	4770      	bx	lr

0800a0ae <_realloc_r>:
 800a0ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	4614      	mov	r4, r2
 800a0b4:	460e      	mov	r6, r1
 800a0b6:	b921      	cbnz	r1, 800a0c2 <_realloc_r+0x14>
 800a0b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a0bc:	4611      	mov	r1, r2
 800a0be:	f7ff be0d 	b.w	8009cdc <_malloc_r>
 800a0c2:	b922      	cbnz	r2, 800a0ce <_realloc_r+0x20>
 800a0c4:	f7ff fdbe 	bl	8009c44 <_free_r>
 800a0c8:	4625      	mov	r5, r4
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ce:	f000 f821 	bl	800a114 <_malloc_usable_size_r>
 800a0d2:	42a0      	cmp	r0, r4
 800a0d4:	d20f      	bcs.n	800a0f6 <_realloc_r+0x48>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7ff fdff 	bl	8009cdc <_malloc_r>
 800a0de:	4605      	mov	r5, r0
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	d0f2      	beq.n	800a0ca <_realloc_r+0x1c>
 800a0e4:	4631      	mov	r1, r6
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	f7ff fab6 	bl	8009658 <memcpy>
 800a0ec:	4631      	mov	r1, r6
 800a0ee:	4638      	mov	r0, r7
 800a0f0:	f7ff fda8 	bl	8009c44 <_free_r>
 800a0f4:	e7e9      	b.n	800a0ca <_realloc_r+0x1c>
 800a0f6:	4635      	mov	r5, r6
 800a0f8:	e7e7      	b.n	800a0ca <_realloc_r+0x1c>

0800a0fa <__ascii_wctomb>:
 800a0fa:	b149      	cbz	r1, 800a110 <__ascii_wctomb+0x16>
 800a0fc:	2aff      	cmp	r2, #255	; 0xff
 800a0fe:	bf8b      	itete	hi
 800a100:	238a      	movhi	r3, #138	; 0x8a
 800a102:	700a      	strbls	r2, [r1, #0]
 800a104:	6003      	strhi	r3, [r0, #0]
 800a106:	2001      	movls	r0, #1
 800a108:	bf88      	it	hi
 800a10a:	f04f 30ff 	movhi.w	r0, #4294967295
 800a10e:	4770      	bx	lr
 800a110:	4608      	mov	r0, r1
 800a112:	4770      	bx	lr

0800a114 <_malloc_usable_size_r>:
 800a114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a118:	1f18      	subs	r0, r3, #4
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	bfbc      	itt	lt
 800a11e:	580b      	ldrlt	r3, [r1, r0]
 800a120:	18c0      	addlt	r0, r0, r3
 800a122:	4770      	bx	lr

0800a124 <_init>:
 800a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a126:	bf00      	nop
 800a128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12a:	bc08      	pop	{r3}
 800a12c:	469e      	mov	lr, r3
 800a12e:	4770      	bx	lr

0800a130 <_fini>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	bf00      	nop
 800a134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a136:	bc08      	pop	{r3}
 800a138:	469e      	mov	lr, r3
 800a13a:	4770      	bx	lr
